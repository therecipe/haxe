package qt;

import qt.Core;

class Gui {
	private static var inited = false;

	public static function initModule() {
		if (inited) {
			return;
		}
		inited = true;
		Internal.constructorTable["gui.QAbstractTextDocumentLayout"] = NewQAbstractTextDocumentLayoutFromPointer;
		Internal.constructorTable["gui.QAbstractUndoItem"] = NewQAbstractUndoItemFromPointer;
		Internal.constructorTable["gui.QAccessible"] = NewQAccessibleFromPointer;
		Internal.constructorTable["gui.QAccessibleActionInterface"] = NewQAccessibleActionInterfaceFromPointer;
		Internal.constructorTable["gui.QAccessibleEditableTextInterface"] = NewQAccessibleEditableTextInterfaceFromPointer;
		Internal.constructorTable["gui.QAccessibleEvent"] = NewQAccessibleEventFromPointer;
		Internal.constructorTable["gui.QAccessibleInterface"] = NewQAccessibleInterfaceFromPointer;
		Internal.constructorTable["gui.QAccessibleObject"] = NewQAccessibleObjectFromPointer;
		Internal.constructorTable["gui.QAccessiblePlugin"] = NewQAccessiblePluginFromPointer;
		Internal.constructorTable["gui.QAccessibleStateChangeEvent"] = NewQAccessibleStateChangeEventFromPointer;
		Internal.constructorTable["gui.QAccessibleTableCellInterface"] = NewQAccessibleTableCellInterfaceFromPointer;
		Internal.constructorTable["gui.QAccessibleTableInterface"] = NewQAccessibleTableInterfaceFromPointer;
		Internal.constructorTable["gui.QAccessibleTableModelChangeEvent"] = NewQAccessibleTableModelChangeEventFromPointer;
		Internal.constructorTable["gui.QAccessibleTextCursorEvent"] = NewQAccessibleTextCursorEventFromPointer;
		Internal.constructorTable["gui.QAccessibleTextInsertEvent"] = NewQAccessibleTextInsertEventFromPointer;
		Internal.constructorTable["gui.QAccessibleTextInterface"] = NewQAccessibleTextInterfaceFromPointer;
		Internal.constructorTable["gui.QAccessibleTextRemoveEvent"] = NewQAccessibleTextRemoveEventFromPointer;
		Internal.constructorTable["gui.QAccessibleTextSelectionEvent"] = NewQAccessibleTextSelectionEventFromPointer;
		Internal.constructorTable["gui.QAccessibleTextUpdateEvent"] = NewQAccessibleTextUpdateEventFromPointer;
		Internal.constructorTable["gui.QAccessibleValueChangeEvent"] = NewQAccessibleValueChangeEventFromPointer;
		Internal.constructorTable["gui.QAccessibleValueInterface"] = NewQAccessibleValueInterfaceFromPointer;
		Internal.constructorTable["gui.QActionEvent"] = NewQActionEventFromPointer;
		Internal.constructorTable["gui.QApplicationStateChangeEvent"] = NewQApplicationStateChangeEventFromPointer;
		Internal.constructorTable["gui.QBackingStore"] = NewQBackingStoreFromPointer;
		Internal.constructorTable["gui.QBitmap"] = NewQBitmapFromPointer;
		Internal.constructorTable["gui.QBrush"] = NewQBrushFromPointer;
		Internal.constructorTable["gui.QClipboard"] = NewQClipboardFromPointer;
		Internal.constructorTable["gui.QCloseEvent"] = NewQCloseEventFromPointer;
		Internal.constructorTable["gui.QColor"] = NewQColorFromPointer;
		Internal.constructorTable["gui.QColorDialogOptions"] = NewQColorDialogOptionsFromPointer;
		Internal.constructorTable["gui.QConicalGradient"] = NewQConicalGradientFromPointer;
		Internal.constructorTable["gui.QContextMenuEvent"] = NewQContextMenuEventFromPointer;
		Internal.constructorTable["gui.QCursor"] = NewQCursorFromPointer;
		Internal.constructorTable["gui.QDesktopServices"] = NewQDesktopServicesFromPointer;
		Internal.constructorTable["gui.QDoubleValidator"] = NewQDoubleValidatorFromPointer;
		Internal.constructorTable["gui.QDrag"] = NewQDragFromPointer;
		Internal.constructorTable["gui.QDragEnterEvent"] = NewQDragEnterEventFromPointer;
		Internal.constructorTable["gui.QDragLeaveEvent"] = NewQDragLeaveEventFromPointer;
		Internal.constructorTable["gui.QDragMoveEvent"] = NewQDragMoveEventFromPointer;
		Internal.constructorTable["gui.QDropEvent"] = NewQDropEventFromPointer;
		Internal.constructorTable["gui.QEnterEvent"] = NewQEnterEventFromPointer;
		Internal.constructorTable["gui.QExposeEvent"] = NewQExposeEventFromPointer;
		Internal.constructorTable["gui.QFileOpenEvent"] = NewQFileOpenEventFromPointer;
		Internal.constructorTable["gui.QFocusEvent"] = NewQFocusEventFromPointer;
		Internal.constructorTable["gui.QFont"] = NewQFontFromPointer;
		Internal.constructorTable["gui.QFontDatabase"] = NewQFontDatabaseFromPointer;
		Internal.constructorTable["gui.QFontDialogOptions"] = NewQFontDialogOptionsFromPointer;
		Internal.constructorTable["gui.QFontInfo"] = NewQFontInfoFromPointer;
		Internal.constructorTable["gui.QFontMetrics"] = NewQFontMetricsFromPointer;
		Internal.constructorTable["gui.QFontMetricsF"] = NewQFontMetricsFFromPointer;
		Internal.constructorTable["gui.QGenericPlugin"] = NewQGenericPluginFromPointer;
		Internal.constructorTable["gui.QGenericPluginFactory"] = NewQGenericPluginFactoryFromPointer;
		Internal.constructorTable["gui.QGlyphRun"] = NewQGlyphRunFromPointer;
		Internal.constructorTable["gui.QGradient"] = NewQGradientFromPointer;
		Internal.constructorTable["gui.QGuiApplication"] = NewQGuiApplicationFromPointer;
		Internal.constructorTable["gui.QHelpEvent"] = NewQHelpEventFromPointer;
		Internal.constructorTable["gui.QHideEvent"] = NewQHideEventFromPointer;
		Internal.constructorTable["gui.QHoverEvent"] = NewQHoverEventFromPointer;
		Internal.constructorTable["gui.QIcon"] = NewQIconFromPointer;
		Internal.constructorTable["gui.QIconDragEvent"] = NewQIconDragEventFromPointer;
		Internal.constructorTable["gui.QIconEngine"] = NewQIconEngineFromPointer;
		Internal.constructorTable["gui.QIconEnginePlugin"] = NewQIconEnginePluginFromPointer;
		Internal.constructorTable["gui.QImage"] = NewQImageFromPointer;
		Internal.constructorTable["gui.QImageIOHandler"] = NewQImageIOHandlerFromPointer;
		Internal.constructorTable["gui.QImageIOPlugin"] = NewQImageIOPluginFromPointer;
		Internal.constructorTable["gui.QImageReader"] = NewQImageReaderFromPointer;
		Internal.constructorTable["gui.QImageTextKeyLang"] = NewQImageTextKeyLangFromPointer;
		Internal.constructorTable["gui.QImageWriter"] = NewQImageWriterFromPointer;
		Internal.constructorTable["gui.QInputEvent"] = NewQInputEventFromPointer;
		Internal.constructorTable["gui.QInputMethod"] = NewQInputMethodFromPointer;
		Internal.constructorTable["gui.QInputMethodEvent"] = NewQInputMethodEventFromPointer;
		Internal.constructorTable["gui.QInputMethodQueryEvent"] = NewQInputMethodQueryEventFromPointer;
		Internal.constructorTable["gui.QIntValidator"] = NewQIntValidatorFromPointer;
		Internal.constructorTable["gui.QKeyEvent"] = NewQKeyEventFromPointer;
		Internal.constructorTable["gui.QKeySequence"] = NewQKeySequenceFromPointer;
		Internal.constructorTable["gui.QLinearGradient"] = NewQLinearGradientFromPointer;
		Internal.constructorTable["gui.QMatrix"] = NewQMatrixFromPointer;
		Internal.constructorTable["gui.QMatrix4x4"] = NewQMatrix4x4FromPointer;
		Internal.constructorTable["gui.QMouseEvent"] = NewQMouseEventFromPointer;
		Internal.constructorTable["gui.QMoveEvent"] = NewQMoveEventFromPointer;
		Internal.constructorTable["gui.QMovie"] = NewQMovieFromPointer;
		Internal.constructorTable["gui.QNativeGestureEvent"] = NewQNativeGestureEventFromPointer;
		Internal.constructorTable["gui.QOffscreenSurface"] = NewQOffscreenSurfaceFromPointer;
		Internal.constructorTable["gui.QOpenGLBuffer"] = NewQOpenGLBufferFromPointer;
		Internal.constructorTable["gui.QOpenGLContext"] = NewQOpenGLContextFromPointer;
		Internal.constructorTable["gui.QOpenGLContextGroup"] = NewQOpenGLContextGroupFromPointer;
		Internal.constructorTable["gui.QOpenGLDebugLogger"] = NewQOpenGLDebugLoggerFromPointer;
		Internal.constructorTable["gui.QOpenGLDebugMessage"] = NewQOpenGLDebugMessageFromPointer;
		Internal.constructorTable["gui.QOpenGLExtraFunctions"] = NewQOpenGLExtraFunctionsFromPointer;
		Internal.constructorTable["gui.QOpenGLFramebufferObject"] = NewQOpenGLFramebufferObjectFromPointer;
		Internal.constructorTable["gui.QOpenGLFramebufferObjectFormat"] = NewQOpenGLFramebufferObjectFormatFromPointer;
		Internal.constructorTable["gui.QOpenGLFunctions"] = NewQOpenGLFunctionsFromPointer;
		Internal.constructorTable["gui.QOpenGLPaintDevice"] = NewQOpenGLPaintDeviceFromPointer;
		Internal.constructorTable["gui.QOpenGLPixelTransferOptions"] = NewQOpenGLPixelTransferOptionsFromPointer;
		Internal.constructorTable["gui.QOpenGLShader"] = NewQOpenGLShaderFromPointer;
		Internal.constructorTable["gui.QOpenGLShaderProgram"] = NewQOpenGLShaderProgramFromPointer;
		Internal.constructorTable["gui.QOpenGLTexture"] = NewQOpenGLTextureFromPointer;
		Internal.constructorTable["gui.QOpenGLTextureBlitter"] = NewQOpenGLTextureBlitterFromPointer;
		Internal.constructorTable["gui.QOpenGLTimeMonitor"] = NewQOpenGLTimeMonitorFromPointer;
		Internal.constructorTable["gui.QOpenGLTimerQuery"] = NewQOpenGLTimerQueryFromPointer;
		Internal.constructorTable["gui.QOpenGLVersionFunctionsBackend"] = NewQOpenGLVersionFunctionsBackendFromPointer;
		Internal.constructorTable["gui.QOpenGLVersionFunctionsStorage"] = NewQOpenGLVersionFunctionsStorageFromPointer;
		Internal.constructorTable["gui.QOpenGLVersionProfile"] = NewQOpenGLVersionProfileFromPointer;
		Internal.constructorTable["gui.QOpenGLVersionStatus"] = NewQOpenGLVersionStatusFromPointer;
		Internal.constructorTable["gui.QOpenGLVertexArrayObject"] = NewQOpenGLVertexArrayObjectFromPointer;
		Internal.constructorTable["gui.QOpenGLWindow"] = NewQOpenGLWindowFromPointer;
		Internal.constructorTable["gui.QPageLayout"] = NewQPageLayoutFromPointer;
		Internal.constructorTable["gui.QPageSize"] = NewQPageSizeFromPointer;
		Internal.constructorTable["gui.QPagedPaintDevice"] = NewQPagedPaintDeviceFromPointer;
		Internal.constructorTable["gui.QPaintDevice"] = NewQPaintDeviceFromPointer;
		Internal.constructorTable["gui.QPaintDeviceWindow"] = NewQPaintDeviceWindowFromPointer;
		Internal.constructorTable["gui.QPaintEngine"] = NewQPaintEngineFromPointer;
		Internal.constructorTable["gui.QPaintEngineState"] = NewQPaintEngineStateFromPointer;
		Internal.constructorTable["gui.QPaintEvent"] = NewQPaintEventFromPointer;
		Internal.constructorTable["gui.QPainter"] = NewQPainterFromPointer;
		Internal.constructorTable["gui.QPainterPath"] = NewQPainterPathFromPointer;
		Internal.constructorTable["gui.QPainterPathStroker"] = NewQPainterPathStrokerFromPointer;
		Internal.constructorTable["gui.QPalette"] = NewQPaletteFromPointer;
		Internal.constructorTable["gui.QPdfWriter"] = NewQPdfWriterFromPointer;
		Internal.constructorTable["gui.QPen"] = NewQPenFromPointer;
		Internal.constructorTable["gui.QPicture"] = NewQPictureFromPointer;
		Internal.constructorTable["gui.QPictureFormatPlugin"] = NewQPictureFormatPluginFromPointer;
		Internal.constructorTable["gui.QPictureIO"] = NewQPictureIOFromPointer;
		Internal.constructorTable["gui.QPixelFormat"] = NewQPixelFormatFromPointer;
		Internal.constructorTable["gui.QPixmap"] = NewQPixmapFromPointer;
		Internal.constructorTable["gui.QPixmapCache"] = NewQPixmapCacheFromPointer;
		Internal.constructorTable["gui.QPlatformSurfaceEvent"] = NewQPlatformSurfaceEventFromPointer;
		Internal.constructorTable["gui.QPointingDeviceUniqueId"] = NewQPointingDeviceUniqueIdFromPointer;
		Internal.constructorTable["gui.QPolygon"] = NewQPolygonFromPointer;
		Internal.constructorTable["gui.QPolygonF"] = NewQPolygonFFromPointer;
		Internal.constructorTable["gui.QQuaternion"] = NewQQuaternionFromPointer;
		Internal.constructorTable["gui.QRadialGradient"] = NewQRadialGradientFromPointer;
		Internal.constructorTable["gui.QRasterWindow"] = NewQRasterWindowFromPointer;
		Internal.constructorTable["gui.QRawFont"] = NewQRawFontFromPointer;
		Internal.constructorTable["gui.QRegExpValidator"] = NewQRegExpValidatorFromPointer;
		Internal.constructorTable["gui.QRegion"] = NewQRegionFromPointer;
		Internal.constructorTable["gui.QRegularExpressionValidator"] = NewQRegularExpressionValidatorFromPointer;
		Internal.constructorTable["gui.QResizeEvent"] = NewQResizeEventFromPointer;
		Internal.constructorTable["gui.QRgba64"] = NewQRgba64FromPointer;
		Internal.constructorTable["gui.QScreen"] = NewQScreenFromPointer;
		Internal.constructorTable["gui.QScreenOrientationChangeEvent"] = NewQScreenOrientationChangeEventFromPointer;
		Internal.constructorTable["gui.QScrollEvent"] = NewQScrollEventFromPointer;
		Internal.constructorTable["gui.QScrollPrepareEvent"] = NewQScrollPrepareEventFromPointer;
		Internal.constructorTable["gui.QSessionManager"] = NewQSessionManagerFromPointer;
		Internal.constructorTable["gui.QShortcutEvent"] = NewQShortcutEventFromPointer;
		Internal.constructorTable["gui.QShowEvent"] = NewQShowEventFromPointer;
		Internal.constructorTable["gui.QStandardItem"] = NewQStandardItemFromPointer;
		Internal.constructorTable["gui.QStandardItemModel"] = NewQStandardItemModelFromPointer;
		Internal.constructorTable["gui.QStaticText"] = NewQStaticTextFromPointer;
		Internal.constructorTable["gui.QStatusTipEvent"] = NewQStatusTipEventFromPointer;
		Internal.constructorTable["gui.QStyleHints"] = NewQStyleHintsFromPointer;
		Internal.constructorTable["gui.QSurface"] = NewQSurfaceFromPointer;
		Internal.constructorTable["gui.QSurfaceFormat"] = NewQSurfaceFormatFromPointer;
		Internal.constructorTable["gui.QSyntaxHighlighter"] = NewQSyntaxHighlighterFromPointer;
		Internal.constructorTable["gui.QTabletEvent"] = NewQTabletEventFromPointer;
		Internal.constructorTable["gui.QTextBlock"] = NewQTextBlockFromPointer;
		Internal.constructorTable["gui.QTextBlockFormat"] = NewQTextBlockFormatFromPointer;
		Internal.constructorTable["gui.QTextBlockGroup"] = NewQTextBlockGroupFromPointer;
		Internal.constructorTable["gui.QTextBlockUserData"] = NewQTextBlockUserDataFromPointer;
		Internal.constructorTable["gui.QTextCharFormat"] = NewQTextCharFormatFromPointer;
		Internal.constructorTable["gui.QTextCursor"] = NewQTextCursorFromPointer;
		Internal.constructorTable["gui.QTextDocument"] = NewQTextDocumentFromPointer;
		Internal.constructorTable["gui.QTextDocumentFragment"] = NewQTextDocumentFragmentFromPointer;
		Internal.constructorTable["gui.QTextDocumentWriter"] = NewQTextDocumentWriterFromPointer;
		Internal.constructorTable["gui.QTextFormat"] = NewQTextFormatFromPointer;
		Internal.constructorTable["gui.QTextFragment"] = NewQTextFragmentFromPointer;
		Internal.constructorTable["gui.QTextFrame"] = NewQTextFrameFromPointer;
		Internal.constructorTable["gui.QTextFrameFormat"] = NewQTextFrameFormatFromPointer;
		Internal.constructorTable["gui.QTextFrameLayoutData"] = NewQTextFrameLayoutDataFromPointer;
		Internal.constructorTable["gui.QTextImageFormat"] = NewQTextImageFormatFromPointer;
		Internal.constructorTable["gui.QTextInlineObject"] = NewQTextInlineObjectFromPointer;
		Internal.constructorTable["gui.QTextItem"] = NewQTextItemFromPointer;
		Internal.constructorTable["gui.QTextLayout"] = NewQTextLayoutFromPointer;
		Internal.constructorTable["gui.QTextLength"] = NewQTextLengthFromPointer;
		Internal.constructorTable["gui.QTextLine"] = NewQTextLineFromPointer;
		Internal.constructorTable["gui.QTextList"] = NewQTextListFromPointer;
		Internal.constructorTable["gui.QTextListFormat"] = NewQTextListFormatFromPointer;
		Internal.constructorTable["gui.QTextObject"] = NewQTextObjectFromPointer;
		Internal.constructorTable["gui.QTextObjectInterface"] = NewQTextObjectInterfaceFromPointer;
		Internal.constructorTable["gui.QTextOption"] = NewQTextOptionFromPointer;
		Internal.constructorTable["gui.QTextTable"] = NewQTextTableFromPointer;
		Internal.constructorTable["gui.QTextTableCell"] = NewQTextTableCellFromPointer;
		Internal.constructorTable["gui.QTextTableCellFormat"] = NewQTextTableCellFormatFromPointer;
		Internal.constructorTable["gui.QTextTableFormat"] = NewQTextTableFormatFromPointer;
		Internal.constructorTable["gui.QTouchDevice"] = NewQTouchDeviceFromPointer;
		Internal.constructorTable["gui.QTouchEvent"] = NewQTouchEventFromPointer;
		Internal.constructorTable["gui.QTransform"] = NewQTransformFromPointer;
		Internal.constructorTable["gui.QValidator"] = NewQValidatorFromPointer;
		Internal.constructorTable["gui.QVector2D"] = NewQVector2DFromPointer;
		Internal.constructorTable["gui.QVector3D"] = NewQVector3DFromPointer;
		Internal.constructorTable["gui.QVector4D"] = NewQVector4DFromPointer;
		Internal.constructorTable["gui.QWhatsThisClickedEvent"] = NewQWhatsThisClickedEventFromPointer;
		Internal.constructorTable["gui.QWheelEvent"] = NewQWheelEventFromPointer;
		Internal.constructorTable["gui.QWindow"] = NewQWindowFromPointer;
		Internal.constructorTable["gui.QWindowStateChangeEvent"] = NewQWindowStateChangeEventFromPointer;

		Internal.init();
		Core.initModule();
	}
}

interface QAbstractOpenGLFunctions_ITF {
	public function QAbstractOpenGLFunctions_PTR():QAbstractOpenGLFunctions;
}

class QAbstractOpenGLFunctions extends Internal implements QAbstractOpenGLFunctions_ITF {
	public function new() {
		super();
	}

	public function QAbstractOpenGLFunctions_PTR():QAbstractOpenGLFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAbstractOpenGLFunctions_PTR"]);
	};
}

interface QAbstractTextDocumentLayout_ITF extends QObject_ITF {
	public function QAbstractTextDocumentLayout_PTR():QAbstractTextDocumentLayout;
}

class QAbstractTextDocumentLayout extends QObject implements QAbstractTextDocumentLayout_ITF {
	public function new() {
		super();
	}

	public function QAbstractTextDocumentLayout_PTR():QAbstractTextDocumentLayout {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAbstractTextDocumentLayout_PTR"]);
	};

	public function AnchorAt(position:QPointF_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AnchorAt", position]);
	};

	public function ConnectBlockBoundingRect(f:(block:QTextBlock) -> QRectF) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBlockBoundingRect", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBlockBoundingRect() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBlockBoundingRect"]);
	};

	public function BlockBoundingRect(block:QTextBlock_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockBoundingRect", block]);
	};

	public function Document():QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Document"]);
	};

	public function ConnectDocumentChanged(f:(position:Int, charsRemoved:Int, charsAdded:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDocumentChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDocumentChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDocumentChanged"]);
	};

	public function DocumentChanged(position:Int, charsRemoved:Int, charsAdded:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"DocumentChanged",
			position,
			charsRemoved,
			charsAdded
		]);
	};

	public function ConnectDocumentSize(f:() -> QSizeF) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDocumentSize", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDocumentSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDocumentSize"]);
	};

	public function DocumentSize():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DocumentSize"]);
	};

	public function ConnectDocumentSizeChanged(f:(newSize:QSizeF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDocumentSizeChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDocumentSizeChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDocumentSizeChanged"]);
	};

	public function DocumentSizeChanged(newSize:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DocumentSizeChanged", newSize]);
	};

	public function ConnectDrawInlineObject(f:(painter:QPainter, rect:QRectF, object:QTextInlineObject, posInDocument:Int, format:QTextFormat) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawInlineObject", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawInlineObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawInlineObject"]);
	};

	public function DrawInlineObject(painter:QPainter_ITF, rect:QRectF_ITF, object:QTextInlineObject_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"DrawInlineObject",
			painter,
			rect,
			object,
			posInDocument,
			format
		]);
	};

	public function DrawInlineObjectDefault(painter:QPainter_ITF, rect:QRectF_ITF, object:QTextInlineObject_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"DrawInlineObjectDefault",
			painter,
			rect,
			object,
			posInDocument,
			format
		]);
	};

	public function Format(position:Int):QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format", position]);
	};

	public function FormatAt(pos:QPointF_ITF):QTextFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FormatAt", pos]);
	};

	public function ConnectFrameBoundingRect(f:(frame:QTextFrame) -> QRectF) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFrameBoundingRect", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFrameBoundingRect() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFrameBoundingRect"]);
	};

	public function FrameBoundingRect(frame:QTextFrame_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FrameBoundingRect", frame]);
	};

	public function HandlerForObject(objectType:Int):QTextObjectInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HandlerForObject", objectType]);
	};

	public function ConnectHitTest(f:(point:QPointF, accuracy:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectHitTest", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectHitTest() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectHitTest"]);
	};

	public function HitTest(point:QPointF_ITF, accuracy:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HitTest", point, accuracy]);
	};

	public function ImageAt(pos:QPointF_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageAt", pos]);
	};

	public function ConnectPageCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPageCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPageCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPageCount"]);
	};

	public function PageCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageCount"]);
	};

	public function ConnectPageCountChanged(f:(newPages:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPageCountChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPageCountChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPageCountChanged"]);
	};

	public function PageCountChanged(newPages:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PageCountChanged", newPages]);
	};

	public function PaintDevice():QPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintDevice"]);
	};

	public function ConnectPositionInlineObject(f:(item:QTextInlineObject, posInDocument:Int, format:QTextFormat) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectPositionInlineObject",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectPositionInlineObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPositionInlineObject"]);
	};

	public function PositionInlineObject(item:QTextInlineObject_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PositionInlineObject", item, posInDocument, format]);
	};

	public function PositionInlineObjectDefault(item:QTextInlineObject_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"PositionInlineObjectDefault",
			item,
			posInDocument,
			format
		]);
	};

	public function RegisterHandler(objectType:Int, component:QObject_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RegisterHandler", objectType, component]);
	};

	public function ConnectResizeInlineObject(f:(item:QTextInlineObject, posInDocument:Int, format:QTextFormat) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectResizeInlineObject",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectResizeInlineObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectResizeInlineObject"]);
	};

	public function ResizeInlineObject(item:QTextInlineObject_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResizeInlineObject", item, posInDocument, format]);
	};

	public function ResizeInlineObjectDefault(item:QTextInlineObject_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"ResizeInlineObjectDefault",
			item,
			posInDocument,
			format
		]);
	};

	public function SetPaintDevice(device:QPaintDevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPaintDevice", device]);
	};

	public function UnregisterHandler(objectType:Int, component:QObject_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UnregisterHandler", objectType, component]);
	};

	public function ConnectUpdate(f:(rect:QRectF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUpdate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUpdate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUpdate"]);
	};

	public function Update(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Update", rect]);
	};

	public function ConnectUpdateBlock(f:(block:QTextBlock) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUpdateBlock", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUpdateBlock() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUpdateBlock"]);
	};

	public function UpdateBlock(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UpdateBlock", block]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQAbstractTextDocumentLayoutFromPointer(ptr:String):QAbstractTextDocumentLayout {
	final r = new QAbstractTextDocumentLayout();
	r.initFrom(ptr, "gui.QAbstractTextDocumentLayout");
	return r;
}

interface QAbstractUndoItem_ITF {
	public function QAbstractUndoItem_PTR():QAbstractUndoItem;
}

class QAbstractUndoItem extends Internal implements QAbstractUndoItem_ITF {
	public function new() {
		super();
	}

	public function QAbstractUndoItem_PTR():QAbstractUndoItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAbstractUndoItem_PTR"]);
	};

	public function DestroyQAbstractUndoItem() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAbstractUndoItem"]);
	};
}

function NewQAbstractUndoItemFromPointer(ptr:String):QAbstractUndoItem {
	final r = new QAbstractUndoItem();
	r.initFrom(ptr, "gui.QAbstractUndoItem");
	return r;
}

interface QAccessible_ITF {
	public function QAccessible_PTR():QAccessible;
}

class QAccessible extends Internal implements QAccessible_ITF {
	public function new() {
		super();
	}

	public function QAccessible_PTR():QAccessible {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessible_PTR"]);
	};

	public function DestroyQAccessible() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessible"]);
	};

	public function IsActive():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsActive"]);
	};

	public function QueryAccessibleInterface(object:QObject_ITF):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QueryAccessibleInterface", object]);
	};

	public function SetRootObject(object:QObject_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRootObject", object]);
	};

	public function UpdateAccessibility2(event:QAccessibleEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UpdateAccessibility2", event]);
	};
}

function NewQAccessibleFromPointer(ptr:String):QAccessible {
	final r = new QAccessible();
	r.initFrom(ptr, "gui.QAccessible");
	return r;
}

function QAccessible_IsActive():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessible_IsActive", ""]);
}

function QAccessible_QueryAccessibleInterface(object:QObject_ITF):QAccessibleInterface {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessible_QueryAccessibleInterface", "", object]);
}

function QAccessible_SetRootObject(object:QObject_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QAccessible_SetRootObject", "", object]);
}

function QAccessible_UpdateAccessibility2(event:QAccessibleEvent_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QAccessible_UpdateAccessibility2", "", event]);
}

interface QAccessibleActionInterface_ITF {
	public function QAccessibleActionInterface_PTR():QAccessibleActionInterface;
}

class QAccessibleActionInterface extends Internal implements QAccessibleActionInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleActionInterface_PTR():QAccessibleActionInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleActionInterface_PTR"]);
	};

	public function ConnectActionNames(f:() -> Array<String>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectActionNames", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectActionNames() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectActionNames"]);
	};

	public function ActionNames():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ActionNames"]);
	};

	public function DecreaseAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DecreaseAction"]);
	};

	public function ConnectDoAction(f:(actionName:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDoAction", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDoAction() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDoAction"]);
	};

	public function DoAction(actionName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DoAction", actionName]);
	};

	public function IncreaseAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IncreaseAction"]);
	};

	public function ConnectKeyBindingsForAction(f:(actionName:String) -> Array<String>) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectKeyBindingsForAction",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectKeyBindingsForAction() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectKeyBindingsForAction"]);
	};

	public function KeyBindingsForAction(actionName:String):Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyBindingsForAction", actionName]);
	};

	public function ConnectLocalizedActionDescription(f:(actionName:String) -> String) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectLocalizedActionDescription",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectLocalizedActionDescription() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLocalizedActionDescription"]);
	};

	public function LocalizedActionDescription(actionName:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalizedActionDescription", actionName]);
	};

	public function LocalizedActionDescriptionDefault(actionName:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalizedActionDescriptionDefault", actionName]);
	};

	public function ConnectLocalizedActionName(f:(actionName:String) -> String) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectLocalizedActionName",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectLocalizedActionName() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLocalizedActionName"]);
	};

	public function LocalizedActionName(actionName:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalizedActionName", actionName]);
	};

	public function LocalizedActionNameDefault(actionName:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalizedActionNameDefault", actionName]);
	};

	public function NextPageAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NextPageAction"]);
	};

	public function PressAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PressAction"]);
	};

	public function PreviousPageAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PreviousPageAction"]);
	};

	public function ScrollDownAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScrollDownAction"]);
	};

	public function ScrollLeftAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScrollLeftAction"]);
	};

	public function ScrollRightAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScrollRightAction"]);
	};

	public function ScrollUpAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScrollUpAction"]);
	};

	public function SetFocusAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetFocusAction"]);
	};

	public function ShowMenuAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShowMenuAction"]);
	};

	public function ToggleAction():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToggleAction"]);
	};

	public function ConnectDestroyQAccessibleActionInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleActionInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleActionInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleActionInterface"]);
	};

	public function DestroyQAccessibleActionInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleActionInterface"]);
	};

	public function DestroyQAccessibleActionInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleActionInterfaceDefault"]);
	};
}

function NewQAccessibleActionInterfaceFromPointer(ptr:String):QAccessibleActionInterface {
	final r = new QAccessibleActionInterface();
	r.initFrom(ptr, "gui.QAccessibleActionInterface");
	return r;
}

function QAccessibleActionInterface_DecreaseAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_DecreaseAction", ""]);
}

function QAccessibleActionInterface_IncreaseAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_IncreaseAction", ""]);
}

function QAccessibleActionInterface_NextPageAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_NextPageAction", ""]);
}

function QAccessibleActionInterface_PressAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_PressAction", ""]);
}

function QAccessibleActionInterface_PreviousPageAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_PreviousPageAction", ""]);
}

function QAccessibleActionInterface_ScrollDownAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_ScrollDownAction", ""]);
}

function QAccessibleActionInterface_ScrollLeftAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_ScrollLeftAction", ""]);
}

function QAccessibleActionInterface_ScrollRightAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_ScrollRightAction", ""]);
}

function QAccessibleActionInterface_ScrollUpAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_ScrollUpAction", ""]);
}

function QAccessibleActionInterface_SetFocusAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_SetFocusAction", ""]);
}

function QAccessibleActionInterface_ShowMenuAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_ShowMenuAction", ""]);
}

function QAccessibleActionInterface_ToggleAction():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QAccessibleActionInterface_ToggleAction", ""]);
}

interface QAccessibleEditableTextInterface_ITF {
	public function QAccessibleEditableTextInterface_PTR():QAccessibleEditableTextInterface;
}

class QAccessibleEditableTextInterface extends Internal implements QAccessibleEditableTextInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleEditableTextInterface_PTR():QAccessibleEditableTextInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleEditableTextInterface_PTR"]);
	};

	public function ConnectDeleteText(f:(startOffset:Int, endOffset:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDeleteText", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDeleteText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDeleteText"]);
	};

	public function DeleteText(startOffset:Int, endOffset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteText", startOffset, endOffset]);
	};

	public function ConnectInsertText(f:(offset:Int, text:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectInsertText", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectInsertText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInsertText"]);
	};

	public function InsertText(offset:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertText", offset, text]);
	};

	public function ConnectReplaceText(f:(startOffset:Int, endOffset:Int, text:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectReplaceText", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectReplaceText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectReplaceText"]);
	};

	public function ReplaceText(startOffset:Int, endOffset:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ReplaceText", startOffset, endOffset, text]);
	};

	public function ConnectDestroyQAccessibleEditableTextInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleEditableTextInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleEditableTextInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleEditableTextInterface"]);
	};

	public function DestroyQAccessibleEditableTextInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleEditableTextInterface"]);
	};

	public function DestroyQAccessibleEditableTextInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleEditableTextInterfaceDefault"]);
	};
}

function NewQAccessibleEditableTextInterfaceFromPointer(ptr:String):QAccessibleEditableTextInterface {
	final r = new QAccessibleEditableTextInterface();
	r.initFrom(ptr, "gui.QAccessibleEditableTextInterface");
	return r;
}

interface QAccessibleEvent_ITF {
	public function QAccessibleEvent_PTR():QAccessibleEvent;
}

class QAccessibleEvent extends Internal implements QAccessibleEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleEvent_PTR():QAccessibleEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleEvent_PTR"]);
	};

	public function ConnectAccessibleInterface(f:() -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectAccessibleInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectAccessibleInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAccessibleInterface"]);
	};

	public function AccessibleInterface():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AccessibleInterface"]);
	};

	public function AccessibleInterfaceDefault():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AccessibleInterfaceDefault"]);
	};

	public function Child():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Child"]);
	};

	public function Object():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Object"]);
	};

	public function SetChild(child:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetChild", child]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function ConnectDestroyQAccessibleEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleEvent"]);
	};

	public function DestroyQAccessibleEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleEvent"]);
	};

	public function DestroyQAccessibleEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleEventDefault"]);
	};
}

function NewQAccessibleEventFromPointer(ptr:String):QAccessibleEvent {
	final r = new QAccessibleEvent();
	r.initFrom(ptr, "gui.QAccessibleEvent");
	return r;
}

function NewQAccessibleEvent2(object:QObject_ITF, ty:Int):QAccessibleEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleEvent2", "", object, ty]);
}

function NewQAccessibleEvent3(interfa:QAccessibleInterface_ITF, ty:Int):QAccessibleEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleEvent3", "", interfa, ty]);
}

interface QAccessibleInterface_ITF {
	public function QAccessibleInterface_PTR():QAccessibleInterface;
}

class QAccessibleInterface extends Internal implements QAccessibleInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleInterface_PTR():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleInterface_PTR"]);
	};

	public function ActionInterface():QAccessibleActionInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ActionInterface"]);
	};

	public function ConnectBackgroundColor(f:() -> QColor) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBackgroundColor", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBackgroundColor() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBackgroundColor"]);
	};

	public function BackgroundColor():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundColor"]);
	};

	public function BackgroundColorDefault():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundColorDefault"]);
	};

	public function ConnectChild(f:(index:Int) -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectChild", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectChild() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectChild"]);
	};

	public function Child(index:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Child", index]);
	};

	public function ConnectChildAt(f:(x:Int, y:Int) -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectChildAt", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectChildAt() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectChildAt"]);
	};

	public function ChildAt(x:Int, y:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildAt", x, y]);
	};

	public function ConnectChildCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectChildCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectChildCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectChildCount"]);
	};

	public function ChildCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildCount"]);
	};

	public function ConnectFocusChild(f:() -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFocusChild", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFocusChild() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusChild"]);
	};

	public function FocusChild():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocusChild"]);
	};

	public function FocusChildDefault():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocusChildDefault"]);
	};

	public function ConnectForegroundColor(f:() -> QColor) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectForegroundColor", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectForegroundColor() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectForegroundColor"]);
	};

	public function ForegroundColor():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ForegroundColor"]);
	};

	public function ForegroundColorDefault():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ForegroundColorDefault"]);
	};

	public function ConnectIndexOfChild(f:(child:QAccessibleInterface) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIndexOfChild", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIndexOfChild() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIndexOfChild"]);
	};

	public function IndexOfChild(child:QAccessibleInterface_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IndexOfChild", child]);
	};

	public function ConnectInterface_cast(f:(ty:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectInterface_cast", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectInterface_cast() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInterface_cast"]);
	};

	public function Interface_cast(ty:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Interface_cast", ty]);
	};

	public function Interface_castDefault(ty:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Interface_castDefault", ty]);
	};

	public function ConnectIsValid(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIsValid", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIsValid() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIsValid"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function ConnectObject(f:() -> QObject) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectObject", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectObject"]);
	};

	public function Object():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Object"]);
	};

	public function ConnectParent(f:() -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectParent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectParent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectParent"]);
	};

	public function Parent():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parent"]);
	};

	public function ConnectRect(f:() -> QRect) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRect", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRect() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRect"]);
	};

	public function Rect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function ConnectRole(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRole", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRole() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRole"]);
	};

	public function Role():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Role"]);
	};

	public function ConnectSetText(f:(t:Int, text:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetText", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetText"]);
	};

	public function SetText(t:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", t, text]);
	};

	public function TableCellInterface():QAccessibleTableCellInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TableCellInterface"]);
	};

	public function TableInterface():QAccessibleTableInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TableInterface"]);
	};

	public function ConnectText(f:(t:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectText", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectText"]);
	};

	public function Text(t:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text", t]);
	};

	public function TextInterface():QAccessibleTextInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextInterface"]);
	};

	public function ValueInterface():QAccessibleValueInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ValueInterface"]);
	};

	public function ConnectWindow(f:() -> QWindow) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectWindow", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectWindow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWindow"]);
	};

	public function Window():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Window"]);
	};

	public function WindowDefault():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowDefault"]);
	};

	public function ConnectDestroyQAccessibleInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleInterface"]);
	};

	public function DestroyQAccessibleInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleInterface"]);
	};

	public function DestroyQAccessibleInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleInterfaceDefault"]);
	};
}

function NewQAccessibleInterfaceFromPointer(ptr:String):QAccessibleInterface {
	final r = new QAccessibleInterface();
	r.initFrom(ptr, "gui.QAccessibleInterface");
	return r;
}

interface QAccessibleObject_ITF extends QAccessibleInterface_ITF {
	public function QAccessibleObject_PTR():QAccessibleObject;
}

class QAccessibleObject extends QAccessibleInterface implements QAccessibleObject_ITF {
	public function new() {
		super();
	}

	public function QAccessibleObject_PTR():QAccessibleObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleObject_PTR"]);
	};

	public override function ConnectChildAt(f:(x:Int, y:Int) -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectChildAt", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectChildAt() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectChildAt"]);
	};

	public override function ChildAt(x:Int, y:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildAt", x, y]);
	};

	public function ChildAtDefault(x:Int, y:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildAtDefault", x, y]);
	};

	public override function ConnectIsValid(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIsValid", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectIsValid() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIsValid"]);
	};

	public override function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function IsValidDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValidDefault"]);
	};

	public override function ConnectObject(f:() -> QObject) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectObject", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectObject"]);
	};

	public override function Object():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Object"]);
	};

	public function ObjectDefault():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectDefault"]);
	};

	public override function ConnectRect(f:() -> QRect) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRect", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectRect() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRect"]);
	};

	public override function Rect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function RectDefault():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RectDefault"]);
	};

	public override function ConnectSetText(f:(t:Int, text:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetText", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectSetText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetText"]);
	};

	public override function SetText(t:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", t, text]);
	};

	public function SetTextDefault(t:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextDefault", t, text]);
	};

	public function ConnectDestroyQAccessibleObject(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleObject",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleObject"]);
	};

	public function DestroyQAccessibleObject() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleObject"]);
	};

	public function DestroyQAccessibleObjectDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleObjectDefault"]);
	};

	public override function Child(index:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Child", index]);
	};

	public function ChildDefault(index:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildDefault", index]);
	};

	public override function ChildCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildCount"]);
	};

	public function ChildCountDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildCountDefault"]);
	};

	public override function IndexOfChild(child:QAccessibleInterface_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IndexOfChild", child]);
	};

	public function IndexOfChildDefault(child:QAccessibleInterface_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IndexOfChildDefault", child]);
	};

	public override function Parent():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parent"]);
	};

	public function ParentDefault():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ParentDefault"]);
	};

	public override function Role():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Role"]);
	};

	public function RoleDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RoleDefault"]);
	};

	public override function Text(t:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text", t]);
	};

	public function TextDefault(t:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextDefault", t]);
	};
}

function NewQAccessibleObjectFromPointer(ptr:String):QAccessibleObject {
	final r = new QAccessibleObject();
	r.initFrom(ptr, "gui.QAccessibleObject");
	return r;
}

interface QAccessiblePlugin_ITF extends QObject_ITF {
	public function QAccessiblePlugin_PTR():QAccessiblePlugin;
}

class QAccessiblePlugin extends QObject implements QAccessiblePlugin_ITF {
	public function new() {
		super();
	}

	public function QAccessiblePlugin_PTR():QAccessiblePlugin {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessiblePlugin_PTR"]);
	};

	public function ConnectCreate(f:(key:String, object:QObject) -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCreate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCreate"]);
	};

	public function Create(key:String, object:QObject_ITF):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create", key, object]);
	};

	public function ConnectDestroyQAccessiblePlugin(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessiblePlugin",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessiblePlugin() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessiblePlugin"]);
	};

	public function DestroyQAccessiblePlugin() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessiblePlugin"]);
	};

	public function DestroyQAccessiblePluginDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessiblePluginDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQAccessiblePluginFromPointer(ptr:String):QAccessiblePlugin {
	final r = new QAccessiblePlugin();
	r.initFrom(ptr, "gui.QAccessiblePlugin");
	return r;
}

function NewQAccessiblePlugin(parent:QObject_ITF):QAccessiblePlugin {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessiblePlugin", "", parent]);
}

interface QAccessibleStateChangeEvent_ITF extends QAccessibleEvent_ITF {
	public function QAccessibleStateChangeEvent_PTR():QAccessibleStateChangeEvent;
}

class QAccessibleStateChangeEvent extends QAccessibleEvent implements QAccessibleStateChangeEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleStateChangeEvent_PTR():QAccessibleStateChangeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleStateChangeEvent_PTR"]);
	};

	public function DestroyQAccessibleStateChangeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleStateChangeEvent"]);
	};
}

function NewQAccessibleStateChangeEventFromPointer(ptr:String):QAccessibleStateChangeEvent {
	final r = new QAccessibleStateChangeEvent();
	r.initFrom(ptr, "gui.QAccessibleStateChangeEvent");
	return r;
}

interface QAccessibleTableCellInterface_ITF {
	public function QAccessibleTableCellInterface_PTR():QAccessibleTableCellInterface;
}

class QAccessibleTableCellInterface extends Internal implements QAccessibleTableCellInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTableCellInterface_PTR():QAccessibleTableCellInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTableCellInterface_PTR"]);
	};

	public function ConnectColumnExtent(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectColumnExtent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectColumnExtent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectColumnExtent"]);
	};

	public function ColumnExtent():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnExtent"]);
	};

	public function ConnectColumnHeaderCells(f:() -> Array<QAccessibleInterface>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectColumnHeaderCells", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectColumnHeaderCells() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectColumnHeaderCells"]);
	};

	public function ColumnHeaderCells():Array<QAccessibleInterface> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnHeaderCells"]);
	};

	public function ConnectColumnIndex(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectColumnIndex", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectColumnIndex() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectColumnIndex"]);
	};

	public function ColumnIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnIndex"]);
	};

	public function ConnectIsSelected(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIsSelected", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIsSelected() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIsSelected"]);
	};

	public function IsSelected():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSelected"]);
	};

	public function ConnectRowExtent(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRowExtent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRowExtent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRowExtent"]);
	};

	public function RowExtent():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowExtent"]);
	};

	public function ConnectRowHeaderCells(f:() -> Array<QAccessibleInterface>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRowHeaderCells", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRowHeaderCells() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRowHeaderCells"]);
	};

	public function RowHeaderCells():Array<QAccessibleInterface> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowHeaderCells"]);
	};

	public function ConnectRowIndex(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRowIndex", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRowIndex() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRowIndex"]);
	};

	public function RowIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowIndex"]);
	};

	public function ConnectTable(f:() -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTable", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTable() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTable"]);
	};

	public function Table():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Table"]);
	};

	public function ConnectDestroyQAccessibleTableCellInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleTableCellInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleTableCellInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleTableCellInterface"]);
	};

	public function DestroyQAccessibleTableCellInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTableCellInterface"]);
	};

	public function DestroyQAccessibleTableCellInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTableCellInterfaceDefault"]);
	};
}

function NewQAccessibleTableCellInterfaceFromPointer(ptr:String):QAccessibleTableCellInterface {
	final r = new QAccessibleTableCellInterface();
	r.initFrom(ptr, "gui.QAccessibleTableCellInterface");
	return r;
}

interface QAccessibleTableInterface_ITF {
	public function QAccessibleTableInterface_PTR():QAccessibleTableInterface;
}

class QAccessibleTableInterface extends Internal implements QAccessibleTableInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTableInterface_PTR():QAccessibleTableInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTableInterface_PTR"]);
	};

	public function ConnectCaption(f:() -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCaption", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCaption() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCaption"]);
	};

	public function Caption():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Caption"]);
	};

	public function ConnectCellAt(f:(row:Int, column:Int) -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCellAt", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCellAt() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCellAt"]);
	};

	public function CellAt(row:Int, column:Int):QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CellAt", row, column]);
	};

	public function ConnectColumnCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectColumnCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectColumnCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectColumnCount"]);
	};

	public function ColumnCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnCount"]);
	};

	public function ConnectColumnDescription(f:(column:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectColumnDescription", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectColumnDescription() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectColumnDescription"]);
	};

	public function ColumnDescription(column:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnDescription", column]);
	};

	public function ConnectIsColumnSelected(f:(column:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIsColumnSelected", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIsColumnSelected() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIsColumnSelected"]);
	};

	public function IsColumnSelected(column:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsColumnSelected", column]);
	};

	public function ConnectIsRowSelected(f:(row:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIsRowSelected", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIsRowSelected() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIsRowSelected"]);
	};

	public function IsRowSelected(row:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsRowSelected", row]);
	};

	public function ConnectModelChange(f:(event:QAccessibleTableModelChangeEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectModelChange", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectModelChange() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectModelChange"]);
	};

	public function ModelChange(event:QAccessibleTableModelChangeEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ModelChange", event]);
	};

	public function ConnectRowCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRowCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRowCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRowCount"]);
	};

	public function RowCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowCount"]);
	};

	public function ConnectRowDescription(f:(row:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRowDescription", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRowDescription() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRowDescription"]);
	};

	public function RowDescription(row:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowDescription", row]);
	};

	public function ConnectSelectColumn(f:(column:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectColumn", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectColumn() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectColumn"]);
	};

	public function SelectColumn(column:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectColumn", column]);
	};

	public function ConnectSelectRow(f:(row:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectRow", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectRow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectRow"]);
	};

	public function SelectRow(row:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectRow", row]);
	};

	public function ConnectSelectedCellCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectedCellCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectedCellCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectedCellCount"]);
	};

	public function SelectedCellCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedCellCount"]);
	};

	public function ConnectSelectedCells(f:() -> Array<QAccessibleInterface>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectedCells", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectedCells() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectedCells"]);
	};

	public function SelectedCells():Array<QAccessibleInterface> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedCells"]);
	};

	public function ConnectSelectedColumnCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectSelectedColumnCount",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectSelectedColumnCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectedColumnCount"]);
	};

	public function SelectedColumnCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedColumnCount"]);
	};

	public function ConnectSelectedColumns(f:() -> Array<Int>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectedColumns", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectedColumns() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectedColumns"]);
	};

	public function SelectedColumns():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedColumns"]);
	};

	public function ConnectSelectedRowCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectedRowCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectedRowCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectedRowCount"]);
	};

	public function SelectedRowCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedRowCount"]);
	};

	public function ConnectSelectedRows(f:() -> Array<Int>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectedRows", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectedRows() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectedRows"]);
	};

	public function SelectedRows():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedRows"]);
	};

	public function ConnectSummary(f:() -> QAccessibleInterface) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSummary", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSummary() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSummary"]);
	};

	public function Summary():QAccessibleInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Summary"]);
	};

	public function ConnectUnselectColumn(f:(column:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUnselectColumn", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUnselectColumn() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUnselectColumn"]);
	};

	public function UnselectColumn(column:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnselectColumn", column]);
	};

	public function ConnectUnselectRow(f:(row:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUnselectRow", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUnselectRow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUnselectRow"]);
	};

	public function UnselectRow(row:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnselectRow", row]);
	};

	public function ConnectDestroyQAccessibleTableInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleTableInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleTableInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleTableInterface"]);
	};

	public function DestroyQAccessibleTableInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTableInterface"]);
	};

	public function DestroyQAccessibleTableInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTableInterfaceDefault"]);
	};
}

function NewQAccessibleTableInterfaceFromPointer(ptr:String):QAccessibleTableInterface {
	final r = new QAccessibleTableInterface();
	r.initFrom(ptr, "gui.QAccessibleTableInterface");
	return r;
}

interface QAccessibleTableModelChangeEvent_ITF extends QAccessibleEvent_ITF {
	public function QAccessibleTableModelChangeEvent_PTR():QAccessibleTableModelChangeEvent;
}

class QAccessibleTableModelChangeEvent extends QAccessibleEvent implements QAccessibleTableModelChangeEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTableModelChangeEvent_PTR():QAccessibleTableModelChangeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTableModelChangeEvent_PTR"]);
	};

	public function DestroyQAccessibleTableModelChangeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTableModelChangeEvent"]);
	};

	public function FirstColumn():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstColumn"]);
	};

	public function FirstRow():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstRow"]);
	};

	public function LastColumn():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastColumn"]);
	};

	public function LastRow():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastRow"]);
	};

	public function ModelChangeType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ModelChangeType"]);
	};

	public function SetFirstColumn(column:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFirstColumn", column]);
	};

	public function SetFirstRow(row:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFirstRow", row]);
	};

	public function SetLastColumn(column:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLastColumn", column]);
	};

	public function SetLastRow(row:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLastRow", row]);
	};

	public function SetModelChangeType(changeType:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetModelChangeType", changeType]);
	};
}

function NewQAccessibleTableModelChangeEventFromPointer(ptr:String):QAccessibleTableModelChangeEvent {
	final r = new QAccessibleTableModelChangeEvent();
	r.initFrom(ptr, "gui.QAccessibleTableModelChangeEvent");
	return r;
}

function NewQAccessibleTableModelChangeEvent(object:QObject_ITF, changeType:Int):QAccessibleTableModelChangeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTableModelChangeEvent", "", object, changeType]);
}

function NewQAccessibleTableModelChangeEvent2(iface:QAccessibleInterface_ITF, changeType:Int):QAccessibleTableModelChangeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTableModelChangeEvent2", "", iface, changeType]);
}

interface QAccessibleTextCursorEvent_ITF extends QAccessibleEvent_ITF {
	public function QAccessibleTextCursorEvent_PTR():QAccessibleTextCursorEvent;
}

class QAccessibleTextCursorEvent extends QAccessibleEvent implements QAccessibleTextCursorEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTextCursorEvent_PTR():QAccessibleTextCursorEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTextCursorEvent_PTR"]);
	};

	public function DestroyQAccessibleTextCursorEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextCursorEvent"]);
	};

	public function CursorPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorPosition"]);
	};

	public function SetCursorPosition(position:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCursorPosition", position]);
	};
}

function NewQAccessibleTextCursorEventFromPointer(ptr:String):QAccessibleTextCursorEvent {
	final r = new QAccessibleTextCursorEvent();
	r.initFrom(ptr, "gui.QAccessibleTextCursorEvent");
	return r;
}

function NewQAccessibleTextCursorEvent(object:QObject_ITF, cursorPos:Int):QAccessibleTextCursorEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextCursorEvent", "", object, cursorPos]);
}

function NewQAccessibleTextCursorEvent2(iface:QAccessibleInterface_ITF, cursorPos:Int):QAccessibleTextCursorEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextCursorEvent2", "", iface, cursorPos]);
}

interface QAccessibleTextInsertEvent_ITF extends QAccessibleTextCursorEvent_ITF {
	public function QAccessibleTextInsertEvent_PTR():QAccessibleTextInsertEvent;
}

class QAccessibleTextInsertEvent extends QAccessibleTextCursorEvent implements QAccessibleTextInsertEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTextInsertEvent_PTR():QAccessibleTextInsertEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTextInsertEvent_PTR"]);
	};

	public function DestroyQAccessibleTextInsertEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextInsertEvent"]);
	};

	public function ChangePosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChangePosition"]);
	};

	public function TextInserted():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextInserted"]);
	};
}

function NewQAccessibleTextInsertEventFromPointer(ptr:String):QAccessibleTextInsertEvent {
	final r = new QAccessibleTextInsertEvent();
	r.initFrom(ptr, "gui.QAccessibleTextInsertEvent");
	return r;
}

function NewQAccessibleTextInsertEvent(object:QObject_ITF, position:Int, text:String):QAccessibleTextInsertEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextInsertEvent", "", object, position, text]);
}

function NewQAccessibleTextInsertEvent2(iface:QAccessibleInterface_ITF, position:Int, text:String):QAccessibleTextInsertEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextInsertEvent2", "", iface, position, text]);
}

interface QAccessibleTextInterface_ITF {
	public function QAccessibleTextInterface_PTR():QAccessibleTextInterface;
}

class QAccessibleTextInterface extends Internal implements QAccessibleTextInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTextInterface_PTR():QAccessibleTextInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTextInterface_PTR"]);
	};

	public function ConnectAddSelection(f:(startOffset:Int, endOffset:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectAddSelection", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectAddSelection() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAddSelection"]);
	};

	public function AddSelection(startOffset:Int, endOffset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddSelection", startOffset, endOffset]);
	};

	public function ConnectCharacterCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCharacterCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCharacterCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCharacterCount"]);
	};

	public function CharacterCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharacterCount"]);
	};

	public function ConnectCharacterRect(f:(offset:Int) -> QRect) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCharacterRect", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCharacterRect() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCharacterRect"]);
	};

	public function CharacterRect(offset:Int):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharacterRect", offset]);
	};

	public function ConnectCursorPosition(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCursorPosition", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCursorPosition() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCursorPosition"]);
	};

	public function CursorPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorPosition"]);
	};

	public function ConnectOffsetAtPoint(f:(point:QPoint) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectOffsetAtPoint", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectOffsetAtPoint() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectOffsetAtPoint"]);
	};

	public function OffsetAtPoint(point:QPoint_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OffsetAtPoint", point]);
	};

	public function ConnectRemoveSelection(f:(selectionIndex:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRemoveSelection", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRemoveSelection() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRemoveSelection"]);
	};

	public function RemoveSelection(selectionIndex:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveSelection", selectionIndex]);
	};

	public function ConnectScrollToSubstring(f:(startIndex:Int, endIndex:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectScrollToSubstring", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectScrollToSubstring() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectScrollToSubstring"]);
	};

	public function ScrollToSubstring(startIndex:Int, endIndex:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ScrollToSubstring", startIndex, endIndex]);
	};

	public function ConnectSelection(f:(selectionIndex:Int, startOffset:Int, endOffset:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelection", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelection() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelection"]);
	};

	public function Selection(selectionIndex:Int, startOffset:Int, endOffset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Selection", selectionIndex, startOffset, endOffset]);
	};

	public function ConnectSelectionCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectionCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectionCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectionCount"]);
	};

	public function SelectionCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectionCount"]);
	};

	public function ConnectSetCursorPosition(f:(position:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetCursorPosition", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetCursorPosition() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetCursorPosition"]);
	};

	public function SetCursorPosition(position:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCursorPosition", position]);
	};

	public function ConnectSetSelection(f:(selectionIndex:Int, startOffset:Int, endOffset:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetSelection", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetSelection() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetSelection"]);
	};

	public function SetSelection(selectionIndex:Int, startOffset:Int, endOffset:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetSelection",
			selectionIndex,
			startOffset,
			endOffset
		]);
	};

	public function ConnectText(f:(startOffset:Int, endOffset:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectText", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectText() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectText"]);
	};

	public function Text(startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text", startOffset, endOffset]);
	};

	public function ConnectTextAfterOffset(f:(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTextAfterOffset", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTextAfterOffset() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTextAfterOffset"]);
	};

	public function TextAfterOffset(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"TextAfterOffset",
			offset,
			boundaryType,
			startOffset,
			endOffset
		]);
	};

	public function TextAfterOffsetDefault(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"TextAfterOffsetDefault",
			offset,
			boundaryType,
			startOffset,
			endOffset
		]);
	};

	public function ConnectTextAtOffset(f:(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTextAtOffset", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTextAtOffset() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTextAtOffset"]);
	};

	public function TextAtOffset(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"TextAtOffset",
			offset,
			boundaryType,
			startOffset,
			endOffset
		]);
	};

	public function TextAtOffsetDefault(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"TextAtOffsetDefault",
			offset,
			boundaryType,
			startOffset,
			endOffset
		]);
	};

	public function ConnectTextBeforeOffset(f:(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int) -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTextBeforeOffset", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTextBeforeOffset() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTextBeforeOffset"]);
	};

	public function TextBeforeOffset(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"TextBeforeOffset",
			offset,
			boundaryType,
			startOffset,
			endOffset
		]);
	};

	public function TextBeforeOffsetDefault(offset:Int, boundaryType:Int, startOffset:Int, endOffset:Int):String {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"TextBeforeOffsetDefault",
			offset,
			boundaryType,
			startOffset,
			endOffset
		]);
	};

	public function ConnectDestroyQAccessibleTextInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleTextInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleTextInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleTextInterface"]);
	};

	public function DestroyQAccessibleTextInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextInterface"]);
	};

	public function DestroyQAccessibleTextInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextInterfaceDefault"]);
	};
}

function NewQAccessibleTextInterfaceFromPointer(ptr:String):QAccessibleTextInterface {
	final r = new QAccessibleTextInterface();
	r.initFrom(ptr, "gui.QAccessibleTextInterface");
	return r;
}

interface QAccessibleTextRemoveEvent_ITF extends QAccessibleTextCursorEvent_ITF {
	public function QAccessibleTextRemoveEvent_PTR():QAccessibleTextRemoveEvent;
}

class QAccessibleTextRemoveEvent extends QAccessibleTextCursorEvent implements QAccessibleTextRemoveEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTextRemoveEvent_PTR():QAccessibleTextRemoveEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTextRemoveEvent_PTR"]);
	};

	public function DestroyQAccessibleTextRemoveEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextRemoveEvent"]);
	};

	public function ChangePosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChangePosition"]);
	};

	public function TextRemoved():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextRemoved"]);
	};
}

function NewQAccessibleTextRemoveEventFromPointer(ptr:String):QAccessibleTextRemoveEvent {
	final r = new QAccessibleTextRemoveEvent();
	r.initFrom(ptr, "gui.QAccessibleTextRemoveEvent");
	return r;
}

function NewQAccessibleTextRemoveEvent(object:QObject_ITF, position:Int, text:String):QAccessibleTextRemoveEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextRemoveEvent", "", object, position, text]);
}

function NewQAccessibleTextRemoveEvent2(iface:QAccessibleInterface_ITF, position:Int, text:String):QAccessibleTextRemoveEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextRemoveEvent2", "", iface, position, text]);
}

interface QAccessibleTextSelectionEvent_ITF extends QAccessibleTextCursorEvent_ITF {
	public function QAccessibleTextSelectionEvent_PTR():QAccessibleTextSelectionEvent;
}

class QAccessibleTextSelectionEvent extends QAccessibleTextCursorEvent implements QAccessibleTextSelectionEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTextSelectionEvent_PTR():QAccessibleTextSelectionEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTextSelectionEvent_PTR"]);
	};

	public function DestroyQAccessibleTextSelectionEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextSelectionEvent"]);
	};

	public function SelectionEnd():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectionEnd"]);
	};

	public function SelectionStart():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectionStart"]);
	};

	public function SetSelection(start:Int, end:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSelection", start, end]);
	};
}

function NewQAccessibleTextSelectionEventFromPointer(ptr:String):QAccessibleTextSelectionEvent {
	final r = new QAccessibleTextSelectionEvent();
	r.initFrom(ptr, "gui.QAccessibleTextSelectionEvent");
	return r;
}

function NewQAccessibleTextSelectionEvent(object:QObject_ITF, start:Int, end:Int):QAccessibleTextSelectionEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextSelectionEvent", "", object, start, end]);
}

function NewQAccessibleTextSelectionEvent2(iface:QAccessibleInterface_ITF, start:Int, end:Int):QAccessibleTextSelectionEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextSelectionEvent2", "", iface, start, end]);
}

interface QAccessibleTextUpdateEvent_ITF extends QAccessibleTextCursorEvent_ITF {
	public function QAccessibleTextUpdateEvent_PTR():QAccessibleTextUpdateEvent;
}

class QAccessibleTextUpdateEvent extends QAccessibleTextCursorEvent implements QAccessibleTextUpdateEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleTextUpdateEvent_PTR():QAccessibleTextUpdateEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleTextUpdateEvent_PTR"]);
	};

	public function DestroyQAccessibleTextUpdateEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleTextUpdateEvent"]);
	};

	public function ChangePosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChangePosition"]);
	};

	public function TextInserted():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextInserted"]);
	};

	public function TextRemoved():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextRemoved"]);
	};
}

function NewQAccessibleTextUpdateEventFromPointer(ptr:String):QAccessibleTextUpdateEvent {
	final r = new QAccessibleTextUpdateEvent();
	r.initFrom(ptr, "gui.QAccessibleTextUpdateEvent");
	return r;
}

function NewQAccessibleTextUpdateEvent(object:QObject_ITF, position:Int, oldText:String, text:String):QAccessibleTextUpdateEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextUpdateEvent", "", object, position, oldText, text]);
}

function NewQAccessibleTextUpdateEvent2(iface:QAccessibleInterface_ITF, position:Int, oldText:String, text:String):QAccessibleTextUpdateEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleTextUpdateEvent2", "", iface, position, oldText, text]);
}

interface QAccessibleValueChangeEvent_ITF extends QAccessibleEvent_ITF {
	public function QAccessibleValueChangeEvent_PTR():QAccessibleValueChangeEvent;
}

class QAccessibleValueChangeEvent extends QAccessibleEvent implements QAccessibleValueChangeEvent_ITF {
	public function new() {
		super();
	}

	public function QAccessibleValueChangeEvent_PTR():QAccessibleValueChangeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleValueChangeEvent_PTR"]);
	};

	public function DestroyQAccessibleValueChangeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleValueChangeEvent"]);
	};

	public function SetValue(value:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetValue", value]);
	};

	public function Value():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Value"]);
	};
}

function NewQAccessibleValueChangeEventFromPointer(ptr:String):QAccessibleValueChangeEvent {
	final r = new QAccessibleValueChangeEvent();
	r.initFrom(ptr, "gui.QAccessibleValueChangeEvent");
	return r;
}

function NewQAccessibleValueChangeEvent(object:QObject_ITF, value:QVariant_ITF):QAccessibleValueChangeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleValueChangeEvent", "", object, value]);
}

function NewQAccessibleValueChangeEvent2(iface:QAccessibleInterface_ITF, val:QVariant_ITF):QAccessibleValueChangeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQAccessibleValueChangeEvent2", "", iface, val]);
}

interface QAccessibleValueInterface_ITF {
	public function QAccessibleValueInterface_PTR():QAccessibleValueInterface;
}

class QAccessibleValueInterface extends Internal implements QAccessibleValueInterface_ITF {
	public function new() {
		super();
	}

	public function QAccessibleValueInterface_PTR():QAccessibleValueInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QAccessibleValueInterface_PTR"]);
	};

	public function ConnectCurrentValue(f:() -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCurrentValue", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCurrentValue() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCurrentValue"]);
	};

	public function CurrentValue():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentValue"]);
	};

	public function ConnectMaximumValue(f:() -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMaximumValue", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMaximumValue() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMaximumValue"]);
	};

	public function MaximumValue():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumValue"]);
	};

	public function ConnectMinimumStepSize(f:() -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMinimumStepSize", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMinimumStepSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMinimumStepSize"]);
	};

	public function MinimumStepSize():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumStepSize"]);
	};

	public function ConnectMinimumValue(f:() -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMinimumValue", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMinimumValue() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMinimumValue"]);
	};

	public function MinimumValue():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumValue"]);
	};

	public function ConnectSetCurrentValue(f:(value:QVariant) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetCurrentValue", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetCurrentValue() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetCurrentValue"]);
	};

	public function SetCurrentValue(value:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCurrentValue", value]);
	};

	public function ConnectDestroyQAccessibleValueInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQAccessibleValueInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQAccessibleValueInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQAccessibleValueInterface"]);
	};

	public function DestroyQAccessibleValueInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleValueInterface"]);
	};

	public function DestroyQAccessibleValueInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQAccessibleValueInterfaceDefault"]);
	};
}

function NewQAccessibleValueInterfaceFromPointer(ptr:String):QAccessibleValueInterface {
	final r = new QAccessibleValueInterface();
	r.initFrom(ptr, "gui.QAccessibleValueInterface");
	return r;
}

interface QActionEvent_ITF extends QEvent_ITF {
	public function QActionEvent_PTR():QActionEvent;
}

class QActionEvent extends QEvent implements QActionEvent_ITF {
	public function new() {
		super();
	}

	public function QActionEvent_PTR():QActionEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QActionEvent_PTR"]);
	};

	public function DestroyQActionEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQActionEvent"]);
	};

	public function Action():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Action"]);
	};

	public function Before():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Before"]);
	};
}

function NewQActionEventFromPointer(ptr:String):QActionEvent {
	final r = new QActionEvent();
	r.initFrom(ptr, "gui.QActionEvent");
	return r;
}

function NewQActionEvent(ty:Int, action:Int, before:Int):QActionEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQActionEvent", "", ty, action, before]);
}

interface QApplicationStateChangeEvent_ITF extends QEvent_ITF {
	public function QApplicationStateChangeEvent_PTR():QApplicationStateChangeEvent;
}

class QApplicationStateChangeEvent extends QEvent implements QApplicationStateChangeEvent_ITF {
	public function new() {
		super();
	}

	public function QApplicationStateChangeEvent_PTR():QApplicationStateChangeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QApplicationStateChangeEvent_PTR"]);
	};

	public function DestroyQApplicationStateChangeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQApplicationStateChangeEvent"]);
	};

	public function ApplicationState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ApplicationState"]);
	};
}

function NewQApplicationStateChangeEventFromPointer(ptr:String):QApplicationStateChangeEvent {
	final r = new QApplicationStateChangeEvent();
	r.initFrom(ptr, "gui.QApplicationStateChangeEvent");
	return r;
}

function NewQApplicationStateChangeEvent(applicationState:Int):QApplicationStateChangeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQApplicationStateChangeEvent", "", applicationState]);
}

interface QBackingStore_ITF {
	public function QBackingStore_PTR():QBackingStore;
}

class QBackingStore extends Internal implements QBackingStore_ITF {
	public function new() {
		super();
	}

	public function QBackingStore_PTR():QBackingStore {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QBackingStore_PTR"]);
	};

	public function BeginPaint(region:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BeginPaint", region]);
	};

	public function EndPaint() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EndPaint"]);
	};

	public function Flush(region:QRegion_ITF, window:QWindow_ITF, offset:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Flush", region, window, offset]);
	};

	public function HasStaticContents():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasStaticContents"]);
	};

	public function PaintDevice():QPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintDevice"]);
	};

	public function Resize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Resize", size]);
	};

	public function Scroll(area:QRegion_ITF, dx:Int, dy:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Scroll", area, dx, dy]);
	};

	public function SetStaticContents(region:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStaticContents", region]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function StaticContents():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StaticContents"]);
	};

	public function Window():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Window"]);
	};

	public function DestroyQBackingStore() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQBackingStore"]);
	};
}

function NewQBackingStoreFromPointer(ptr:String):QBackingStore {
	final r = new QBackingStore();
	r.initFrom(ptr, "gui.QBackingStore");
	return r;
}

function NewQBackingStore(window:QWindow_ITF):QBackingStore {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBackingStore", "", window]);
}

interface QBitmap_ITF extends QPixmap_ITF {
	public function QBitmap_PTR():QBitmap;
}

class QBitmap extends QPixmap implements QBitmap_ITF {
	public function new() {
		super();
	}

	public function QBitmap_PTR():QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QBitmap_PTR"]);
	};

	public function Clear() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear"]);
	};

	public function FromData(size:QSize_ITF, bits:String, monoFormat:Int):QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromData", size, bits, monoFormat]);
	};

	public function FromImage_QBitmap(image:QImage_ITF, flags:Int):QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromImage", image, flags]);
	};

	public override function FromImage2(image:QImage_ITF, flags:Int):QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromImage2", image, flags]);
	};

	public function Swap_QBitmap(other:QBitmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Transformed_QBitmap(matrix:QTransform_ITF):QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformed", matrix]);
	};

	public function ConnectDestroyQBitmap(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQBitmap", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQBitmap() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQBitmap"]);
	};

	public function DestroyQBitmap() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQBitmap"]);
	};

	public function DestroyQBitmapDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQBitmapDefault"]);
	};
}

function NewQBitmapFromPointer(ptr:String):QBitmap {
	final r = new QBitmap();
	r.initFrom(ptr, "gui.QBitmap");
	return r;
}

function NewQBitmap():QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBitmap", ""]);
}

function NewQBitmap2(pixmap:QPixmap_ITF):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBitmap2", "", pixmap]);
}

function NewQBitmap3(width:Int, height:Int):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBitmap3", "", width, height]);
}

function NewQBitmap4(size:QSize_ITF):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBitmap4", "", size]);
}

function NewQBitmap5(fileName:String, format:String):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBitmap5", "", fileName, format]);
}

function QBitmap_FromData(size:QSize_ITF, bits:String, monoFormat:Int):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QBitmap_FromData", "", size, bits, monoFormat]);
}

function QBitmap_FromImage(image:QImage_ITF, flags:Int):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QBitmap_FromImage", "", image, flags]);
}

function QBitmap_FromImage2(image:QImage_ITF, flags:Int):QBitmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QBitmap_FromImage2", "", image, flags]);
}

interface QBrush_ITF {
	public function QBrush_PTR():QBrush;
}

class QBrush extends Internal implements QBrush_ITF {
	public function new() {
		super();
	}

	public function QBrush_PTR():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QBrush_PTR"]);
	};

	public function Color():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Color"]);
	};

	public function Gradient():QGradient {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Gradient"]);
	};

	public function IsOpaque():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsOpaque"]);
	};

	public function Matrix():QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Matrix"]);
	};

	public function SetColor(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColor", color]);
	};

	public function SetColor2(color:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColor2", color]);
	};

	public function SetMatrix(matrix:QMatrix_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMatrix", matrix]);
	};

	public function SetStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyle", style]);
	};

	public function SetTexture(pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTexture", pixmap]);
	};

	public function SetTextureImage(image:QImage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextureImage", image]);
	};

	public function SetTransform(matrix:QTransform_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTransform", matrix]);
	};

	public function Style():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Style"]);
	};

	public function Swap(other:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Texture():QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Texture"]);
	};

	public function TextureImage():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextureImage"]);
	};

	public function Transform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transform"]);
	};

	public function DestroyQBrush() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQBrush"]);
	};

	public function ToVariant():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVariant"]);
	};
}

function NewQBrushFromPointer(ptr:String):QBrush {
	final r = new QBrush();
	r.initFrom(ptr, "gui.QBrush");
	return r;
}

function NewQBrush():QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush", ""]);
}

function NewQBrush2(style:Int):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush2", "", style]);
}

function NewQBrush3(color:QColor_ITF, style:Int):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush3", "", color, style]);
}

function NewQBrush4(color:Int, style:Int):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush4", "", color, style]);
}

function NewQBrush5(color:QColor_ITF, pixmap:QPixmap_ITF):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush5", "", color, pixmap]);
}

function NewQBrush6(color:Int, pixmap:QPixmap_ITF):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush6", "", color, pixmap]);
}

function NewQBrush7(pixmap:QPixmap_ITF):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush7", "", pixmap]);
}

function NewQBrush8(image:QImage_ITF):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush8", "", image]);
}

function NewQBrush9(other:QBrush_ITF):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush9", "", other]);
}

function NewQBrush10(gradient:QGradient_ITF):QBrush {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQBrush10", "", gradient]);
}

interface QClipboard_ITF extends QObject_ITF {
	public function QClipboard_PTR():QClipboard;
}

class QClipboard extends QObject implements QClipboard_ITF {
	public function new() {
		super();
	}

	public function QClipboard_PTR():QClipboard {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QClipboard_PTR"]);
	};

	public function ConnectChanged(f:(mode:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectChanged"]);
	};

	public function Changed(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Changed", mode]);
	};

	public function Clear(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear", mode]);
	};

	public function ConnectDataChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDataChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDataChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDataChanged"]);
	};

	public function DataChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DataChanged"]);
	};

	public function ConnectFindBufferChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFindBufferChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFindBufferChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFindBufferChanged"]);
	};

	public function FindBufferChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "FindBufferChanged"]);
	};

	public function Image(mode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Image", mode]);
	};

	public function MimeData(mode:Int):QMimeData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MimeData", mode]);
	};

	public function OwnsClipboard():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OwnsClipboard"]);
	};

	public function OwnsFindBuffer():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OwnsFindBuffer"]);
	};

	public function OwnsSelection():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OwnsSelection"]);
	};

	public function Pixmap(mode:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap", mode]);
	};

	public function ConnectSelectionChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSelectionChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSelectionChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSelectionChanged"]);
	};

	public function SelectionChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "SelectionChanged"]);
	};

	public function SetImage(image:QImage_ITF, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetImage", image, mode]);
	};

	public function SetMimeData(src:QMimeData_ITF, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMimeData", src, mode]);
	};

	public function SetPixmap(pixmap:QPixmap_ITF, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixmap", pixmap, mode]);
	};

	public function SetText(text:String, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", text, mode]);
	};

	public function SupportsFindBuffer():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsFindBuffer"]);
	};

	public function SupportsSelection():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsSelection"]);
	};

	public function Text(mode:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text", mode]);
	};

	public function Text2(subtype:String, mode:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text2", subtype, mode]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQClipboardFromPointer(ptr:String):QClipboard {
	final r = new QClipboard();
	r.initFrom(ptr, "gui.QClipboard");
	return r;
}

interface QCloseEvent_ITF extends QEvent_ITF {
	public function QCloseEvent_PTR():QCloseEvent;
}

class QCloseEvent extends QEvent implements QCloseEvent_ITF {
	public function new() {
		super();
	}

	public function QCloseEvent_PTR():QCloseEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QCloseEvent_PTR"]);
	};

	public function DestroyQCloseEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQCloseEvent"]);
	};
}

function NewQCloseEventFromPointer(ptr:String):QCloseEvent {
	final r = new QCloseEvent();
	r.initFrom(ptr, "gui.QCloseEvent");
	return r;
}

function NewQCloseEvent():QCloseEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCloseEvent", ""]);
}

interface QColor_ITF {
	public function QColor_PTR():QColor;
}

class QColor extends Internal implements QColor_ITF {
	public function new() {
		super();
	}

	public function QColor_PTR():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QColor_PTR"]);
	};

	public function DestroyQColor() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQColor"]);
	};

	public function Alpha():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alpha"]);
	};

	public function AlphaF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AlphaF"]);
	};

	public function Black():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Black"]);
	};

	public function BlackF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlackF"]);
	};

	public function Blue():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Blue"]);
	};

	public function BlueF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlueF"]);
	};

	public function ColorNames():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColorNames"]);
	};

	public function ConvertTo(colorSpec:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConvertTo", colorSpec]);
	};

	public function Cyan():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Cyan"]);
	};

	public function CyanF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CyanF"]);
	};

	public function Darker(factor:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Darker", factor]);
	};

	public function FromCmyk(c:Int, m:Int, y:Int, k:Int, a:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromCmyk", c, m, y, k, a]);
	};

	public function FromCmykF(c:Float, m:Float, y:Float, k:Float, a:Float):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromCmykF", c, m, y, k, a]);
	};

	public function FromHsl(h:Int, s:Int, l:Int, a:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromHsl", h, s, l, a]);
	};

	public function FromHslF(h:Float, s:Float, l:Float, a:Float):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromHslF", h, s, l, a]);
	};

	public function FromHsv(h:Int, s:Int, v:Int, a:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromHsv", h, s, v, a]);
	};

	public function FromHsvF(h:Float, s:Float, v:Float, a:Float):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromHsvF", h, s, v, a]);
	};

	public function FromRgb(rgb:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromRgb", rgb]);
	};

	public function FromRgb2(r:Int, g:Int, b:Int, a:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromRgb2", r, g, b, a]);
	};

	public function FromRgbF(r:Float, g:Float, b:Float, a:Float):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromRgbF", r, g, b, a]);
	};

	public function FromRgba(rgba:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromRgba", rgba]);
	};

	public function FromRgba64(r:Int, g:Int, b:Int, a:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromRgba64", r, g, b, a]);
	};

	public function FromRgba642(rgba64:QRgba64_ITF):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromRgba642", rgba64]);
	};

	public function GetCmyk2(c:Int, m:Int, y:Int, k:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetCmyk2", c, m, y, k, a]);
	};

	public function GetCmykF2(c:Float, m:Float, y:Float, k:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetCmykF2", c, m, y, k, a]);
	};

	public function GetHsl(h:Int, s:Int, l:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetHsl", h, s, l, a]);
	};

	public function GetHslF(h:Float, s:Float, l:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetHslF", h, s, l, a]);
	};

	public function GetHsv(h:Int, s:Int, v:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetHsv", h, s, v, a]);
	};

	public function GetHsvF(h:Float, s:Float, v:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetHsvF", h, s, v, a]);
	};

	public function GetRgb(r:Int, g:Int, b:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetRgb", r, g, b, a]);
	};

	public function GetRgbF(r:Float, g:Float, b:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetRgbF", r, g, b, a]);
	};

	public function Green():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Green"]);
	};

	public function GreenF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GreenF"]);
	};

	public function HslHue():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HslHue"]);
	};

	public function HslHueF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HslHueF"]);
	};

	public function HslSaturation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HslSaturation"]);
	};

	public function HslSaturationF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HslSaturationF"]);
	};

	public function HsvHue():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HsvHue"]);
	};

	public function HsvHueF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HsvHueF"]);
	};

	public function HsvSaturation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HsvSaturation"]);
	};

	public function HsvSaturationF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HsvSaturationF"]);
	};

	public function Hue():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Hue"]);
	};

	public function HueF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HueF"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function IsValidColor(name:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValidColor", name]);
	};

	public function IsValidColor2(name:QStringView_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValidColor2", name]);
	};

	public function IsValidColor3(name:QLatin1String_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValidColor3", name]);
	};

	public function Lighter(factor:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Lighter", factor]);
	};

	public function Lightness():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Lightness"]);
	};

	public function LightnessF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LightnessF"]);
	};

	public function Magenta():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Magenta"]);
	};

	public function MagentaF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MagentaF"]);
	};

	public function Name():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name"]);
	};

	public function Name2(format:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name2", format]);
	};

	public function Red():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Red"]);
	};

	public function RedF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RedF"]);
	};

	public function Rgb():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rgb"]);
	};

	public function Rgba():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rgba"]);
	};

	public function Saturation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Saturation"]);
	};

	public function SaturationF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SaturationF"]);
	};

	public function SetAlpha(alpha:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlpha", alpha]);
	};

	public function SetAlphaF(alpha:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlphaF", alpha]);
	};

	public function SetBlue(blue:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBlue", blue]);
	};

	public function SetBlueF(blue:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBlueF", blue]);
	};

	public function SetCmyk(c:Int, m:Int, y:Int, k:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCmyk", c, m, y, k, a]);
	};

	public function SetCmykF(c:Float, m:Float, y:Float, k:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCmykF", c, m, y, k, a]);
	};

	public function SetGreen(green:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGreen", green]);
	};

	public function SetGreenF(green:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGreenF", green]);
	};

	public function SetHsl(h:Int, s:Int, l:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHsl", h, s, l, a]);
	};

	public function SetHslF(h:Float, s:Float, l:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHslF", h, s, l, a]);
	};

	public function SetHsv(h:Int, s:Int, v:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHsv", h, s, v, a]);
	};

	public function SetHsvF(h:Float, s:Float, v:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHsvF", h, s, v, a]);
	};

	public function SetNamedColor(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNamedColor", name]);
	};

	public function SetNamedColor2(name:QStringView_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNamedColor2", name]);
	};

	public function SetNamedColor3(name:QLatin1String_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNamedColor3", name]);
	};

	public function SetRed(red:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRed", red]);
	};

	public function SetRedF(red:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRedF", red]);
	};

	public function SetRgb(r:Int, g:Int, b:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRgb", r, g, b, a]);
	};

	public function SetRgb2(rgb:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRgb2", rgb]);
	};

	public function SetRgbF(r:Float, g:Float, b:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRgbF", r, g, b, a]);
	};

	public function SetRgba(rgba:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRgba", rgba]);
	};

	public function SetRgba64(rgba:QRgba64_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRgba64", rgba]);
	};

	public function Spec():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Spec"]);
	};

	public function ToCmyk():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToCmyk"]);
	};

	public function ToHsl():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToHsl"]);
	};

	public function ToHsv():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToHsv"]);
	};

	public function ToRgb():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToRgb"]);
	};

	public function Value():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Value"]);
	};

	public function ValueF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ValueF"]);
	};

	public function Yellow():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Yellow"]);
	};

	public function YellowF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "YellowF"]);
	};

	public function ToVariant():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVariant"]);
	};
}

function NewQColorFromPointer(ptr:String):QColor {
	final r = new QColor();
	r.initFrom(ptr, "gui.QColor");
	return r;
}

function NewQColor():QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor", ""]);
}

function NewQColor2(color:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor2", "", color]);
}

function NewQColor3(r:Int, g:Int, b:Int, a:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor3", "", r, g, b, a]);
}

function NewQColor4(color:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor4", "", color]);
}

function NewQColor5(rgba64:QRgba64_ITF):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor5", "", rgba64]);
}

function NewQColor6(name:String):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor6", "", name]);
}

function NewQColor8(name:String):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor8", "", name]);
}

function NewQColor9(name:QLatin1String_ITF):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQColor9", "", name]);
}

function QColor_ColorNames():Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_ColorNames", ""]);
}

function QColor_FromCmyk(c:Int, m:Int, y:Int, k:Int, a:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromCmyk", "", c, m, y, k, a]);
}

function QColor_FromCmykF(c:Float, m:Float, y:Float, k:Float, a:Float):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromCmykF", "", c, m, y, k, a]);
}

function QColor_FromHsl(h:Int, s:Int, l:Int, a:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromHsl", "", h, s, l, a]);
}

function QColor_FromHslF(h:Float, s:Float, l:Float, a:Float):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromHslF", "", h, s, l, a]);
}

function QColor_FromHsv(h:Int, s:Int, v:Int, a:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromHsv", "", h, s, v, a]);
}

function QColor_FromHsvF(h:Float, s:Float, v:Float, a:Float):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromHsvF", "", h, s, v, a]);
}

function QColor_FromRgb(rgb:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromRgb", "", rgb]);
}

function QColor_FromRgb2(r:Int, g:Int, b:Int, a:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromRgb2", "", r, g, b, a]);
}

function QColor_FromRgbF(r:Float, g:Float, b:Float, a:Float):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromRgbF", "", r, g, b, a]);
}

function QColor_FromRgba(rgba:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromRgba", "", rgba]);
}

function QColor_FromRgba64(r:Int, g:Int, b:Int, a:Int):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromRgba64", "", r, g, b, a]);
}

function QColor_FromRgba642(rgba64:QRgba64_ITF):QColor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_FromRgba642", "", rgba64]);
}

function QColor_IsValidColor(name:String):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_IsValidColor", "", name]);
}

function QColor_IsValidColor2(name:QStringView_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_IsValidColor2", "", name]);
}

function QColor_IsValidColor3(name:QLatin1String_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QColor_IsValidColor3", "", name]);
}

interface QColorDialogOptions_ITF {
	public function QColorDialogOptions_PTR():QColorDialogOptions;
}

class QColorDialogOptions extends Internal implements QColorDialogOptions_ITF {
	public function new() {
		super();
	}

	public function QColorDialogOptions_PTR():QColorDialogOptions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QColorDialogOptions_PTR"]);
	};

	public function DestroyQColorDialogOptions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQColorDialogOptions"]);
	};
}

function NewQColorDialogOptionsFromPointer(ptr:String):QColorDialogOptions {
	final r = new QColorDialogOptions();
	r.initFrom(ptr, "gui.QColorDialogOptions");
	return r;
}

interface QConicalGradient_ITF extends QGradient_ITF {
	public function QConicalGradient_PTR():QConicalGradient;
}

class QConicalGradient extends QGradient implements QConicalGradient_ITF {
	public function new() {
		super();
	}

	public function QConicalGradient_PTR():QConicalGradient {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QConicalGradient_PTR"]);
	};

	public function DestroyQConicalGradient() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQConicalGradient"]);
	};

	public function Angle():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Angle"]);
	};

	public function Center():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Center"]);
	};

	public function SetAngle(angle:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAngle", angle]);
	};

	public function SetCenter(center:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCenter", center]);
	};

	public function SetCenter2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCenter2", x, y]);
	};
}

function NewQConicalGradientFromPointer(ptr:String):QConicalGradient {
	final r = new QConicalGradient();
	r.initFrom(ptr, "gui.QConicalGradient");
	return r;
}

function NewQConicalGradient():QConicalGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQConicalGradient", ""]);
}

function NewQConicalGradient2(center:QPointF_ITF, angle:Float):QConicalGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQConicalGradient2", "", center, angle]);
}

function NewQConicalGradient3(cx:Float, cy:Float, angle:Float):QConicalGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQConicalGradient3", "", cx, cy, angle]);
}

interface QContextMenuEvent_ITF extends QInputEvent_ITF {
	public function QContextMenuEvent_PTR():QContextMenuEvent;
}

class QContextMenuEvent extends QInputEvent implements QContextMenuEvent_ITF {
	public function new() {
		super();
	}

	public function QContextMenuEvent_PTR():QContextMenuEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QContextMenuEvent_PTR"]);
	};

	public function DestroyQContextMenuEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQContextMenuEvent"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function GlobalX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalX"]);
	};

	public function GlobalY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalY"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function Reason():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Reason"]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQContextMenuEventFromPointer(ptr:String):QContextMenuEvent {
	final r = new QContextMenuEvent();
	r.initFrom(ptr, "gui.QContextMenuEvent");
	return r;
}

function NewQContextMenuEvent(reason:Int, pos:QPoint_ITF, globalPos:QPoint_ITF, modifiers:Int):QContextMenuEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQContextMenuEvent", "", reason, pos, globalPos, modifiers]);
}

function NewQContextMenuEvent2(reason:Int, pos:QPoint_ITF, globalPos:QPoint_ITF):QContextMenuEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQContextMenuEvent2", "", reason, pos, globalPos]);
}

function NewQContextMenuEvent3(reason:Int, pos:QPoint_ITF):QContextMenuEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQContextMenuEvent3", "", reason, pos]);
}

interface QCursor_ITF {
	public function QCursor_PTR():QCursor;
}

class QCursor extends Internal implements QCursor_ITF {
	public function new() {
		super();
	}

	public function QCursor_PTR():QCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QCursor_PTR"]);
	};

	public function Bitmap():QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bitmap"]);
	};

	public function HotSpot():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HotSpot"]);
	};

	public function Mask():QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mask"]);
	};

	public function Pixmap():QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function Pos2(screen:QScreen_ITF):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos2", screen]);
	};

	public function SetPos(x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPos", x, y]);
	};

	public function SetPos2(screen:QScreen_ITF, x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPos2", screen, x, y]);
	};

	public function SetPos3(p:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPos3", p]);
	};

	public function SetPos4(screen:QScreen_ITF, p:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPos4", screen, p]);
	};

	public function SetShape(shape:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetShape", shape]);
	};

	public function Shape():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Shape"]);
	};

	public function Swap(other:QCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function DestroyQCursor() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQCursor"]);
	};
}

function NewQCursorFromPointer(ptr:String):QCursor {
	final r = new QCursor();
	r.initFrom(ptr, "gui.QCursor");
	return r;
}

function NewQCursor():QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCursor", ""]);
}

function NewQCursor2(shape:Int):QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCursor2", "", shape]);
}

function NewQCursor3(bitmap:QBitmap_ITF, mask:QBitmap_ITF, hotX:Int, hotY:Int):QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCursor3", "", bitmap, mask, hotX, hotY]);
}

function NewQCursor4(pixmap:QPixmap_ITF, hotX:Int, hotY:Int):QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCursor4", "", pixmap, hotX, hotY]);
}

function NewQCursor5(c:QCursor_ITF):QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCursor5", "", c]);
}

function NewQCursor6(other:QCursor_ITF):QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQCursor6", "", other]);
}

function QCursor_Pos():QPoint {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QCursor_Pos", ""]);
}

function QCursor_Pos2(screen:QScreen_ITF):QPoint {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QCursor_Pos2", "", screen]);
}

function QCursor_SetPos(x:Int, y:Int) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QCursor_SetPos", "", x, y]);
}

function QCursor_SetPos2(screen:QScreen_ITF, x:Int, y:Int) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QCursor_SetPos2", "", screen, x, y]);
}

function QCursor_SetPos3(p:QPoint_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QCursor_SetPos3", "", p]);
}

function QCursor_SetPos4(screen:QScreen_ITF, p:QPoint_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QCursor_SetPos4", "", screen, p]);
}

interface QDesktopServices_ITF {
	public function QDesktopServices_PTR():QDesktopServices;
}

class QDesktopServices extends Internal implements QDesktopServices_ITF {
	public function new() {
		super();
	}

	public function QDesktopServices_PTR():QDesktopServices {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDesktopServices_PTR"]);
	};

	public function DestroyQDesktopServices() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDesktopServices"]);
	};

	public function OpenUrl(url:QUrl_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OpenUrl", url]);
	};

	public function SetUrlHandler(scheme:String, receiver:QObject_ITF, method:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUrlHandler", scheme, receiver, method]);
	};

	public function UnsetUrlHandler(scheme:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UnsetUrlHandler", scheme]);
	};
}

function NewQDesktopServicesFromPointer(ptr:String):QDesktopServices {
	final r = new QDesktopServices();
	r.initFrom(ptr, "gui.QDesktopServices");
	return r;
}

function QDesktopServices_OpenUrl(url:QUrl_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QDesktopServices_OpenUrl", "", url]);
}

function QDesktopServices_SetUrlHandler(scheme:String, receiver:QObject_ITF, method:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QDesktopServices_SetUrlHandler", "", scheme, receiver, method]);
}

function QDesktopServices_UnsetUrlHandler(scheme:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QDesktopServices_UnsetUrlHandler", "", scheme]);
}

interface QDoubleValidator_ITF extends QValidator_ITF {
	public function QDoubleValidator_PTR():QDoubleValidator;
}

class QDoubleValidator extends QValidator implements QDoubleValidator_ITF {
	public function new() {
		super();
	}

	public function QDoubleValidator_PTR():QDoubleValidator {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDoubleValidator_PTR"]);
	};

	public function Bottom():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bottom"]);
	};

	public function ConnectBottomChanged(f:(bottom:Float) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBottomChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBottomChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBottomChanged"]);
	};

	public function BottomChanged(bottom:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BottomChanged", bottom]);
	};

	public function Decimals():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Decimals"]);
	};

	public function ConnectDecimalsChanged(f:(decimals:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDecimalsChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDecimalsChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDecimalsChanged"]);
	};

	public function DecimalsChanged(decimals:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DecimalsChanged", decimals]);
	};

	public function Notation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Notation"]);
	};

	public function ConnectNotationChanged(f:(notation:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectNotationChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectNotationChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectNotationChanged"]);
	};

	public function NotationChanged(notation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "NotationChanged", notation]);
	};

	public function SetBottom(vdo:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBottom", vdo]);
	};

	public function SetDecimals(vi:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDecimals", vi]);
	};

	public function SetNotation(vqd:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNotation", vqd]);
	};

	public function ConnectSetRange(f:(minimum:Float, maximum:Float, decimals:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetRange", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetRange() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetRange"]);
	};

	public function SetRange(minimum:Float, maximum:Float, decimals:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRange", minimum, maximum, decimals]);
	};

	public function SetRangeDefault(minimum:Float, maximum:Float, decimals:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRangeDefault", minimum, maximum, decimals]);
	};

	public function SetTop(vdo:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTop", vdo]);
	};

	public function Top():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Top"]);
	};

	public function ConnectTopChanged(f:(top:Float) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTopChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTopChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTopChanged"]);
	};

	public function TopChanged(top:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TopChanged", top]);
	};

	public override function ConnectValidate(f:(input:String, pos:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectValidate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectValidate"]);
	};

	public override function Validate(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Validate", input, pos]);
	};

	public function ValidateDefault(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ValidateDefault", input, pos]);
	};

	public function ConnectDestroyQDoubleValidator(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQDoubleValidator",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQDoubleValidator() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQDoubleValidator"]);
	};

	public function DestroyQDoubleValidator() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDoubleValidator"]);
	};

	public function DestroyQDoubleValidatorDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDoubleValidatorDefault"]);
	};
}

function NewQDoubleValidatorFromPointer(ptr:String):QDoubleValidator {
	final r = new QDoubleValidator();
	r.initFrom(ptr, "gui.QDoubleValidator");
	return r;
}

function NewQDoubleValidator(parent:QObject_ITF):QDoubleValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDoubleValidator", "", parent]);
}

function NewQDoubleValidator2(bottom:Float, top:Float, decimals:Int, parent:QObject_ITF):QDoubleValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDoubleValidator2", "", bottom, top, decimals, parent]);
}

interface QDrag_ITF extends QObject_ITF {
	public function QDrag_PTR():QDrag;
}

class QDrag extends QObject implements QDrag_ITF {
	public function new() {
		super();
	}

	public function QDrag_PTR():QDrag {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDrag_PTR"]);
	};

	public function ConnectActionChanged(f:(action:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectActionChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectActionChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectActionChanged"]);
	};

	public function ActionChanged(action:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ActionChanged", action]);
	};

	public function Cancel() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Cancel"]);
	};

	public function DefaultAction():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultAction"]);
	};

	public function DragCursor(action:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DragCursor", action]);
	};

	public function Exec(supportedActions:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Exec", supportedActions]);
	};

	public function Exec2(supportedActions:Int, defaultDropAction:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Exec2", supportedActions, defaultDropAction]);
	};

	public function HotSpot():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HotSpot"]);
	};

	public function MimeData():QMimeData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MimeData"]);
	};

	public function Pixmap():QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap"]);
	};

	public function SetDragCursor(cursor:QPixmap_ITF, action:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDragCursor", cursor, action]);
	};

	public function SetHotSpot(hotspot:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHotSpot", hotspot]);
	};

	public function SetMimeData(data:QMimeData_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMimeData", data]);
	};

	public function SetPixmap(pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixmap", pixmap]);
	};

	public function Source():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Source"]);
	};

	public function SupportedActions():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedActions"]);
	};

	public function Target():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Target"]);
	};

	public function ConnectTargetChanged(f:(newTarget:QObject) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTargetChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTargetChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTargetChanged"]);
	};

	public function TargetChanged(newTarget:QObject_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TargetChanged", newTarget]);
	};

	public function ConnectDestroyQDrag(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQDrag", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQDrag() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQDrag"]);
	};

	public function DestroyQDrag() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDrag"]);
	};

	public function DestroyQDragDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDragDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQDragFromPointer(ptr:String):QDrag {
	final r = new QDrag();
	r.initFrom(ptr, "gui.QDrag");
	return r;
}

function NewQDrag(dragSource:QObject_ITF):QDrag {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDrag", "", dragSource]);
}

function QDrag_Cancel() {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QDrag_Cancel", ""]);
}

interface QDragEnterEvent_ITF extends QDragMoveEvent_ITF {
	public function QDragEnterEvent_PTR():QDragEnterEvent;
}

class QDragEnterEvent extends QDragMoveEvent implements QDragEnterEvent_ITF {
	public function new() {
		super();
	}

	public function QDragEnterEvent_PTR():QDragEnterEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDragEnterEvent_PTR"]);
	};

	public function DestroyQDragEnterEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDragEnterEvent"]);
	};
}

function NewQDragEnterEventFromPointer(ptr:String):QDragEnterEvent {
	final r = new QDragEnterEvent();
	r.initFrom(ptr, "gui.QDragEnterEvent");
	return r;
}

function NewQDragEnterEvent(point:QPoint_ITF, actions:Int, data:QMimeData_ITF, buttons:Int, modifiers:Int):QDragEnterEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDragEnterEvent", "", point, actions, data, buttons, modifiers]);
}

interface QDragLeaveEvent_ITF extends QEvent_ITF {
	public function QDragLeaveEvent_PTR():QDragLeaveEvent;
}

class QDragLeaveEvent extends QEvent implements QDragLeaveEvent_ITF {
	public function new() {
		super();
	}

	public function QDragLeaveEvent_PTR():QDragLeaveEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDragLeaveEvent_PTR"]);
	};

	public function DestroyQDragLeaveEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDragLeaveEvent"]);
	};
}

function NewQDragLeaveEventFromPointer(ptr:String):QDragLeaveEvent {
	final r = new QDragLeaveEvent();
	r.initFrom(ptr, "gui.QDragLeaveEvent");
	return r;
}

function NewQDragLeaveEvent():QDragLeaveEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDragLeaveEvent", ""]);
}

interface QDragMoveEvent_ITF extends QDropEvent_ITF {
	public function QDragMoveEvent_PTR():QDragMoveEvent;
}

class QDragMoveEvent extends QDropEvent implements QDragMoveEvent_ITF {
	public function new() {
		super();
	}

	public function QDragMoveEvent_PTR():QDragMoveEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDragMoveEvent_PTR"]);
	};

	public function Accept_QDropEvent(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Accept", rectangle]);
	};

	public function AnswerRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AnswerRect"]);
	};

	public function Ignore_QDropEvent(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Ignore", rectangle]);
	};

	public function ConnectDestroyQDragMoveEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQDragMoveEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQDragMoveEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQDragMoveEvent"]);
	};

	public function DestroyQDragMoveEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDragMoveEvent"]);
	};

	public function DestroyQDragMoveEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDragMoveEventDefault"]);
	};
}

function NewQDragMoveEventFromPointer(ptr:String):QDragMoveEvent {
	final r = new QDragMoveEvent();
	r.initFrom(ptr, "gui.QDragMoveEvent");
	return r;
}

function NewQDragMoveEvent(pos:QPoint_ITF, actions:Int, data:QMimeData_ITF, buttons:Int, modifiers:Int, ty:Int):QDragMoveEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDragMoveEvent", "", pos, actions, data, buttons, modifiers, ty]);
}

interface QDropEvent_ITF extends QEvent_ITF {
	public function QDropEvent_PTR():QDropEvent;
}

class QDropEvent extends QEvent implements QDropEvent_ITF {
	public function new() {
		super();
	}

	public function QDropEvent_PTR():QDropEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QDropEvent_PTR"]);
	};

	public function DestroyQDropEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQDropEvent"]);
	};

	public function AcceptProposedAction() {
		Internal.callLocalFunction(["", Pointer(), ___className, "AcceptProposedAction"]);
	};

	public function DropAction():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DropAction"]);
	};

	public function KeyboardModifiers():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyboardModifiers"]);
	};

	public function MimeData():QMimeData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MimeData"]);
	};

	public function MouseButtons():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MouseButtons"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function PosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PosF"]);
	};

	public function PossibleActions():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PossibleActions"]);
	};

	public function ProposedAction():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ProposedAction"]);
	};

	public function SetDropAction(action:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDropAction", action]);
	};

	public function Source():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Source"]);
	};
}

function NewQDropEventFromPointer(ptr:String):QDropEvent {
	final r = new QDropEvent();
	r.initFrom(ptr, "gui.QDropEvent");
	return r;
}

function NewQDropEvent(pos:QPointF_ITF, actions:Int, data:QMimeData_ITF, buttons:Int, modifiers:Int, ty:Int):QDropEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQDropEvent", "", pos, actions, data, buttons, modifiers, ty]);
}

interface QEnterEvent_ITF extends QEvent_ITF {
	public function QEnterEvent_PTR():QEnterEvent;
}

class QEnterEvent extends QEvent implements QEnterEvent_ITF {
	public function new() {
		super();
	}

	public function QEnterEvent_PTR():QEnterEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QEnterEvent_PTR"]);
	};

	public function DestroyQEnterEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQEnterEvent"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function GlobalX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalX"]);
	};

	public function GlobalY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalY"]);
	};

	public function LocalPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalPos"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function ScreenPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScreenPos"]);
	};

	public function WindowPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowPos"]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQEnterEventFromPointer(ptr:String):QEnterEvent {
	final r = new QEnterEvent();
	r.initFrom(ptr, "gui.QEnterEvent");
	return r;
}

function NewQEnterEvent(localPos:QPointF_ITF, windowPos:QPointF_ITF, screenPos:QPointF_ITF):QEnterEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQEnterEvent", "", localPos, windowPos, screenPos]);
}

interface QExposeEvent_ITF extends QEvent_ITF {
	public function QExposeEvent_PTR():QExposeEvent;
}

class QExposeEvent extends QEvent implements QExposeEvent_ITF {
	public function new() {
		super();
	}

	public function QExposeEvent_PTR():QExposeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QExposeEvent_PTR"]);
	};

	public function DestroyQExposeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQExposeEvent"]);
	};

	public function Region():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Region"]);
	};
}

function NewQExposeEventFromPointer(ptr:String):QExposeEvent {
	final r = new QExposeEvent();
	r.initFrom(ptr, "gui.QExposeEvent");
	return r;
}

function NewQExposeEvent(exposeRegion:QRegion_ITF):QExposeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQExposeEvent", "", exposeRegion]);
}

interface QFileDialogOptions_ITF {
	public function QFileDialogOptions_PTR():QFileDialogOptions;
}

class QFileDialogOptions extends Internal implements QFileDialogOptions_ITF {
	public function new() {
		super();
	}

	public function QFileDialogOptions_PTR():QFileDialogOptions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFileDialogOptions_PTR"]);
	};

	public function DestroyQFileDialogOptions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFileDialogOptions"]);
	};
}

interface QFileOpenEvent_ITF extends QEvent_ITF {
	public function QFileOpenEvent_PTR():QFileOpenEvent;
}

class QFileOpenEvent extends QEvent implements QFileOpenEvent_ITF {
	public function new() {
		super();
	}

	public function QFileOpenEvent_PTR():QFileOpenEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFileOpenEvent_PTR"]);
	};

	public function DestroyQFileOpenEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFileOpenEvent"]);
	};

	public function File():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "File"]);
	};

	public function OpenFile(file:QFile_ITF, flags:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OpenFile", file, flags]);
	};

	public function Url():QUrl {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Url"]);
	};
}

function NewQFileOpenEventFromPointer(ptr:String):QFileOpenEvent {
	final r = new QFileOpenEvent();
	r.initFrom(ptr, "gui.QFileOpenEvent");
	return r;
}

interface QFocusEvent_ITF extends QEvent_ITF {
	public function QFocusEvent_PTR():QFocusEvent;
}

class QFocusEvent extends QEvent implements QFocusEvent_ITF {
	public function new() {
		super();
	}

	public function QFocusEvent_PTR():QFocusEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFocusEvent_PTR"]);
	};

	public function DestroyQFocusEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFocusEvent"]);
	};

	public function GotFocus():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GotFocus"]);
	};

	public function LostFocus():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LostFocus"]);
	};

	public function Reason():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Reason"]);
	};
}

function NewQFocusEventFromPointer(ptr:String):QFocusEvent {
	final r = new QFocusEvent();
	r.initFrom(ptr, "gui.QFocusEvent");
	return r;
}

function NewQFocusEvent(ty:Int, reason:Int):QFocusEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFocusEvent", "", ty, reason]);
}

interface QFont_ITF {
	public function QFont_PTR():QFont;
}

class QFont extends Internal implements QFont_ITF {
	public function new() {
		super();
	}

	public function QFont_PTR():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFont_PTR"]);
	};

	public function Bold():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bold"]);
	};

	public function Capitalization():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Capitalization"]);
	};

	public function DefaultFamily():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultFamily"]);
	};

	public function ExactMatch():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ExactMatch"]);
	};

	public function Families():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Families"]);
	};

	public function Family():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Family"]);
	};

	public function FixedPitch():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FixedPitch"]);
	};

	public function FromString(descrip:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromString", descrip]);
	};

	public function HintingPreference():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HintingPreference"]);
	};

	public function InsertSubstitution(familyName:String, substituteName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertSubstitution", familyName, substituteName]);
	};

	public function InsertSubstitutions(familyName:String, substituteNames:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertSubstitutions", familyName, substituteNames]);
	};

	public function IsCopyOf(ff:QFont_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCopyOf", ff]);
	};

	public function Italic():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Italic"]);
	};

	public function Kerning():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Kerning"]);
	};

	public function Key():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Key"]);
	};

	public function LetterSpacing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LetterSpacing"]);
	};

	public function LetterSpacingType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LetterSpacingType"]);
	};

	public function Overline():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Overline"]);
	};

	public function PixelSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelSize"]);
	};

	public function PointSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointSize"]);
	};

	public function PointSizeF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointSizeF"]);
	};

	public function RemoveSubstitutions(familyName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveSubstitutions", familyName]);
	};

	public function Resolve(other:QFont_ITF):QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Resolve", other]);
	};

	public function SetBold(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBold", enable]);
	};

	public function SetCapitalization(caps:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCapitalization", caps]);
	};

	public function SetFamilies(families:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFamilies", families]);
	};

	public function SetFamily(family:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFamily", family]);
	};

	public function SetFixedPitch(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFixedPitch", enable]);
	};

	public function SetHintingPreference(hintingPreference:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHintingPreference", hintingPreference]);
	};

	public function SetItalic(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetItalic", enable]);
	};

	public function SetKerning(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetKerning", enable]);
	};

	public function SetLetterSpacing(ty:Int, spacing:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLetterSpacing", ty, spacing]);
	};

	public function SetOverline(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOverline", enable]);
	};

	public function SetPixelSize(pixelSize:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixelSize", pixelSize]);
	};

	public function SetPointSize(pointSize:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPointSize", pointSize]);
	};

	public function SetPointSizeF(pointSize:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPointSizeF", pointSize]);
	};

	public function SetStretch(factor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStretch", factor]);
	};

	public function SetStrikeOut(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStrikeOut", enable]);
	};

	public function SetStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyle", style]);
	};

	public function SetStyleHint(hint:Int, strategy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyleHint", hint, strategy]);
	};

	public function SetStyleName(styleName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyleName", styleName]);
	};

	public function SetStyleStrategy(s:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyleStrategy", s]);
	};

	public function SetUnderline(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUnderline", enable]);
	};

	public function SetWeight(weight:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWeight", weight]);
	};

	public function SetWordSpacing(spacing:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWordSpacing", spacing]);
	};

	public function Stretch():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Stretch"]);
	};

	public function StrikeOut():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StrikeOut"]);
	};

	public function Style():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Style"]);
	};

	public function StyleHint():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleHint"]);
	};

	public function StyleName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleName"]);
	};

	public function StyleStrategy():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleStrategy"]);
	};

	public function Substitute(familyName:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Substitute", familyName]);
	};

	public function Substitutes(familyName:String):Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Substitutes", familyName]);
	};

	public function Substitutions():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Substitutions"]);
	};

	public function Swap(other:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ToString():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToString"]);
	};

	public function Underline():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Underline"]);
	};

	public function Weight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Weight"]);
	};

	public function WordSpacing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WordSpacing"]);
	};

	public function DestroyQFont() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFont"]);
	};

	public function ToVariant():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVariant"]);
	};
}

function NewQFontFromPointer(ptr:String):QFont {
	final r = new QFont();
	r.initFrom(ptr, "gui.QFont");
	return r;
}

function NewQFont():QFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFont", ""]);
}

function NewQFont2(family:String, pointSize:Int, weight:Int, italic:Bool):QFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFont2", "", family, pointSize, weight, italic]);
}

function NewQFont4(font:QFont_ITF, pd:QPaintDevice_ITF):QFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFont4", "", font, pd]);
}

function NewQFont5(font:QFont_ITF):QFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFont5", "", font]);
}

function QFont_InsertSubstitution(familyName:String, substituteName:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QFont_InsertSubstitution", "", familyName, substituteName]);
}

function QFont_InsertSubstitutions(familyName:String, substituteNames:Array<String>) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QFont_InsertSubstitutions", "", familyName, substituteNames]);
}

function QFont_RemoveSubstitutions(familyName:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QFont_RemoveSubstitutions", "", familyName]);
}

function QFont_Substitute(familyName:String):String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFont_Substitute", "", familyName]);
}

function QFont_Substitutes(familyName:String):Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFont_Substitutes", "", familyName]);
}

function QFont_Substitutions():Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFont_Substitutions", ""]);
}

interface QFontDatabase_ITF {
	public function QFontDatabase_PTR():QFontDatabase;
}

class QFontDatabase extends Internal implements QFontDatabase_ITF {
	public function new() {
		super();
	}

	public function QFontDatabase_PTR():QFontDatabase {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFontDatabase_PTR"]);
	};

	public function DestroyQFontDatabase() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFontDatabase"]);
	};

	public function AddApplicationFont(fileName:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddApplicationFont", fileName]);
	};

	public function AddApplicationFontFromData(fontData:QByteArray_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddApplicationFontFromData", fontData]);
	};

	public function ApplicationFontFamilies(id:Int):Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ApplicationFontFamilies", id]);
	};

	public function Bold(family:String, style:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bold", family, style]);
	};

	public function Families(writingSystem:Int):Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Families", writingSystem]);
	};

	public function Font(family:String, style:String, pointSize:Int):QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font", family, style, pointSize]);
	};

	public function IsBitmapScalable(family:String, style:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsBitmapScalable", family, style]);
	};

	public function IsFixedPitch(family:String, style:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsFixedPitch", family, style]);
	};

	public function IsPrivateFamily(family:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsPrivateFamily", family]);
	};

	public function IsScalable(family:String, style:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsScalable", family, style]);
	};

	public function IsSmoothlyScalable(family:String, style:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSmoothlyScalable", family, style]);
	};

	public function Italic(family:String, style:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Italic", family, style]);
	};

	public function PointSizes(family:String, styleName:String):Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointSizes", family, styleName]);
	};

	public function RemoveAllApplicationFonts():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RemoveAllApplicationFonts"]);
	};

	public function RemoveApplicationFont(id:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RemoveApplicationFont", id]);
	};

	public function SmoothSizes(family:String, styleName:String):Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SmoothSizes", family, styleName]);
	};

	public function StandardSizes():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StandardSizes"]);
	};

	public function StyleString(font:QFont_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleString", font]);
	};

	public function StyleString2(fontInfo:QFontInfo_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleString2", fontInfo]);
	};

	public function Styles(family:String):Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Styles", family]);
	};

	public function SystemFont(ty:Int):QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SystemFont", ty]);
	};

	public function Weight(family:String, style:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Weight", family, style]);
	};
}

function NewQFontDatabaseFromPointer(ptr:String):QFontDatabase {
	final r = new QFontDatabase();
	r.initFrom(ptr, "gui.QFontDatabase");
	return r;
}

function NewQFontDatabase():QFontDatabase {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontDatabase", ""]);
}

function QFontDatabase_AddApplicationFont(fileName:String):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_AddApplicationFont", "", fileName]);
}

function QFontDatabase_AddApplicationFontFromData(fontData:QByteArray_ITF):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_AddApplicationFontFromData", "", fontData]);
}

function QFontDatabase_ApplicationFontFamilies(id:Int):Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_ApplicationFontFamilies", "", id]);
}

function QFontDatabase_RemoveAllApplicationFonts():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_RemoveAllApplicationFonts", ""]);
}

function QFontDatabase_RemoveApplicationFont(id:Int):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_RemoveApplicationFont", "", id]);
}

function QFontDatabase_StandardSizes():Array<Int> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_StandardSizes", ""]);
}

function QFontDatabase_SystemFont(ty:Int):QFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QFontDatabase_SystemFont", "", ty]);
}

interface QFontDialogOptions_ITF {
	public function QFontDialogOptions_PTR():QFontDialogOptions;
}

class QFontDialogOptions extends Internal implements QFontDialogOptions_ITF {
	public function new() {
		super();
	}

	public function QFontDialogOptions_PTR():QFontDialogOptions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFontDialogOptions_PTR"]);
	};

	public function DestroyQFontDialogOptions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFontDialogOptions"]);
	};
}

function NewQFontDialogOptionsFromPointer(ptr:String):QFontDialogOptions {
	final r = new QFontDialogOptions();
	r.initFrom(ptr, "gui.QFontDialogOptions");
	return r;
}

interface QFontInfo_ITF {
	public function QFontInfo_PTR():QFontInfo;
}

class QFontInfo extends Internal implements QFontInfo_ITF {
	public function new() {
		super();
	}

	public function QFontInfo_PTR():QFontInfo {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFontInfo_PTR"]);
	};

	public function Bold():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bold"]);
	};

	public function ExactMatch():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ExactMatch"]);
	};

	public function Family():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Family"]);
	};

	public function FixedPitch():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FixedPitch"]);
	};

	public function Italic():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Italic"]);
	};

	public function PixelSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelSize"]);
	};

	public function PointSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointSize"]);
	};

	public function PointSizeF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointSizeF"]);
	};

	public function Style():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Style"]);
	};

	public function StyleHint():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleHint"]);
	};

	public function StyleName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleName"]);
	};

	public function Swap(other:QFontInfo_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Weight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Weight"]);
	};

	public function DestroyQFontInfo() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFontInfo"]);
	};
}

function NewQFontInfoFromPointer(ptr:String):QFontInfo {
	final r = new QFontInfo();
	r.initFrom(ptr, "gui.QFontInfo");
	return r;
}

function NewQFontInfo(font:QFont_ITF):QFontInfo {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontInfo", "", font]);
}

function NewQFontInfo2(fi:QFontInfo_ITF):QFontInfo {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontInfo2", "", fi]);
}

interface QFontMetrics_ITF {
	public function QFontMetrics_PTR():QFontMetrics;
}

class QFontMetrics extends Internal implements QFontMetrics_ITF {
	public function new() {
		super();
	}

	public function QFontMetrics_PTR():QFontMetrics {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFontMetrics_PTR"]);
	};

	public function Ascent():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Ascent"]);
	};

	public function AverageCharWidth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AverageCharWidth"]);
	};

	public function BoundingRect(ch:QChar_ITF):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect", ch]);
	};

	public function BoundingRect2(text:String):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect2", text]);
	};

	public function BoundingRect3(rect:QRect_ITF, flags:Int, text:String, tabStops:Int, tabArray:Int):QRect {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"BoundingRect3",
			rect,
			flags,
			text,
			tabStops,
			tabArray
		]);
	};

	public function BoundingRect4(x:Int, y:Int, width:Int, height:Int, flags:Int, text:String, tabStops:Int, tabArray:Int):QRect {
		return Internal.callLocalFunction([
			"", Pointer(), ___className, "BoundingRect4", x, y, width, height, flags, text, tabStops, tabArray
		]);
	};

	public function CapHeight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CapHeight"]);
	};

	public function Descent():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Descent"]);
	};

	public function ElidedText(text:String, mode:Int, width:Int, flags:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ElidedText", text, mode, width, flags]);
	};

	public function Height():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function HorizontalAdvance(text:String, l:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HorizontalAdvance", text, l]);
	};

	public function HorizontalAdvance2(ch:QChar_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HorizontalAdvance2", ch]);
	};

	public function InFont(ch:QChar_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InFont", ch]);
	};

	public function InFontUcs4(ucs4:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InFontUcs4", ucs4]);
	};

	public function Leading():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Leading"]);
	};

	public function LeftBearing(ch:QChar_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeftBearing", ch]);
	};

	public function LineSpacing():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineSpacing"]);
	};

	public function LineWidth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineWidth"]);
	};

	public function MaxWidth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaxWidth"]);
	};

	public function MinLeftBearing():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinLeftBearing"]);
	};

	public function MinRightBearing():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinRightBearing"]);
	};

	public function OverlinePos():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OverlinePos"]);
	};

	public function RightBearing(ch:QChar_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RightBearing", ch]);
	};

	public function Size(flags:Int, text:String, tabStops:Int, tabArray:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size", flags, text, tabStops, tabArray]);
	};

	public function StrikeOutPos():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StrikeOutPos"]);
	};

	public function Swap(other:QFontMetrics_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function TightBoundingRect(text:String):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TightBoundingRect", text]);
	};

	public function UnderlinePos():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnderlinePos"]);
	};

	public function XHeight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "XHeight"]);
	};

	public function DestroyQFontMetrics() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFontMetrics"]);
	};
}

function NewQFontMetricsFromPointer(ptr:String):QFontMetrics {
	final r = new QFontMetrics();
	r.initFrom(ptr, "gui.QFontMetrics");
	return r;
}

function NewQFontMetrics(font:QFont_ITF):QFontMetrics {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetrics", "", font]);
}

function NewQFontMetrics3(font:QFont_ITF, paintdevice:QPaintDevice_ITF):QFontMetrics {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetrics3", "", font, paintdevice]);
}

function NewQFontMetrics4(fm:QFontMetrics_ITF):QFontMetrics {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetrics4", "", fm]);
}

interface QFontMetricsF_ITF {
	public function QFontMetricsF_PTR():QFontMetricsF;
}

class QFontMetricsF extends Internal implements QFontMetricsF_ITF {
	public function new() {
		super();
	}

	public function QFontMetricsF_PTR():QFontMetricsF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QFontMetricsF_PTR"]);
	};

	public function Ascent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Ascent"]);
	};

	public function AverageCharWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AverageCharWidth"]);
	};

	public function BoundingRect(text:String):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect", text]);
	};

	public function BoundingRect2(ch:QChar_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect2", ch]);
	};

	public function BoundingRect3(rect:QRectF_ITF, flags:Int, text:String, tabStops:Int, tabArray:Int):QRectF {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"BoundingRect3",
			rect,
			flags,
			text,
			tabStops,
			tabArray
		]);
	};

	public function CapHeight():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CapHeight"]);
	};

	public function Descent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Descent"]);
	};

	public function ElidedText(text:String, mode:Int, width:Float, flags:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ElidedText", text, mode, width, flags]);
	};

	public function Height():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function HorizontalAdvance(text:String, length:Int):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HorizontalAdvance", text, length]);
	};

	public function HorizontalAdvance2(ch:QChar_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HorizontalAdvance2", ch]);
	};

	public function InFont(ch:QChar_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InFont", ch]);
	};

	public function InFontUcs4(ch:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InFontUcs4", ch]);
	};

	public function Leading():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Leading"]);
	};

	public function LeftBearing(ch:QChar_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeftBearing", ch]);
	};

	public function LineSpacing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineSpacing"]);
	};

	public function LineWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineWidth"]);
	};

	public function MaxWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaxWidth"]);
	};

	public function MinLeftBearing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinLeftBearing"]);
	};

	public function MinRightBearing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinRightBearing"]);
	};

	public function OverlinePos():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OverlinePos"]);
	};

	public function RightBearing(ch:QChar_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RightBearing", ch]);
	};

	public function Size(flags:Int, text:String, tabStops:Int, tabArray:Int):QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size", flags, text, tabStops, tabArray]);
	};

	public function StrikeOutPos():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StrikeOutPos"]);
	};

	public function Swap(other:QFontMetricsF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function TightBoundingRect(text:String):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TightBoundingRect", text]);
	};

	public function UnderlinePos():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnderlinePos"]);
	};

	public function XHeight():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "XHeight"]);
	};

	public function DestroyQFontMetricsF() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQFontMetricsF"]);
	};
}

function NewQFontMetricsFFromPointer(ptr:String):QFontMetricsF {
	final r = new QFontMetricsF();
	r.initFrom(ptr, "gui.QFontMetricsF");
	return r;
}

function NewQFontMetricsF(font:QFont_ITF):QFontMetricsF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetricsF", "", font]);
}

function NewQFontMetricsF3(font:QFont_ITF, paintdevice:QPaintDevice_ITF):QFontMetricsF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetricsF3", "", font, paintdevice]);
}

function NewQFontMetricsF4(fontMetrics:QFontMetrics_ITF):QFontMetricsF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetricsF4", "", fontMetrics]);
}

function NewQFontMetricsF5(fm:QFontMetricsF_ITF):QFontMetricsF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQFontMetricsF5", "", fm]);
}

interface QGenericMatrix_ITF {
	public function QGenericMatrix_PTR():QGenericMatrix;
}

class QGenericMatrix extends Internal implements QGenericMatrix_ITF {
	public function new() {
		super();
	}

	public function QGenericMatrix_PTR():QGenericMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QGenericMatrix_PTR"]);
	};

	public function DestroyQGenericMatrix() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGenericMatrix"]);
	};
}

interface QGenericPlugin_ITF extends QObject_ITF {
	public function QGenericPlugin_PTR():QGenericPlugin;
}

class QGenericPlugin extends QObject implements QGenericPlugin_ITF {
	public function new() {
		super();
	}

	public function QGenericPlugin_PTR():QGenericPlugin {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QGenericPlugin_PTR"]);
	};

	public function ConnectCreate(f:(key:String, specification:String) -> QObject) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCreate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCreate"]);
	};

	public function Create(key:String, specification:String):QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create", key, specification]);
	};

	public function ConnectDestroyQGenericPlugin(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQGenericPlugin",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQGenericPlugin() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQGenericPlugin"]);
	};

	public function DestroyQGenericPlugin() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGenericPlugin"]);
	};

	public function DestroyQGenericPluginDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGenericPluginDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQGenericPluginFromPointer(ptr:String):QGenericPlugin {
	final r = new QGenericPlugin();
	r.initFrom(ptr, "gui.QGenericPlugin");
	return r;
}

function NewQGenericPlugin(parent:QObject_ITF):QGenericPlugin {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQGenericPlugin", "", parent]);
}

interface QGenericPluginFactory_ITF {
	public function QGenericPluginFactory_PTR():QGenericPluginFactory;
}

class QGenericPluginFactory extends Internal implements QGenericPluginFactory_ITF {
	public function new() {
		super();
	}

	public function QGenericPluginFactory_PTR():QGenericPluginFactory {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QGenericPluginFactory_PTR"]);
	};

	public function DestroyQGenericPluginFactory() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGenericPluginFactory"]);
	};

	public function Create(key:String, specification:String):QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create", key, specification]);
	};

	public function Keys():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Keys"]);
	};
}

function NewQGenericPluginFactoryFromPointer(ptr:String):QGenericPluginFactory {
	final r = new QGenericPluginFactory();
	r.initFrom(ptr, "gui.QGenericPluginFactory");
	return r;
}

function QGenericPluginFactory_Create(key:String, specification:String):QObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGenericPluginFactory_Create", "", key, specification]);
}

function QGenericPluginFactory_Keys():Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGenericPluginFactory_Keys", ""]);
}

interface QGlyphRun_ITF {
	public function QGlyphRun_PTR():QGlyphRun;
}

class QGlyphRun extends Internal implements QGlyphRun_ITF {
	public function new() {
		super();
	}

	public function QGlyphRun_PTR():QGlyphRun {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QGlyphRun_PTR"]);
	};

	public function BoundingRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function Clear() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear"]);
	};

	public function Flags():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Flags"]);
	};

	public function GlyphIndexes():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlyphIndexes"]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function IsRightToLeft():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsRightToLeft"]);
	};

	public function Overline():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Overline"]);
	};

	public function Positions():Array<QPointF> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Positions"]);
	};

	public function RawFont():QRawFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RawFont"]);
	};

	public function SetBoundingRect(boundingRect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBoundingRect", boundingRect]);
	};

	public function SetFlag(flag:Int, enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFlag", flag, enabled]);
	};

	public function SetFlags(flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFlags", flags]);
	};

	public function SetGlyphIndexes(glyphIndexes:Array<Int>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGlyphIndexes", glyphIndexes]);
	};

	public function SetOverline(overline:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOverline", overline]);
	};

	public function SetPositions(positions:Array<QPointF>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPositions", positions]);
	};

	public function SetRawData(glyphIndexArray:Int, glyphPositionArray:QPointF_ITF, size:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetRawData",
			glyphIndexArray,
			glyphPositionArray,
			size
		]);
	};

	public function SetRawFont(rawFont:QRawFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRawFont", rawFont]);
	};

	public function SetRightToLeft(rightToLeft:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRightToLeft", rightToLeft]);
	};

	public function SetStrikeOut(strikeOut:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStrikeOut", strikeOut]);
	};

	public function SetUnderline(underline:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUnderline", underline]);
	};

	public function StrikeOut():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StrikeOut"]);
	};

	public function Swap(other:QGlyphRun_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Underline():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Underline"]);
	};

	public function DestroyQGlyphRun() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGlyphRun"]);
	};
}

function NewQGlyphRunFromPointer(ptr:String):QGlyphRun {
	final r = new QGlyphRun();
	r.initFrom(ptr, "gui.QGlyphRun");
	return r;
}

function NewQGlyphRun():QGlyphRun {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQGlyphRun", ""]);
}

function NewQGlyphRun2(other:QGlyphRun_ITF):QGlyphRun {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQGlyphRun2", "", other]);
}

interface QGradient_ITF {
	public function QGradient_PTR():QGradient;
}

class QGradient extends Internal implements QGradient_ITF {
	public function new() {
		super();
	}

	public function QGradient_PTR():QGradient {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QGradient_PTR"]);
	};

	public function DestroyQGradient() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGradient"]);
	};

	public function CoordinateMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CoordinateMode"]);
	};

	public function SetColorAt(position:Float, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColorAt", position, color]);
	};

	public function SetCoordinateMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCoordinateMode", mode]);
	};

	public function SetSpread(method:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSpread", method]);
	};

	public function Spread():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Spread"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};
}

function NewQGradientFromPointer(ptr:String):QGradient {
	final r = new QGradient();
	r.initFrom(ptr, "gui.QGradient");
	return r;
}

function NewQGradient2(preset:Int):QGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQGradient2", "", preset]);
}

interface QGuiApplication_ITF extends QCoreApplication_ITF {
	public function QGuiApplication_PTR():QGuiApplication;
}

class QGuiApplication extends QCoreApplication implements QGuiApplication_ITF {
	public function new() {
		super();
	}

	public function QGuiApplication_PTR():QGuiApplication {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QGuiApplication_PTR"]);
	};

	public function ApplicationDisplayName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ApplicationDisplayName"]);
	};

	public function ConnectApplicationDisplayNameChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectApplicationDisplayNameChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectApplicationDisplayNameChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectApplicationDisplayNameChanged"]);
	};

	public function ApplicationDisplayNameChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ApplicationDisplayNameChanged"]);
	};

	public function ApplicationState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ApplicationState"]);
	};

	public function ConnectApplicationStateChanged(f:(state:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectApplicationStateChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectApplicationStateChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectApplicationStateChanged"]);
	};

	public function ApplicationStateChanged(state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ApplicationStateChanged", state]);
	};

	public function ChangeOverrideCursor(cursor:QCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChangeOverrideCursor", cursor]);
	};

	public function Clipboard():QClipboard {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Clipboard"]);
	};

	public function ConnectCommitDataRequest(f:(manager:QSessionManager) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCommitDataRequest", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCommitDataRequest() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCommitDataRequest"]);
	};

	public function CommitDataRequest(manager:QSessionManager_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CommitDataRequest", manager]);
	};

	public function DesktopFileName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DesktopFileName"]);
	};

	public function DesktopSettingsAware():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DesktopSettingsAware"]);
	};

	public function DevicePixelRatio():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatio"]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function Exec():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Exec"]);
	};

	public function FocusObject():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocusObject"]);
	};

	public function ConnectFocusObjectChanged(f:(focusObject:QObject) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectFocusObjectChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectFocusObjectChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusObjectChanged"]);
	};

	public function FocusObjectChanged(focusObject:QObject_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusObjectChanged", focusObject]);
	};

	public function FocusWindow():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocusWindow"]);
	};

	public function ConnectFocusWindowChanged(f:(focusWindow:QWindow) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectFocusWindowChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectFocusWindowChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusWindowChanged"]);
	};

	public function FocusWindowChanged(focusWindow:QWindow_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusWindowChanged", focusWindow]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function ConnectFontChanged(f:(font:QFont) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFontChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFontChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFontChanged"]);
	};

	public function FontChanged(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FontChanged", font]);
	};

	public function ConnectFontDatabaseChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectFontDatabaseChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectFontDatabaseChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFontDatabaseChanged"]);
	};

	public function FontDatabaseChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "FontDatabaseChanged"]);
	};

	public function InputMethod():QInputMethod {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InputMethod"]);
	};

	public function IsFallbackSessionManagementEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsFallbackSessionManagementEnabled"]);
	};

	public function IsLeftToRight():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsLeftToRight"]);
	};

	public function IsRightToLeft():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsRightToLeft"]);
	};

	public function IsSavingSession():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSavingSession"]);
	};

	public function IsSessionRestored():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSessionRestored"]);
	};

	public function KeyboardModifiers():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyboardModifiers"]);
	};

	public function ConnectLastWindowClosed(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLastWindowClosed", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLastWindowClosed() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLastWindowClosed"]);
	};

	public function LastWindowClosed() {
		Internal.callLocalFunction(["", Pointer(), ___className, "LastWindowClosed"]);
	};

	public function LayoutDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LayoutDirection"]);
	};

	public function ConnectLayoutDirectionChanged(f:(direction:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectLayoutDirectionChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectLayoutDirectionChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLayoutDirectionChanged"]);
	};

	public function LayoutDirectionChanged(direction:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LayoutDirectionChanged", direction]);
	};

	public function ModalWindow():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ModalWindow"]);
	};

	public function MouseButtons():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MouseButtons"]);
	};

	public function OverrideCursor():QCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OverrideCursor"]);
	};

	public function Palette():QPalette {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Palette"]);
	};

	public function ConnectPaletteChanged(f:(palette:QPalette) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaletteChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaletteChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaletteChanged"]);
	};

	public function PaletteChanged(palette:QPalette_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaletteChanged", palette]);
	};

	public function PlatformFunction(func:QByteArray_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PlatformFunction", func]);
	};

	public function PlatformName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PlatformName"]);
	};

	public function PrimaryScreen():QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PrimaryScreen"]);
	};

	public function ConnectPrimaryScreenChanged(f:(screen:QScreen) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectPrimaryScreenChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectPrimaryScreenChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPrimaryScreenChanged"]);
	};

	public function PrimaryScreenChanged(screen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PrimaryScreenChanged", screen]);
	};

	public function QueryKeyboardModifiers():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QueryKeyboardModifiers"]);
	};

	public function QuitOnLastWindowClosed():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QuitOnLastWindowClosed"]);
	};

	public function RestoreOverrideCursor() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RestoreOverrideCursor"]);
	};

	public function ConnectSaveStateRequest(f:(manager:QSessionManager) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSaveStateRequest", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSaveStateRequest() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSaveStateRequest"]);
	};

	public function SaveStateRequest(manager:QSessionManager_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SaveStateRequest", manager]);
	};

	public function ConnectScreenAdded(f:(screen:QScreen) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectScreenAdded", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectScreenAdded() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectScreenAdded"]);
	};

	public function ScreenAdded(screen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ScreenAdded", screen]);
	};

	public function ScreenAt(point:QPoint_ITF):QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScreenAt", point]);
	};

	public function ConnectScreenRemoved(f:(screen:QScreen) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectScreenRemoved", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectScreenRemoved() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectScreenRemoved"]);
	};

	public function ScreenRemoved(screen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ScreenRemoved", screen]);
	};

	public function Screens():Array<QScreen> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Screens"]);
	};

	public function SessionId():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SessionId"]);
	};

	public function SessionKey():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SessionKey"]);
	};

	public function SetApplicationDisplayName(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetApplicationDisplayName", name]);
	};

	public function SetDesktopFileName(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDesktopFileName", name]);
	};

	public function SetDesktopSettingsAware(on:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDesktopSettingsAware", on]);
	};

	public function SetFallbackSessionManagementEnabled(enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFallbackSessionManagementEnabled", enabled]);
	};

	public function SetFont(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFont", font]);
	};

	public function SetLayoutDirection(direction:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLayoutDirection", direction]);
	};

	public function SetOverrideCursor(cursor:QCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOverrideCursor", cursor]);
	};

	public function SetPalette(pal:QPalette_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPalette", pal]);
	};

	public function SetQuitOnLastWindowClosed(quit:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetQuitOnLastWindowClosed", quit]);
	};

	public function SetWindowIcon(icon:QIcon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWindowIcon", icon]);
	};

	public function StyleHints():QStyleHints {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleHints"]);
	};

	public function Sync() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Sync"]);
	};

	public function TopLevelAt(pos:QPoint_ITF):QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TopLevelAt", pos]);
	};

	public function WindowIcon():QIcon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowIcon"]);
	};

	public function ConnectDestroyQGuiApplication(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQGuiApplication",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQGuiApplication() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQGuiApplication"]);
	};

	public function DestroyQGuiApplication() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGuiApplication"]);
	};

	public function DestroyQGuiApplicationDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQGuiApplicationDefault"]);
	};

	public override function QuitDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "QuitDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQGuiApplicationFromPointer(ptr:String):QGuiApplication {
	final r = new QGuiApplication();
	r.initFrom(ptr, "gui.QGuiApplication");
	return r;
}

function NewQGuiApplication(argc:Int, argv:Array<String>):QGuiApplication {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQGuiApplication", "", argc, argv]);
}

function QGuiApplication_ApplicationDisplayName():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_ApplicationDisplayName", ""]);
}

function QGuiApplication_ApplicationState():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_ApplicationState", ""]);
}

function QGuiApplication_ChangeOverrideCursor(cursor:QCursor_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_ChangeOverrideCursor", "", cursor]);
}

function QGuiApplication_Clipboard():QClipboard {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_Clipboard", ""]);
}

function QGuiApplication_DesktopFileName():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_DesktopFileName", ""]);
}

function QGuiApplication_DesktopSettingsAware():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_DesktopSettingsAware", ""]);
}

function QGuiApplication_Exec():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_Exec", ""]);
}

function QGuiApplication_FocusObject():QObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_FocusObject", ""]);
}

function QGuiApplication_FocusWindow():QWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_FocusWindow", ""]);
}

function QGuiApplication_Font():QFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_Font", ""]);
}

function QGuiApplication_InputMethod():QInputMethod {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_InputMethod", ""]);
}

function QGuiApplication_IsFallbackSessionManagementEnabled():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_IsFallbackSessionManagementEnabled", ""]);
}

function QGuiApplication_IsLeftToRight():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_IsLeftToRight", ""]);
}

function QGuiApplication_IsRightToLeft():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_IsRightToLeft", ""]);
}

function QGuiApplication_KeyboardModifiers():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_KeyboardModifiers", ""]);
}

function QGuiApplication_LayoutDirection():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_LayoutDirection", ""]);
}

function QGuiApplication_ModalWindow():QWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_ModalWindow", ""]);
}

function QGuiApplication_MouseButtons():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_MouseButtons", ""]);
}

function QGuiApplication_OverrideCursor():QCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_OverrideCursor", ""]);
}

function QGuiApplication_Palette():QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_Palette", ""]);
}

function QGuiApplication_PlatformFunction(func:QByteArray_ITF):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_PlatformFunction", "", func]);
}

function QGuiApplication_PlatformName():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_PlatformName", ""]);
}

function QGuiApplication_PrimaryScreen():QScreen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_PrimaryScreen", ""]);
}

function QGuiApplication_QueryKeyboardModifiers():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_QueryKeyboardModifiers", ""]);
}

function QGuiApplication_QuitOnLastWindowClosed():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_QuitOnLastWindowClosed", ""]);
}

function QGuiApplication_RestoreOverrideCursor() {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_RestoreOverrideCursor", ""]);
}

function QGuiApplication_ScreenAt(point:QPoint_ITF):QScreen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_ScreenAt", "", point]);
}

function QGuiApplication_Screens():Array<QScreen> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_Screens", ""]);
}

function QGuiApplication_SetApplicationDisplayName(name:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetApplicationDisplayName", "", name]);
}

function QGuiApplication_SetDesktopFileName(name:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetDesktopFileName", "", name]);
}

function QGuiApplication_SetDesktopSettingsAware(on:Bool) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetDesktopSettingsAware", "", on]);
}

function QGuiApplication_SetFallbackSessionManagementEnabled(enabled:Bool) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetFallbackSessionManagementEnabled", "", enabled]);
}

function QGuiApplication_SetFont(font:QFont_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetFont", "", font]);
}

function QGuiApplication_SetLayoutDirection(direction:Int) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetLayoutDirection", "", direction]);
}

function QGuiApplication_SetOverrideCursor(cursor:QCursor_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetOverrideCursor", "", cursor]);
}

function QGuiApplication_SetPalette(pal:QPalette_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetPalette", "", pal]);
}

function QGuiApplication_SetQuitOnLastWindowClosed(quit:Bool) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetQuitOnLastWindowClosed", "", quit]);
}

function QGuiApplication_SetWindowIcon(icon:QIcon_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_SetWindowIcon", "", icon]);
}

function QGuiApplication_StyleHints():QStyleHints {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_StyleHints", ""]);
}

function QGuiApplication_Sync() {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QGuiApplication_Sync", ""]);
}

function QGuiApplication_TopLevelAt(pos:QPoint_ITF):QWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_TopLevelAt", "", pos]);
}

function QGuiApplication_WindowIcon():QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QGuiApplication_WindowIcon", ""]);
}

interface QHelpEvent_ITF extends QEvent_ITF {
	public function QHelpEvent_PTR():QHelpEvent;
}

class QHelpEvent extends QEvent implements QHelpEvent_ITF {
	public function new() {
		super();
	}

	public function QHelpEvent_PTR():QHelpEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QHelpEvent_PTR"]);
	};

	public function DestroyQHelpEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQHelpEvent"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function GlobalX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalX"]);
	};

	public function GlobalY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalY"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQHelpEventFromPointer(ptr:String):QHelpEvent {
	final r = new QHelpEvent();
	r.initFrom(ptr, "gui.QHelpEvent");
	return r;
}

function NewQHelpEvent(ty:Int, pos:QPoint_ITF, globalPos:QPoint_ITF):QHelpEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQHelpEvent", "", ty, pos, globalPos]);
}

interface QHideEvent_ITF extends QEvent_ITF {
	public function QHideEvent_PTR():QHideEvent;
}

class QHideEvent extends QEvent implements QHideEvent_ITF {
	public function new() {
		super();
	}

	public function QHideEvent_PTR():QHideEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QHideEvent_PTR"]);
	};

	public function DestroyQHideEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQHideEvent"]);
	};
}

function NewQHideEventFromPointer(ptr:String):QHideEvent {
	final r = new QHideEvent();
	r.initFrom(ptr, "gui.QHideEvent");
	return r;
}

function NewQHideEvent():QHideEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQHideEvent", ""]);
}

interface QHoverEvent_ITF extends QInputEvent_ITF {
	public function QHoverEvent_PTR():QHoverEvent;
}

class QHoverEvent extends QInputEvent implements QHoverEvent_ITF {
	public function new() {
		super();
	}

	public function QHoverEvent_PTR():QHoverEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QHoverEvent_PTR"]);
	};

	public function DestroyQHoverEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQHoverEvent"]);
	};

	public function OldPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OldPos"]);
	};

	public function OldPosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OldPosF"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function PosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PosF"]);
	};
}

function NewQHoverEventFromPointer(ptr:String):QHoverEvent {
	final r = new QHoverEvent();
	r.initFrom(ptr, "gui.QHoverEvent");
	return r;
}

function NewQHoverEvent(ty:Int, pos:QPointF_ITF, oldPos:QPointF_ITF, modifiers:Int):QHoverEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQHoverEvent", "", ty, pos, oldPos, modifiers]);
}

interface QIcon_ITF {
	public function QIcon_PTR():QIcon;
}

class QIcon extends Internal implements QIcon_ITF {
	public function new() {
		super();
	}

	public function QIcon_PTR():QIcon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QIcon_PTR"]);
	};

	public function ActualSize(size:QSize_ITF, mode:Int, state:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ActualSize", size, mode, state]);
	};

	public function ActualSize2(window:QWindow_ITF, size:QSize_ITF, mode:Int, state:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ActualSize2", window, size, mode, state]);
	};

	public function AddFile(fileName:String, size:QSize_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddFile", fileName, size, mode, state]);
	};

	public function AddPixmap(pixmap:QPixmap_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddPixmap", pixmap, mode, state]);
	};

	public function AvailableSizes(mode:Int, state:Int):Array<QSize> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableSizes", mode, state]);
	};

	public function CacheKey():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheKey"]);
	};

	public function FallbackSearchPaths():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FallbackSearchPaths"]);
	};

	public function FallbackThemeName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FallbackThemeName"]);
	};

	public function FromTheme(name:String):QIcon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromTheme", name]);
	};

	public function FromTheme2(name:String, fallback:QIcon_ITF):QIcon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromTheme2", name, fallback]);
	};

	public function HasThemeIcon(name:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasThemeIcon", name]);
	};

	public function IsMask():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsMask"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Name():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name"]);
	};

	public function Paint(painter:QPainter_ITF, rect:QRect_ITF, alignment:Int, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Paint", painter, rect, alignment, mode, state]);
	};

	public function Paint2(painter:QPainter_ITF, x:Int, y:Int, w:Int, h:Int, alignment:Int, mode:Int, state:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "Paint2", painter, x, y, w, h, alignment, mode, state
		]);
	};

	public function Pixmap(size:QSize_ITF, mode:Int, state:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap", size, mode, state]);
	};

	public function Pixmap2(w:Int, h:Int, mode:Int, state:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap2", w, h, mode, state]);
	};

	public function Pixmap3(extent:Int, mode:Int, state:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap3", extent, mode, state]);
	};

	public function Pixmap4(window:QWindow_ITF, size:QSize_ITF, mode:Int, state:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap4", window, size, mode, state]);
	};

	public function SetFallbackSearchPaths(paths:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFallbackSearchPaths", paths]);
	};

	public function SetFallbackThemeName(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFallbackThemeName", name]);
	};

	public function SetIsMask(isMask:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIsMask", isMask]);
	};

	public function SetThemeName(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetThemeName", name]);
	};

	public function SetThemeSearchPaths(paths:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetThemeSearchPaths", paths]);
	};

	public function Swap(other:QIcon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ThemeName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ThemeName"]);
	};

	public function ThemeSearchPaths():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ThemeSearchPaths"]);
	};

	public function DestroyQIcon() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIcon"]);
	};

	public function ToVariant():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVariant"]);
	};
}

function NewQIconFromPointer(ptr:String):QIcon {
	final r = new QIcon();
	r.initFrom(ptr, "gui.QIcon");
	return r;
}

function NewQIcon():QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIcon", ""]);
}

function NewQIcon2(pixmap:QPixmap_ITF):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIcon2", "", pixmap]);
}

function NewQIcon3(other:QIcon_ITF):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIcon3", "", other]);
}

function NewQIcon4(other:QIcon_ITF):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIcon4", "", other]);
}

function NewQIcon5(fileName:String):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIcon5", "", fileName]);
}

function NewQIcon6(engine:QIconEngine_ITF):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIcon6", "", engine]);
}

function QIcon_FallbackSearchPaths():Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_FallbackSearchPaths", ""]);
}

function QIcon_FallbackThemeName():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_FallbackThemeName", ""]);
}

function QIcon_FromTheme(name:String):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_FromTheme", "", name]);
}

function QIcon_FromTheme2(name:String, fallback:QIcon_ITF):QIcon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_FromTheme2", "", name, fallback]);
}

function QIcon_HasThemeIcon(name:String):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_HasThemeIcon", "", name]);
}

function QIcon_SetFallbackSearchPaths(paths:Array<String>) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QIcon_SetFallbackSearchPaths", "", paths]);
}

function QIcon_SetFallbackThemeName(name:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QIcon_SetFallbackThemeName", "", name]);
}

function QIcon_SetThemeName(name:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QIcon_SetThemeName", "", name]);
}

function QIcon_SetThemeSearchPaths(paths:Array<String>) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QIcon_SetThemeSearchPaths", "", paths]);
}

function QIcon_ThemeName():String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_ThemeName", ""]);
}

function QIcon_ThemeSearchPaths():Array<String> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QIcon_ThemeSearchPaths", ""]);
}

interface QIconDragEvent_ITF extends QEvent_ITF {
	public function QIconDragEvent_PTR():QIconDragEvent;
}

class QIconDragEvent extends QEvent implements QIconDragEvent_ITF {
	public function new() {
		super();
	}

	public function QIconDragEvent_PTR():QIconDragEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QIconDragEvent_PTR"]);
	};

	public function DestroyQIconDragEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIconDragEvent"]);
	};
}

function NewQIconDragEventFromPointer(ptr:String):QIconDragEvent {
	final r = new QIconDragEvent();
	r.initFrom(ptr, "gui.QIconDragEvent");
	return r;
}

function NewQIconDragEvent():QIconDragEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIconDragEvent", ""]);
}

interface QIconEngine_ITF {
	public function QIconEngine_PTR():QIconEngine;
}

class QIconEngine extends Internal implements QIconEngine_ITF {
	public function new() {
		super();
	}

	public function QIconEngine_PTR():QIconEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QIconEngine_PTR"]);
	};

	public function ConnectActualSize(f:(size:QSize, mode:Int, state:Int) -> QSize) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectActualSize", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectActualSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectActualSize"]);
	};

	public function ActualSize(size:QSize_ITF, mode:Int, state:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ActualSize", size, mode, state]);
	};

	public function ActualSizeDefault(size:QSize_ITF, mode:Int, state:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ActualSizeDefault", size, mode, state]);
	};

	public function ConnectAddFile(f:(fileName:String, size:QSize, mode:Int, state:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectAddFile", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectAddFile() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAddFile"]);
	};

	public function AddFile(fileName:String, size:QSize_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddFile", fileName, size, mode, state]);
	};

	public function AddFileDefault(fileName:String, size:QSize_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddFileDefault", fileName, size, mode, state]);
	};

	public function ConnectAddPixmap(f:(pixmap:QPixmap, mode:Int, state:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectAddPixmap", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectAddPixmap() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAddPixmap"]);
	};

	public function AddPixmap(pixmap:QPixmap_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddPixmap", pixmap, mode, state]);
	};

	public function AddPixmapDefault(pixmap:QPixmap_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddPixmapDefault", pixmap, mode, state]);
	};

	public function ConnectAvailableSizes(f:(mode:Int, state:Int) -> Array<QSize>) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectAvailableSizes", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectAvailableSizes() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAvailableSizes"]);
	};

	public function AvailableSizes(mode:Int, state:Int):Array<QSize> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableSizes", mode, state]);
	};

	public function AvailableSizesDefault(mode:Int, state:Int):Array<QSize> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableSizesDefault", mode, state]);
	};

	public function ConnectClone(f:() -> QIconEngine) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectClone", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectClone() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectClone"]);
	};

	public function Clone():QIconEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Clone"]);
	};

	public function ConnectIconName(f:() -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIconName", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIconName() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIconName"]);
	};

	public function IconName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IconName"]);
	};

	public function IconNameDefault():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IconNameDefault"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function ConnectKey(f:() -> String) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectKey", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectKey() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectKey"]);
	};

	public function Key():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Key"]);
	};

	public function KeyDefault():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyDefault"]);
	};

	public function ConnectPaint(f:(painter:QPainter, rect:QRect, mode:Int, state:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaint", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaint() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaint"]);
	};

	public function Paint(painter:QPainter_ITF, rect:QRect_ITF, mode:Int, state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Paint", painter, rect, mode, state]);
	};

	public function ConnectPixmap(f:(size:QSize, mode:Int, state:Int) -> QPixmap) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPixmap", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPixmap() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPixmap"]);
	};

	public function Pixmap(size:QSize_ITF, mode:Int, state:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixmap", size, mode, state]);
	};

	public function PixmapDefault(size:QSize_ITF, mode:Int, state:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixmapDefault", size, mode, state]);
	};

	public function ConnectRead(f:(i:QDataStream) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRead", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRead() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRead"]);
	};

	public function Read(i:QDataStream_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Read", i]);
	};

	public function ReadDefault(i:QDataStream_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ReadDefault", i]);
	};

	public function ScaledPixmap(size:QSize_ITF, mode:Int, state:Int, scale:Float):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledPixmap", size, mode, state, scale]);
	};

	public function ConnectVirtual_hook(f:(id:Int, data:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectVirtual_hook", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectVirtual_hook() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectVirtual_hook"]);
	};

	public function Virtual_hook(id:Int, data:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Virtual_hook", id, data]);
	};

	public function Virtual_hookDefault(id:Int, data:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Virtual_hookDefault", id, data]);
	};

	public function ConnectWrite(f:(out:QDataStream) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectWrite", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectWrite() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWrite"]);
	};

	public function Write(out:QDataStream_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Write", out]);
	};

	public function WriteDefault(out:QDataStream_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WriteDefault", out]);
	};

	public function ConnectDestroyQIconEngine(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQIconEngine",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQIconEngine() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQIconEngine"]);
	};

	public function DestroyQIconEngine() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIconEngine"]);
	};

	public function DestroyQIconEngineDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIconEngineDefault"]);
	};
}

function NewQIconEngineFromPointer(ptr:String):QIconEngine {
	final r = new QIconEngine();
	r.initFrom(ptr, "gui.QIconEngine");
	return r;
}

function NewQIconEngine():QIconEngine {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIconEngine", ""]);
}

interface QIconEnginePlugin_ITF extends QObject_ITF {
	public function QIconEnginePlugin_PTR():QIconEnginePlugin;
}

class QIconEnginePlugin extends QObject implements QIconEnginePlugin_ITF {
	public function new() {
		super();
	}

	public function QIconEnginePlugin_PTR():QIconEnginePlugin {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QIconEnginePlugin_PTR"]);
	};

	public function ConnectCreate(f:(filename:String) -> QIconEngine) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCreate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCreate"]);
	};

	public function Create(filename:String):QIconEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create", filename]);
	};

	public function ConnectDestroyQIconEnginePlugin(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQIconEnginePlugin",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQIconEnginePlugin() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQIconEnginePlugin"]);
	};

	public function DestroyQIconEnginePlugin() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIconEnginePlugin"]);
	};

	public function DestroyQIconEnginePluginDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIconEnginePluginDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQIconEnginePluginFromPointer(ptr:String):QIconEnginePlugin {
	final r = new QIconEnginePlugin();
	r.initFrom(ptr, "gui.QIconEnginePlugin");
	return r;
}

function NewQIconEnginePlugin(parent:QObject_ITF):QIconEnginePlugin {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIconEnginePlugin", "", parent]);
}

interface QImage_ITF extends QPaintDevice_ITF {
	public function QImage_PTR():QImage;
}

class QImage extends QPaintDevice implements QImage_ITF {
	public function new() {
		super();
	}

	public function QImage_PTR():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QImage_PTR"]);
	};

	public function AllGray():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AllGray"]);
	};

	public function BitPlaneCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BitPlaneCount"]);
	};

	public function Bits():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bits"]);
	};

	public function Bits2():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bits2"]);
	};

	public function BytesPerLine():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BytesPerLine"]);
	};

	public function CacheKey():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheKey"]);
	};

	public function Color(i:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Color", i]);
	};

	public function ColorTable():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColorTable"]);
	};

	public function ConstBits():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConstBits"]);
	};

	public function ConstScanLine(i:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConstScanLine", i]);
	};

	public function ConvertTo(format:Int, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConvertTo", format, flags]);
	};

	public function ConvertToFormat(format:Int, flags:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConvertToFormat", format, flags]);
	};

	public function ConvertToFormat2(format:Int, flags:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConvertToFormat2", format, flags]);
	};

	public function ConvertToFormat3(format:Int, colorTable:Array<Int>, flags:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConvertToFormat3", format, colorTable, flags]);
	};

	public function Copy(rectangle:QRect_ITF):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Copy", rectangle]);
	};

	public function Copy2(x:Int, y:Int, width:Int, height:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Copy2", x, y, width, height]);
	};

	public function CreateAlphaMask(flags:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateAlphaMask", flags]);
	};

	public function CreateHeuristicMask(clipTight:Bool):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateHeuristicMask", clipTight]);
	};

	public function CreateMaskFromColor(color:Int, mode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateMaskFromColor", color, mode]);
	};

	public function DevicePixelRatio_QImage():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatio"]);
	};

	public function DotsPerMeterX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotsPerMeterX"]);
	};

	public function DotsPerMeterY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotsPerMeterY"]);
	};

	public function Fill(pixelValue:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Fill", pixelValue]);
	};

	public function Fill2(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Fill2", color]);
	};

	public function Fill3(color:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Fill3", color]);
	};

	public function Format():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function FromData(data:String, size:Int, format:String):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromData", data, size, format]);
	};

	public function FromData2(data:QByteArray_ITF, format:String):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromData2", data, format]);
	};

	public function HasAlphaChannel():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasAlphaChannel"]);
	};

	public function InvertPixels(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InvertPixels", mode]);
	};

	public function IsGrayscale():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsGrayscale"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Load(fileName:String, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Load", fileName, format]);
	};

	public function Load2(device:QIODevice_ITF, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Load2", device, format]);
	};

	public function LoadFromData(data:String, l:Int, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadFromData", data, l, format]);
	};

	public function LoadFromData2(data:QByteArray_ITF, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadFromData2", data, format]);
	};

	public function Mirrored(horizontal:Bool, vertical:Bool):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mirrored", horizontal, vertical]);
	};

	public function Mirrored2(horizontal:Bool, vertical:Bool):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mirrored2", horizontal, vertical]);
	};

	public function Offset():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Offset"]);
	};

	public function Pixel(position:QPoint_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixel", position]);
	};

	public function Pixel2(x:Int, y:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pixel2", x, y]);
	};

	public function PixelColor(position:QPoint_ITF):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelColor", position]);
	};

	public function PixelColor2(x:Int, y:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelColor2", x, y]);
	};

	public function PixelFormat():QPixelFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelFormat"]);
	};

	public function PixelIndex(position:QPoint_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelIndex", position]);
	};

	public function PixelIndex2(x:Int, y:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelIndex2", x, y]);
	};

	public function Rect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function ReinterpretAsFormat(format:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ReinterpretAsFormat", format]);
	};

	public function RgbSwapped():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RgbSwapped"]);
	};

	public function RgbSwapped2():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RgbSwapped2"]);
	};

	public function Save(fileName:String, format:String, quality:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Save", fileName, format, quality]);
	};

	public function Save2(device:QIODevice_ITF, format:String, quality:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Save2", device, format, quality]);
	};

	public function Scaled(size:QSize_ITF, aspectRatioMode:Int, transformMode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Scaled", size, aspectRatioMode, transformMode]);
	};

	public function Scaled2(width:Int, height:Int, aspectRatioMode:Int, transformMode:Int):QImage {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"Scaled2",
			width,
			height,
			aspectRatioMode,
			transformMode
		]);
	};

	public function ScaledToHeight(height:Int, mode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledToHeight", height, mode]);
	};

	public function ScaledToWidth(width:Int, mode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledToWidth", width, mode]);
	};

	public function ScanLine(i:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScanLine", i]);
	};

	public function ScanLine2(i:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScanLine2", i]);
	};

	public function SetColor(index:Int, colorValue:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColor", index, colorValue]);
	};

	public function SetColorCount(colorCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColorCount", colorCount]);
	};

	public function SetColorTable(colors:Array<Int>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColorTable", colors]);
	};

	public function SetDevicePixelRatio(scaleFactor:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevicePixelRatio", scaleFactor]);
	};

	public function SetDotsPerMeterX(x:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDotsPerMeterX", x]);
	};

	public function SetDotsPerMeterY(y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDotsPerMeterY", y]);
	};

	public function SetOffset(offset:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOffset", offset]);
	};

	public function SetPixel(position:QPoint_ITF, index_or_rgb:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixel", position, index_or_rgb]);
	};

	public function SetPixel2(x:Int, y:Int, index_or_rgb:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixel2", x, y, index_or_rgb]);
	};

	public function SetPixelColor(position:QPoint_ITF, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixelColor", position, color]);
	};

	public function SetPixelColor2(x:Int, y:Int, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixelColor2", x, y, color]);
	};

	public function SetText(key:String, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", key, text]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function SmoothScaled(w:Int, h:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SmoothScaled", w, h]);
	};

	public function Swap(other:QImage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Text(key:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text", key]);
	};

	public function TextKeys():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextKeys"]);
	};

	public function ToImageFormat(format:QPixelFormat_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToImageFormat", format]);
	};

	public function ToPixelFormat(format:Int):QPixelFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPixelFormat", format]);
	};

	public function Transformed(matrix:QMatrix_ITF, mode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformed", matrix, mode]);
	};

	public function Transformed2(matrix:QTransform_ITF, mode:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformed2", matrix, mode]);
	};

	public function TrueMatrix(matrix:QMatrix_ITF, width:Int, height:Int):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TrueMatrix", matrix, width, height]);
	};

	public function TrueMatrix2(matrix:QTransform_ITF, width:Int, height:Int):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TrueMatrix2", matrix, width, height]);
	};

	public function Valid(pos:QPoint_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Valid", pos]);
	};

	public function Valid2(x:Int, y:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Valid2", x, y]);
	};

	public function ConnectDestroyQImage(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQImage", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQImage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQImage"]);
	};

	public function DestroyQImage() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImage"]);
	};

	public function DestroyQImageDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageDefault"]);
	};

	public function ToVariant():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVariant"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};
}

function NewQImageFromPointer(ptr:String):QImage {
	final r = new QImage();
	r.initFrom(ptr, "gui.QImage");
	return r;
}

function NewQImage():QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage", ""]);
}

function NewQImage2(size:QSize_ITF, format:Int):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage2", "", size, format]);
}

function NewQImage3(width:Int, height:Int, format:Int):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage3", "", width, height, format]);
}

function NewQImage4(data:String, width:Int, height:Int, format:Int):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage4", "", data, width, height, format]);
}

function NewQImage5(data:String, width:Int, height:Int, format:Int):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage5", "", data, width, height, format]);
}

function NewQImage6(data:String, width:Int, height:Int, bytesPerLine:Int, format:Int):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage6", "", data, width, height, bytesPerLine, format]);
}

function NewQImage7(data:String, width:Int, height:Int, bytesPerLine:Int, format:Int):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage7", "", data, width, height, bytesPerLine, format]);
}

function NewQImage9(fileName:String, format:String):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage9", "", fileName, format]);
}

function NewQImage10(image:QImage_ITF):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage10", "", image]);
}

function NewQImage11(other:QImage_ITF):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImage11", "", other]);
}

function QImage_FromData(data:String, size:Int, format:String):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImage_FromData", "", data, size, format]);
}

function QImage_FromData2(data:QByteArray_ITF, format:String):QImage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImage_FromData2", "", data, format]);
}

function QImage_ToImageFormat(format:QPixelFormat_ITF):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImage_ToImageFormat", "", format]);
}

function QImage_ToPixelFormat(format:Int):QPixelFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImage_ToPixelFormat", "", format]);
}

function QImage_TrueMatrix(matrix:QMatrix_ITF, width:Int, height:Int):QMatrix {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImage_TrueMatrix", "", matrix, width, height]);
}

function QImage_TrueMatrix2(matrix:QTransform_ITF, width:Int, height:Int):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImage_TrueMatrix2", "", matrix, width, height]);
}

interface QImageIOHandler_ITF {
	public function QImageIOHandler_PTR():QImageIOHandler;
}

class QImageIOHandler extends Internal implements QImageIOHandler_ITF {
	public function new() {
		super();
	}

	public function QImageIOHandler_PTR():QImageIOHandler {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QImageIOHandler_PTR"]);
	};

	public function ConnectCanRead(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCanRead", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCanRead() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCanRead"]);
	};

	public function CanRead():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CanRead"]);
	};

	public function ConnectCurrentImageNumber(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectCurrentImageNumber",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectCurrentImageNumber() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCurrentImageNumber"]);
	};

	public function CurrentImageNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImageNumber"]);
	};

	public function CurrentImageNumberDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImageNumberDefault"]);
	};

	public function ConnectCurrentImageRect(f:() -> QRect) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCurrentImageRect", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCurrentImageRect() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCurrentImageRect"]);
	};

	public function CurrentImageRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImageRect"]);
	};

	public function CurrentImageRectDefault():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImageRectDefault"]);
	};

	public function Device():QIODevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function Format():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function ConnectImageCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectImageCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectImageCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectImageCount"]);
	};

	public function ImageCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageCount"]);
	};

	public function ImageCountDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageCountDefault"]);
	};

	public function ConnectJumpToImage(f:(imageNumber:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectJumpToImage", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectJumpToImage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectJumpToImage"]);
	};

	public function JumpToImage(imageNumber:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToImage", imageNumber]);
	};

	public function JumpToImageDefault(imageNumber:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToImageDefault", imageNumber]);
	};

	public function ConnectJumpToNextImage(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectJumpToNextImage", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectJumpToNextImage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectJumpToNextImage"]);
	};

	public function JumpToNextImage():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToNextImage"]);
	};

	public function JumpToNextImageDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToNextImageDefault"]);
	};

	public function ConnectLoopCount(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLoopCount", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLoopCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLoopCount"]);
	};

	public function LoopCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoopCount"]);
	};

	public function LoopCountDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoopCountDefault"]);
	};

	public function ConnectNextImageDelay(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectNextImageDelay", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectNextImageDelay() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectNextImageDelay"]);
	};

	public function NextImageDelay():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NextImageDelay"]);
	};

	public function NextImageDelayDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NextImageDelayDefault"]);
	};

	public function ConnectOption(f:(option:Int) -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectOption", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectOption() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectOption"]);
	};

	public function Option(option:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Option", option]);
	};

	public function OptionDefault(option:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OptionDefault", option]);
	};

	public function ConnectRead(f:(image:QImage) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRead", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRead() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRead"]);
	};

	public function Read(image:QImage_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Read", image]);
	};

	public function SetDevice(device:QIODevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevice", device]);
	};

	public function SetFormat(format:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetFormat2(format:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat2", format]);
	};

	public function ConnectSetOption(f:(option:Int, value:QVariant) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetOption", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetOption() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetOption"]);
	};

	public function SetOption(option:Int, value:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOption", option, value]);
	};

	public function SetOptionDefault(option:Int, value:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOptionDefault", option, value]);
	};

	public function ConnectSupportsOption(f:(option:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSupportsOption", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSupportsOption() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSupportsOption"]);
	};

	public function SupportsOption(option:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsOption", option]);
	};

	public function SupportsOptionDefault(option:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsOptionDefault", option]);
	};

	public function ConnectWrite(f:(image:QImage) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectWrite", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectWrite() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWrite"]);
	};

	public function Write(image:QImage_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Write", image]);
	};

	public function WriteDefault(image:QImage_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WriteDefault", image]);
	};

	public function ConnectDestroyQImageIOHandler(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQImageIOHandler",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQImageIOHandler() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQImageIOHandler"]);
	};

	public function DestroyQImageIOHandler() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageIOHandler"]);
	};

	public function DestroyQImageIOHandlerDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageIOHandlerDefault"]);
	};
}

function NewQImageIOHandlerFromPointer(ptr:String):QImageIOHandler {
	final r = new QImageIOHandler();
	r.initFrom(ptr, "gui.QImageIOHandler");
	return r;
}

function NewQImageIOHandler():QImageIOHandler {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageIOHandler", ""]);
}

interface QImageIOPlugin_ITF extends QObject_ITF {
	public function QImageIOPlugin_PTR():QImageIOPlugin;
}

class QImageIOPlugin extends QObject implements QImageIOPlugin_ITF {
	public function new() {
		super();
	}

	public function QImageIOPlugin_PTR():QImageIOPlugin {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QImageIOPlugin_PTR"]);
	};

	public function ConnectCapabilities(f:(device:QIODevice, format:QByteArray) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCapabilities", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCapabilities() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCapabilities"]);
	};

	public function Capabilities(device:QIODevice_ITF, format:QByteArray_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Capabilities", device, format]);
	};

	public function ConnectCreate(f:(device:QIODevice, format:QByteArray) -> QImageIOHandler) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCreate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCreate"]);
	};

	public function Create(device:QIODevice_ITF, format:QByteArray_ITF):QImageIOHandler {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create", device, format]);
	};

	public function ConnectDestroyQImageIOPlugin(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQImageIOPlugin",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQImageIOPlugin() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQImageIOPlugin"]);
	};

	public function DestroyQImageIOPlugin() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageIOPlugin"]);
	};

	public function DestroyQImageIOPluginDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageIOPluginDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQImageIOPluginFromPointer(ptr:String):QImageIOPlugin {
	final r = new QImageIOPlugin();
	r.initFrom(ptr, "gui.QImageIOPlugin");
	return r;
}

function NewQImageIOPlugin(parent:QObject_ITF):QImageIOPlugin {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageIOPlugin", "", parent]);
}

interface QImageReader_ITF {
	public function QImageReader_PTR():QImageReader;
}

class QImageReader extends Internal implements QImageReader_ITF {
	public function new() {
		super();
	}

	public function QImageReader_PTR():QImageReader {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QImageReader_PTR"]);
	};

	public function AutoDetectImageFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AutoDetectImageFormat"]);
	};

	public function AutoTransform():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AutoTransform"]);
	};

	public function BackgroundColor():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundColor"]);
	};

	public function CanRead():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CanRead"]);
	};

	public function ClipRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipRect"]);
	};

	public function CurrentImageNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImageNumber"]);
	};

	public function CurrentImageRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImageRect"]);
	};

	public function DecideFormatFromContent():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DecideFormatFromContent"]);
	};

	public function Device():QIODevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function Error():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Error"]);
	};

	public function ErrorString():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ErrorString"]);
	};

	public function FileName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FileName"]);
	};

	public function Format():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function Gamma():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Gamma"]);
	};

	public function ImageCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageCount"]);
	};

	public function ImageFormat():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageFormat"]);
	};

	public function ImageFormat2(fileName:String):QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageFormat2", fileName]);
	};

	public function ImageFormat3(device:QIODevice_ITF):QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageFormat3", device]);
	};

	public function ImageFormatsForMimeType(mimeType:QByteArray_ITF):Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageFormatsForMimeType", mimeType]);
	};

	public function JumpToImage(imageNumber:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToImage", imageNumber]);
	};

	public function JumpToNextImage():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToNextImage"]);
	};

	public function LoopCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoopCount"]);
	};

	public function NextImageDelay():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NextImageDelay"]);
	};

	public function Quality():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Quality"]);
	};

	public function Read():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Read"]);
	};

	public function Read2(image:QImage_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Read2", image]);
	};

	public function ScaledClipRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledClipRect"]);
	};

	public function ScaledSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledSize"]);
	};

	public function SetAutoDetectImageFormat(enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAutoDetectImageFormat", enabled]);
	};

	public function SetAutoTransform(enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAutoTransform", enabled]);
	};

	public function SetBackgroundColor(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBackgroundColor", color]);
	};

	public function SetClipRect(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipRect", rect]);
	};

	public function SetDecideFormatFromContent(ignored:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDecideFormatFromContent", ignored]);
	};

	public function SetDevice(device:QIODevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevice", device]);
	};

	public function SetFileName(fileName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFileName", fileName]);
	};

	public function SetFormat(format:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetGamma(gamma:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGamma", gamma]);
	};

	public function SetQuality(quality:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetQuality", quality]);
	};

	public function SetScaledClipRect(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScaledClipRect", rect]);
	};

	public function SetScaledSize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScaledSize", size]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function SubType():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SubType"]);
	};

	public function SupportedImageFormats():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedImageFormats"]);
	};

	public function SupportedMimeTypes():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedMimeTypes"]);
	};

	public function SupportedSubTypes():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedSubTypes"]);
	};

	public function SupportsAnimation():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsAnimation"]);
	};

	public function SupportsOption(option:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsOption", option]);
	};

	public function Text(key:String):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text", key]);
	};

	public function TextKeys():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextKeys"]);
	};

	public function Transformation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformation"]);
	};

	public function DestroyQImageReader() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageReader"]);
	};
}

function NewQImageReaderFromPointer(ptr:String):QImageReader {
	final r = new QImageReader();
	r.initFrom(ptr, "gui.QImageReader");
	return r;
}

function NewQImageReader():QImageReader {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageReader", ""]);
}

function NewQImageReader2(device:QIODevice_ITF, format:QByteArray_ITF):QImageReader {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageReader2", "", device, format]);
}

function NewQImageReader3(fileName:String, format:QByteArray_ITF):QImageReader {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageReader3", "", fileName, format]);
}

function QImageReader_ImageFormat2(fileName:String):QByteArray {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageReader_ImageFormat2", "", fileName]);
}

function QImageReader_ImageFormat3(device:QIODevice_ITF):QByteArray {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageReader_ImageFormat3", "", device]);
}

function QImageReader_ImageFormatsForMimeType(mimeType:QByteArray_ITF):Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageReader_ImageFormatsForMimeType", "", mimeType]);
}

function QImageReader_SupportedImageFormats():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageReader_SupportedImageFormats", ""]);
}

function QImageReader_SupportedMimeTypes():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageReader_SupportedMimeTypes", ""]);
}

interface QImageTextKeyLang_ITF {
	public function QImageTextKeyLang_PTR():QImageTextKeyLang;
}

class QImageTextKeyLang extends Internal implements QImageTextKeyLang_ITF {
	public function new() {
		super();
	}

	public function QImageTextKeyLang_PTR():QImageTextKeyLang {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QImageTextKeyLang_PTR"]);
	};

	public function DestroyQImageTextKeyLang() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageTextKeyLang"]);
	};
}

function NewQImageTextKeyLangFromPointer(ptr:String):QImageTextKeyLang {
	final r = new QImageTextKeyLang();
	r.initFrom(ptr, "gui.QImageTextKeyLang");
	return r;
}

interface QImageWriter_ITF {
	public function QImageWriter_PTR():QImageWriter;
}

class QImageWriter extends Internal implements QImageWriter_ITF {
	public function new() {
		super();
	}

	public function QImageWriter_PTR():QImageWriter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QImageWriter_PTR"]);
	};

	public function CanWrite():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CanWrite"]);
	};

	public function Compression():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Compression"]);
	};

	public function Device():QIODevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function Error():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Error"]);
	};

	public function ErrorString():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ErrorString"]);
	};

	public function FileName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FileName"]);
	};

	public function Format():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function Gamma():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Gamma"]);
	};

	public function ImageFormatsForMimeType(mimeType:QByteArray_ITF):Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageFormatsForMimeType", mimeType]);
	};

	public function OptimizedWrite():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OptimizedWrite"]);
	};

	public function ProgressiveScanWrite():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ProgressiveScanWrite"]);
	};

	public function Quality():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Quality"]);
	};

	public function SetCompression(compression:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCompression", compression]);
	};

	public function SetDevice(device:QIODevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevice", device]);
	};

	public function SetFileName(fileName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFileName", fileName]);
	};

	public function SetFormat(format:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetGamma(gamma:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGamma", gamma]);
	};

	public function SetOptimizedWrite(optimize:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOptimizedWrite", optimize]);
	};

	public function SetProgressiveScanWrite(progressive:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetProgressiveScanWrite", progressive]);
	};

	public function SetQuality(quality:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetQuality", quality]);
	};

	public function SetSubType(ty:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSubType", ty]);
	};

	public function SetText(key:String, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", key, text]);
	};

	public function SetTransformation(transform:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTransformation", transform]);
	};

	public function SubType():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SubType"]);
	};

	public function SupportedImageFormats():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedImageFormats"]);
	};

	public function SupportedMimeTypes():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedMimeTypes"]);
	};

	public function SupportedSubTypes():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedSubTypes"]);
	};

	public function SupportsOption(option:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsOption", option]);
	};

	public function Transformation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformation"]);
	};

	public function Write(image:QImage_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Write", image]);
	};

	public function DestroyQImageWriter() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQImageWriter"]);
	};
}

function NewQImageWriterFromPointer(ptr:String):QImageWriter {
	final r = new QImageWriter();
	r.initFrom(ptr, "gui.QImageWriter");
	return r;
}

function NewQImageWriter():QImageWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageWriter", ""]);
}

function NewQImageWriter2(device:QIODevice_ITF, format:QByteArray_ITF):QImageWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageWriter2", "", device, format]);
}

function NewQImageWriter3(fileName:String, format:QByteArray_ITF):QImageWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQImageWriter3", "", fileName, format]);
}

function QImageWriter_ImageFormatsForMimeType(mimeType:QByteArray_ITF):Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageWriter_ImageFormatsForMimeType", "", mimeType]);
}

function QImageWriter_SupportedImageFormats():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageWriter_SupportedImageFormats", ""]);
}

function QImageWriter_SupportedMimeTypes():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QImageWriter_SupportedMimeTypes", ""]);
}

interface QInputEvent_ITF extends QEvent_ITF {
	public function QInputEvent_PTR():QInputEvent;
}

class QInputEvent extends QEvent implements QInputEvent_ITF {
	public function new() {
		super();
	}

	public function QInputEvent_PTR():QInputEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QInputEvent_PTR"]);
	};

	public function DestroyQInputEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQInputEvent"]);
	};

	public function Modifiers():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Modifiers"]);
	};

	public function Timestamp():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Timestamp"]);
	};
}

function NewQInputEventFromPointer(ptr:String):QInputEvent {
	final r = new QInputEvent();
	r.initFrom(ptr, "gui.QInputEvent");
	return r;
}

interface QInputMethod_ITF extends QObject_ITF {
	public function QInputMethod_PTR():QInputMethod;
}

class QInputMethod extends QObject implements QInputMethod_ITF {
	public function new() {
		super();
	}

	public function QInputMethod_PTR():QInputMethod {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QInputMethod_PTR"]);
	};

	public function AnchorRectangle():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AnchorRectangle"]);
	};

	public function ConnectAnchorRectangleChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectAnchorRectangleChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectAnchorRectangleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAnchorRectangleChanged"]);
	};

	public function AnchorRectangleChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "AnchorRectangleChanged"]);
	};

	public function ConnectAnimatingChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectAnimatingChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectAnimatingChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAnimatingChanged"]);
	};

	public function AnimatingChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "AnimatingChanged"]);
	};

	public function ConnectCommit(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCommit", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCommit() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCommit"]);
	};

	public function Commit() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Commit"]);
	};

	public function CommitDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "CommitDefault"]);
	};

	public function CursorRectangle():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorRectangle"]);
	};

	public function ConnectCursorRectangleChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectCursorRectangleChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectCursorRectangleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCursorRectangleChanged"]);
	};

	public function CursorRectangleChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "CursorRectangleChanged"]);
	};

	public function ConnectHide(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectHide", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectHide() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectHide"]);
	};

	public function Hide() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Hide"]);
	};

	public function HideDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "HideDefault"]);
	};

	public function InputDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InputDirection"]);
	};

	public function ConnectInputDirectionChanged(f:(newDirection:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectInputDirectionChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectInputDirectionChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInputDirectionChanged"]);
	};

	public function InputDirectionChanged(newDirection:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InputDirectionChanged", newDirection]);
	};

	public function InputItemClipRectangle():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InputItemClipRectangle"]);
	};

	public function ConnectInputItemClipRectangleChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectInputItemClipRectangleChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectInputItemClipRectangleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInputItemClipRectangleChanged"]);
	};

	public function InputItemClipRectangleChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "InputItemClipRectangleChanged"]);
	};

	public function InputItemRectangle():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InputItemRectangle"]);
	};

	public function InputItemTransform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InputItemTransform"]);
	};

	public function ConnectInvokeAction(f:(a:Int, cursorPosition:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectInvokeAction", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectInvokeAction() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInvokeAction"]);
	};

	public function InvokeAction(a:Int, cursorPosition:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InvokeAction", a, cursorPosition]);
	};

	public function InvokeActionDefault(a:Int, cursorPosition:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InvokeActionDefault", a, cursorPosition]);
	};

	public function IsAnimating():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAnimating"]);
	};

	public function IsVisible():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsVisible"]);
	};

	public function KeyboardRectangle():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyboardRectangle"]);
	};

	public function ConnectKeyboardRectangleChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectKeyboardRectangleChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectKeyboardRectangleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectKeyboardRectangleChanged"]);
	};

	public function KeyboardRectangleChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "KeyboardRectangleChanged"]);
	};

	public function Locale():QLocale {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Locale"]);
	};

	public function ConnectLocaleChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLocaleChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLocaleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLocaleChanged"]);
	};

	public function LocaleChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "LocaleChanged"]);
	};

	public function QueryFocusObject(query:Int, argument:QVariant_ITF):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QueryFocusObject", query, argument]);
	};

	public function ConnectReset(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectReset", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectReset() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectReset"]);
	};

	public function Reset() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Reset"]);
	};

	public function ResetDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResetDefault"]);
	};

	public function SetInputItemRectangle(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetInputItemRectangle", rect]);
	};

	public function SetInputItemTransform(transform:QTransform_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetInputItemTransform", transform]);
	};

	public function SetVisible(visible:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVisible", visible]);
	};

	public function ConnectShow(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShow", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShow"]);
	};

	public function Show() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Show"]);
	};

	public function ShowDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowDefault"]);
	};

	public function ConnectUpdate(f:(queries:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUpdate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUpdate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUpdate"]);
	};

	public function Update(queries:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Update", queries]);
	};

	public function UpdateDefault(queries:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UpdateDefault", queries]);
	};

	public function ConnectVisibleChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectVisibleChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectVisibleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectVisibleChanged"]);
	};

	public function VisibleChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "VisibleChanged"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQInputMethodFromPointer(ptr:String):QInputMethod {
	final r = new QInputMethod();
	r.initFrom(ptr, "gui.QInputMethod");
	return r;
}

function QInputMethod_QueryFocusObject(query:Int, argument:QVariant_ITF):QVariant {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QInputMethod_QueryFocusObject", "", query, argument]);
}

interface QInputMethodEvent_ITF extends QEvent_ITF {
	public function QInputMethodEvent_PTR():QInputMethodEvent;
}

class QInputMethodEvent extends QEvent implements QInputMethodEvent_ITF {
	public function new() {
		super();
	}

	public function QInputMethodEvent_PTR():QInputMethodEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QInputMethodEvent_PTR"]);
	};

	public function DestroyQInputMethodEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQInputMethodEvent"]);
	};

	public function CommitString():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CommitString"]);
	};

	public function PreeditString():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PreeditString"]);
	};

	public function ReplacementLength():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ReplacementLength"]);
	};

	public function ReplacementStart():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ReplacementStart"]);
	};

	public function SetCommitString(commitString:String, replaceFrom:Int, replaceLength:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetCommitString",
			commitString,
			replaceFrom,
			replaceLength
		]);
	};
}

function NewQInputMethodEventFromPointer(ptr:String):QInputMethodEvent {
	final r = new QInputMethodEvent();
	r.initFrom(ptr, "gui.QInputMethodEvent");
	return r;
}

function NewQInputMethodEvent():QInputMethodEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQInputMethodEvent", ""]);
}

function NewQInputMethodEvent3(other:QInputMethodEvent_ITF):QInputMethodEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQInputMethodEvent3", "", other]);
}

interface QInputMethodQueryEvent_ITF extends QEvent_ITF {
	public function QInputMethodQueryEvent_PTR():QInputMethodQueryEvent;
}

class QInputMethodQueryEvent extends QEvent implements QInputMethodQueryEvent_ITF {
	public function new() {
		super();
	}

	public function QInputMethodQueryEvent_PTR():QInputMethodQueryEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QInputMethodQueryEvent_PTR"]);
	};

	public function DestroyQInputMethodQueryEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQInputMethodQueryEvent"]);
	};

	public function Queries():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Queries"]);
	};

	public function SetValue(query:Int, value:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetValue", query, value]);
	};

	public function Value(query:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Value", query]);
	};
}

function NewQInputMethodQueryEventFromPointer(ptr:String):QInputMethodQueryEvent {
	final r = new QInputMethodQueryEvent();
	r.initFrom(ptr, "gui.QInputMethodQueryEvent");
	return r;
}

function NewQInputMethodQueryEvent(queries:Int):QInputMethodQueryEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQInputMethodQueryEvent", "", queries]);
}

interface QIntValidator_ITF extends QValidator_ITF {
	public function QIntValidator_PTR():QIntValidator;
}

class QIntValidator extends QValidator implements QIntValidator_ITF {
	public function new() {
		super();
	}

	public function QIntValidator_PTR():QIntValidator {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QIntValidator_PTR"]);
	};

	public function Bottom():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bottom"]);
	};

	public function ConnectBottomChanged(f:(bottom:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBottomChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBottomChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBottomChanged"]);
	};

	public function BottomChanged(bottom:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BottomChanged", bottom]);
	};

	public function SetBottom(vi:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBottom", vi]);
	};

	public function ConnectSetRange(f:(bottom:Int, top:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetRange", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetRange() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetRange"]);
	};

	public function SetRange(bottom:Int, top:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRange", bottom, top]);
	};

	public function SetRangeDefault(bottom:Int, top:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRangeDefault", bottom, top]);
	};

	public function SetTop(vi:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTop", vi]);
	};

	public function Top():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Top"]);
	};

	public function ConnectTopChanged(f:(top:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTopChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTopChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTopChanged"]);
	};

	public function TopChanged(top:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TopChanged", top]);
	};

	public override function ConnectValidate(f:(input:String, pos:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectValidate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectValidate"]);
	};

	public override function Validate(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Validate", input, pos]);
	};

	public function ValidateDefault(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ValidateDefault", input, pos]);
	};

	public function ConnectDestroyQIntValidator(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQIntValidator",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQIntValidator() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQIntValidator"]);
	};

	public function DestroyQIntValidator() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIntValidator"]);
	};

	public function DestroyQIntValidatorDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQIntValidatorDefault"]);
	};
}

function NewQIntValidatorFromPointer(ptr:String):QIntValidator {
	final r = new QIntValidator();
	r.initFrom(ptr, "gui.QIntValidator");
	return r;
}

function NewQIntValidator(parent:QObject_ITF):QIntValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIntValidator", "", parent]);
}

function NewQIntValidator2(minimum:Int, maximum:Int, parent:QObject_ITF):QIntValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQIntValidator2", "", minimum, maximum, parent]);
}

interface QKeyEvent_ITF extends QInputEvent_ITF {
	public function QKeyEvent_PTR():QKeyEvent;
}

class QKeyEvent extends QInputEvent implements QKeyEvent_ITF {
	public function new() {
		super();
	}

	public function QKeyEvent_PTR():QKeyEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QKeyEvent_PTR"]);
	};

	public function DestroyQKeyEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQKeyEvent"]);
	};

	public function Count():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Count"]);
	};

	public function IsAutoRepeat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAutoRepeat"]);
	};

	public function Key():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Key"]);
	};

	public function Matches(key:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Matches", key]);
	};

	public function NativeModifiers():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeModifiers"]);
	};

	public function NativeScanCode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeScanCode"]);
	};

	public function NativeVirtualKey():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeVirtualKey"]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};
}

function NewQKeyEventFromPointer(ptr:String):QKeyEvent {
	final r = new QKeyEvent();
	r.initFrom(ptr, "gui.QKeyEvent");
	return r;
}

function NewQKeyEvent(ty:Int, key:Int, modifiers:Int, text:String, autorep:Bool, count:Int):QKeyEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQKeyEvent", "", ty, key, modifiers, text, autorep, count]);
}

function NewQKeyEvent2(ty:Int, key:Int, modifiers:Int, nativeScanCode:Int, nativeVirtualKey:Int, nativeModifiers:Int, text:String, autorep:Bool,
		count:Int):QKeyEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQKeyEvent2", "", ty, key, modifiers, nativeScanCode, nativeVirtualKey, nativeModifiers, text, autorep, count
	]);
}

interface QKeySequence_ITF {
	public function QKeySequence_PTR():QKeySequence;
}

class QKeySequence extends Internal implements QKeySequence_ITF {
	public function new() {
		super();
	}

	public function QKeySequence_PTR():QKeySequence {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QKeySequence_PTR"]);
	};

	public function Count():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Count"]);
	};

	public function FromString(str:String, format:Int):QKeySequence {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromString", str, format]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function KeyBindings(key:Int):Array<QKeySequence> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyBindings", key]);
	};

	public function ListFromString(str:String, format:Int):Array<QKeySequence> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ListFromString", str, format]);
	};

	public function ListToString(list:Array<QKeySequence>, format:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ListToString", list, format]);
	};

	public function Matches(seq:QKeySequence_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Matches", seq]);
	};

	public function Mnemonic(text:String):QKeySequence {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mnemonic", text]);
	};

	public function Swap(other:QKeySequence_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ToString(format:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToString", format]);
	};

	public function DestroyQKeySequence() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQKeySequence"]);
	};
}

function NewQKeySequenceFromPointer(ptr:String):QKeySequence {
	final r = new QKeySequence();
	r.initFrom(ptr, "gui.QKeySequence");
	return r;
}

function NewQKeySequence():QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQKeySequence", ""]);
}

function NewQKeySequence2(key:String, format:Int):QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQKeySequence2", "", key, format]);
}

function NewQKeySequence3(k1:Int, k2:Int, k3:Int, k4:Int):QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQKeySequence3", "", k1, k2, k3, k4]);
}

function NewQKeySequence4(keysequence:QKeySequence_ITF):QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQKeySequence4", "", keysequence]);
}

function NewQKeySequence5(key:Int):QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQKeySequence5", "", key]);
}

function QKeySequence_FromString(str:String, format:Int):QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QKeySequence_FromString", "", str, format]);
}

function QKeySequence_KeyBindings(key:Int):Array<QKeySequence> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QKeySequence_KeyBindings", "", key]);
}

function QKeySequence_ListFromString(str:String, format:Int):Array<QKeySequence> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QKeySequence_ListFromString", "", str, format]);
}

function QKeySequence_ListToString(list:Array<QKeySequence>, format:Int):String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QKeySequence_ListToString", "", list, format]);
}

function QKeySequence_Mnemonic(text:String):QKeySequence {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QKeySequence_Mnemonic", "", text]);
}

interface QLinearGradient_ITF extends QGradient_ITF {
	public function QLinearGradient_PTR():QLinearGradient;
}

class QLinearGradient extends QGradient implements QLinearGradient_ITF {
	public function new() {
		super();
	}

	public function QLinearGradient_PTR():QLinearGradient {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QLinearGradient_PTR"]);
	};

	public function DestroyQLinearGradient() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQLinearGradient"]);
	};

	public function FinalStop():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FinalStop"]);
	};

	public function SetFinalStop(stop:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFinalStop", stop]);
	};

	public function SetFinalStop2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFinalStop2", x, y]);
	};

	public function SetStart(start:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStart", start]);
	};

	public function SetStart2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStart2", x, y]);
	};

	public function Start():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Start"]);
	};
}

function NewQLinearGradientFromPointer(ptr:String):QLinearGradient {
	final r = new QLinearGradient();
	r.initFrom(ptr, "gui.QLinearGradient");
	return r;
}

function NewQLinearGradient():QLinearGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQLinearGradient", ""]);
}

function NewQLinearGradient2(start:QPointF_ITF, finalStop:QPointF_ITF):QLinearGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQLinearGradient2", "", start, finalStop]);
}

function NewQLinearGradient3(x1:Float, y1:Float, x2:Float, y2:Float):QLinearGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQLinearGradient3", "", x1, y1, x2, y2]);
}

interface QMatrix_ITF {
	public function QMatrix_PTR():QMatrix;
}

class QMatrix extends Internal implements QMatrix_ITF {
	public function new() {
		super();
	}

	public function QMatrix_PTR():QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QMatrix_PTR"]);
	};

	public function DestroyQMatrix() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMatrix"]);
	};

	public function Determinant():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Determinant"]);
	};

	public function Dx():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Dx"]);
	};

	public function Dy():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Dy"]);
	};

	public function Inverted(invertible:Bool):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Inverted", invertible]);
	};

	public function IsIdentity():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsIdentity"]);
	};

	public function IsInvertible():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsInvertible"]);
	};

	public function M11():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M11"]);
	};

	public function M12():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M12"]);
	};

	public function M21():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M21"]);
	};

	public function M22():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M22"]);
	};

	public function Map(x:Float, y:Float, tx:Float, ty:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Map", x, y, tx, ty]);
	};

	public function Map2(x:Int, y:Int, tx:Int, ty:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Map2", x, y, tx, ty]);
	};

	public function Map3(point:QPoint_ITF):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map3", point]);
	};

	public function Map4(point:QPointF_ITF):QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map4", point]);
	};

	public function Map5(line:QLine_ITF):QLine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map5", line]);
	};

	public function Map6(line:QLineF_ITF):QLineF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map6", line]);
	};

	public function Map7(polygon:QPolygonF_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map7", polygon]);
	};

	public function Map8(polygon:QPolygon_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map8", polygon]);
	};

	public function Map9(region:QRegion_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map9", region]);
	};

	public function Map10(path:QPainterPath_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map10", path]);
	};

	public function MapRect(rectangle:QRectF_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRect", rectangle]);
	};

	public function MapRect2(rectangle:QRect_ITF):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRect2", rectangle]);
	};

	public function MapToPolygon(rectangle:QRect_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapToPolygon", rectangle]);
	};

	public function Reset() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Reset"]);
	};

	public function Rotate(degrees:Float):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rotate", degrees]);
	};

	public function Scale(sx:Float, sy:Float):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Scale", sx, sy]);
	};

	public function SetMatrix(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMatrix", m11, m12, m21, m22, dx, dy]);
	};

	public function Shear(sh:Float, sv:Float):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Shear", sh, sv]);
	};

	public function Translate(dx:Float, dy:Float):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translate", dx, dy]);
	};
}

function NewQMatrixFromPointer(ptr:String):QMatrix {
	final r = new QMatrix();
	r.initFrom(ptr, "gui.QMatrix");
	return r;
}

function NewQMatrix2():QMatrix {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMatrix2", ""]);
}

function NewQMatrix3(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float):QMatrix {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMatrix3", "", m11, m12, m21, m22, dx, dy]);
}

function NewQMatrix5(matrix:QMatrix_ITF):QMatrix {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMatrix5", "", matrix]);
}

interface QMatrix4x4_ITF {
	public function QMatrix4x4_PTR():QMatrix4x4;
}

class QMatrix4x4 extends Internal implements QMatrix4x4_ITF {
	public function new() {
		super();
	}

	public function QMatrix4x4_PTR():QMatrix4x4 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QMatrix4x4_PTR"]);
	};

	public function DestroyQMatrix4x4() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMatrix4x4"]);
	};

	public function Column(index:Int):QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Column", index]);
	};

	public function ConstData():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConstData"]);
	};

	public function CopyDataTo(values:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CopyDataTo", values]);
	};

	public function Data():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Data"]);
	};

	public function Data2():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Data2"]);
	};

	public function Determinant():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Determinant"]);
	};

	public function Fill(value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Fill", value]);
	};

	public function Frustum(left:Float, right:Float, bottom:Float, top:Float, nearPlane:Float, farPlane:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "Frustum", left, right, bottom, top, nearPlane, farPlane
		]);
	};

	public function Inverted(invertible:Bool):QMatrix4x4 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Inverted", invertible]);
	};

	public function IsAffine():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAffine"]);
	};

	public function IsIdentity():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsIdentity"]);
	};

	public function LookAt(eye:QVector3D_ITF, center:QVector3D_ITF, up:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LookAt", eye, center, up]);
	};

	public function Map(point:QPoint_ITF):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map", point]);
	};

	public function Map2(point:QPointF_ITF):QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map2", point]);
	};

	public function Map3(point:QVector3D_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map3", point]);
	};

	public function Map4(point:QVector4D_ITF):QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map4", point]);
	};

	public function MapRect(rect:QRect_ITF):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRect", rect]);
	};

	public function MapRect2(rect:QRectF_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRect2", rect]);
	};

	public function MapVector(vector:QVector3D_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapVector", vector]);
	};

	public function Optimize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Optimize"]);
	};

	public function Ortho(left:Float, right:Float, bottom:Float, top:Float, nearPlane:Float, farPlane:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "Ortho", left, right, bottom, top, nearPlane, farPlane
		]);
	};

	public function Ortho2(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Ortho2", rect]);
	};

	public function Ortho3(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Ortho3", rect]);
	};

	public function Perspective(verticalAngle:Float, aspectRatio:Float, nearPlane:Float, farPlane:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"Perspective",
			verticalAngle,
			aspectRatio,
			nearPlane,
			farPlane
		]);
	};

	public function Rotate(angle:Float, vector:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Rotate", angle, vector]);
	};

	public function Rotate2(angle:Float, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Rotate2", angle, x, y, z]);
	};

	public function Rotate3(quaternion:QQuaternion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Rotate3", quaternion]);
	};

	public function Row(index:Int):QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Row", index]);
	};

	public function Scale(vector:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scale", vector]);
	};

	public function Scale2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scale2", x, y]);
	};

	public function Scale3(x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scale3", x, y, z]);
	};

	public function Scale4(factor:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scale4", factor]);
	};

	public function SetColumn(index:Int, value:QVector4D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColumn", index, value]);
	};

	public function SetRow(index:Int, value:QVector4D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRow", index, value]);
	};

	public function SetToIdentity() {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetToIdentity"]);
	};

	public function ToAffine():QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToAffine"]);
	};

	public function ToTransform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToTransform"]);
	};

	public function ToTransform2(distanceToPlane:Float):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToTransform2", distanceToPlane]);
	};

	public function Translate(vector:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate", vector]);
	};

	public function Translate2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate2", x, y]);
	};

	public function Translate3(x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate3", x, y, z]);
	};

	public function Transposed():QMatrix4x4 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transposed"]);
	};

	public function Viewport(left:Float, bottom:Float, width:Float, height:Float, nearPlane:Float, farPlane:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "Viewport", left, bottom, width, height, nearPlane, farPlane
		]);
	};

	public function Viewport2(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Viewport2", rect]);
	};
}

function NewQMatrix4x4FromPointer(ptr:String):QMatrix4x4 {
	final r = new QMatrix4x4();
	r.initFrom(ptr, "gui.QMatrix4x4");
	return r;
}

function NewQMatrix4x4():QMatrix4x4 {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMatrix4x4", ""]);
}

function NewQMatrix4x43(values:Float):QMatrix4x4 {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMatrix4x43", "", values]);
}

function NewQMatrix4x44(m11:Float, m12:Float, m13:Float, m14:Float, m21:Float, m22:Float, m23:Float, m24:Float, m31:Float, m32:Float, m33:Float, m34:Float,
		m41:Float, m42:Float, m43:Float, m44:Float):QMatrix4x4 {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQMatrix4x44", "", m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44
	]);
}

function NewQMatrix4x46(matrix:QMatrix_ITF):QMatrix4x4 {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMatrix4x46", "", matrix]);
}

interface QMessageDialogOptions_ITF {
	public function QMessageDialogOptions_PTR():QMessageDialogOptions;
}

class QMessageDialogOptions extends Internal implements QMessageDialogOptions_ITF {
	public function new() {
		super();
	}

	public function QMessageDialogOptions_PTR():QMessageDialogOptions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QMessageDialogOptions_PTR"]);
	};

	public function DestroyQMessageDialogOptions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMessageDialogOptions"]);
	};
}

interface QMouseEvent_ITF extends QInputEvent_ITF {
	public function QMouseEvent_PTR():QMouseEvent;
}

class QMouseEvent extends QInputEvent implements QMouseEvent_ITF {
	public function new() {
		super();
	}

	public function QMouseEvent_PTR():QMouseEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QMouseEvent_PTR"]);
	};

	public function DestroyQMouseEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMouseEvent"]);
	};

	public function Button():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Button"]);
	};

	public function Buttons():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Buttons"]);
	};

	public function Flags():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Flags"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function GlobalX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalX"]);
	};

	public function GlobalY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalY"]);
	};

	public function LocalPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalPos"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function ScreenPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScreenPos"]);
	};

	public function Source():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Source"]);
	};

	public function WindowPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowPos"]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQMouseEventFromPointer(ptr:String):QMouseEvent {
	final r = new QMouseEvent();
	r.initFrom(ptr, "gui.QMouseEvent");
	return r;
}

function NewQMouseEvent(ty:Int, localPos:QPointF_ITF, button:Int, buttons:Int, modifiers:Int):QMouseEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMouseEvent", "", ty, localPos, button, buttons, modifiers]);
}

function NewQMouseEvent2(ty:Int, localPos:QPointF_ITF, screenPos:QPointF_ITF, button:Int, buttons:Int, modifiers:Int):QMouseEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQMouseEvent2", "", ty, localPos, screenPos, button, buttons, modifiers
	]);
}

function NewQMouseEvent3(ty:Int, localPos:QPointF_ITF, windowPos:QPointF_ITF, screenPos:QPointF_ITF, button:Int, buttons:Int, modifiers:Int):QMouseEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQMouseEvent3", "", ty, localPos, windowPos, screenPos, button, buttons, modifiers
	]);
}

function NewQMouseEvent4(ty:Int, localPos:QPointF_ITF, windowPos:QPointF_ITF, screenPos:QPointF_ITF, button:Int, buttons:Int, modifiers:Int,
		source:Int):QMouseEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQMouseEvent4", "", ty, localPos, windowPos, screenPos, button, buttons, modifiers, source
	]);
}

interface QMoveEvent_ITF extends QEvent_ITF {
	public function QMoveEvent_PTR():QMoveEvent;
}

class QMoveEvent extends QEvent implements QMoveEvent_ITF {
	public function new() {
		super();
	}

	public function QMoveEvent_PTR():QMoveEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QMoveEvent_PTR"]);
	};

	public function DestroyQMoveEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMoveEvent"]);
	};

	public function OldPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OldPos"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};
}

function NewQMoveEventFromPointer(ptr:String):QMoveEvent {
	final r = new QMoveEvent();
	r.initFrom(ptr, "gui.QMoveEvent");
	return r;
}

function NewQMoveEvent(pos:QPoint_ITF, oldPos:QPoint_ITF):QMoveEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMoveEvent", "", pos, oldPos]);
}

interface QMovie_ITF extends QObject_ITF {
	public function QMovie_PTR():QMovie;
}

class QMovie extends QObject implements QMovie_ITF {
	public function new() {
		super();
	}

	public function QMovie_PTR():QMovie {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QMovie_PTR"]);
	};

	public function BackgroundColor():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundColor"]);
	};

	public function CacheMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheMode"]);
	};

	public function CurrentFrameNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentFrameNumber"]);
	};

	public function CurrentImage():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentImage"]);
	};

	public function CurrentPixmap():QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentPixmap"]);
	};

	public function Device():QIODevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function ConnectError(f:(error:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectError", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectError() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectError"]);
	};

	public function Error(error:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Error", error]);
	};

	public function FileName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FileName"]);
	};

	public function ConnectFinished(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFinished", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFinished() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFinished"]);
	};

	public function Finished() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Finished"]);
	};

	public function Format():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function ConnectFrameChanged(f:(frameNumber:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFrameChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFrameChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFrameChanged"]);
	};

	public function FrameChanged(frameNumber:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FrameChanged", frameNumber]);
	};

	public function FrameCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FrameCount"]);
	};

	public function FrameRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FrameRect"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function JumpToFrame(frameNumber:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToFrame", frameNumber]);
	};

	public function ConnectJumpToNextFrame(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectJumpToNextFrame", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectJumpToNextFrame() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectJumpToNextFrame"]);
	};

	public function JumpToNextFrame():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToNextFrame"]);
	};

	public function JumpToNextFrameDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JumpToNextFrameDefault"]);
	};

	public function LastError():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastError"]);
	};

	public function LastErrorString():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastErrorString"]);
	};

	public function LoopCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoopCount"]);
	};

	public function NextFrameDelay():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NextFrameDelay"]);
	};

	public function ConnectResized(f:(size:QSize) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectResized", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectResized() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectResized"]);
	};

	public function Resized(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Resized", size]);
	};

	public function ScaledSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledSize"]);
	};

	public function SetBackgroundColor(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBackgroundColor", color]);
	};

	public function SetCacheMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCacheMode", mode]);
	};

	public function SetDevice(device:QIODevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevice", device]);
	};

	public function SetFileName(fileName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFileName", fileName]);
	};

	public function SetFormat(format:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function ConnectSetPaused(f:(paused:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetPaused", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetPaused() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetPaused"]);
	};

	public function SetPaused(paused:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPaused", paused]);
	};

	public function SetPausedDefault(paused:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPausedDefault", paused]);
	};

	public function SetScaledSize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScaledSize", size]);
	};

	public function ConnectSetSpeed(f:(percentSpeed:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetSpeed", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetSpeed() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetSpeed"]);
	};

	public function SetSpeed(percentSpeed:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSpeed", percentSpeed]);
	};

	public function SetSpeedDefault(percentSpeed:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSpeedDefault", percentSpeed]);
	};

	public function Speed():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Speed"]);
	};

	public function ConnectStart(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectStart", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectStart() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStart"]);
	};

	public function Start() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Start"]);
	};

	public function StartDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "StartDefault"]);
	};

	public function ConnectStarted(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectStarted", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectStarted() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStarted"]);
	};

	public function Started() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Started"]);
	};

	public function State():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "State"]);
	};

	public function ConnectStateChanged(f:(state:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectStateChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectStateChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStateChanged"]);
	};

	public function StateChanged(state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "StateChanged", state]);
	};

	public function ConnectStop(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectStop", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectStop() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStop"]);
	};

	public function Stop() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Stop"]);
	};

	public function StopDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "StopDefault"]);
	};

	public function SupportedFormats():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedFormats"]);
	};

	public function ConnectUpdated(f:(rect:QRect) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUpdated", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUpdated() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUpdated"]);
	};

	public function Updated(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Updated", rect]);
	};

	public function ConnectDestroyQMovie(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQMovie", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQMovie() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQMovie"]);
	};

	public function DestroyQMovie() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMovie"]);
	};

	public function DestroyQMovieDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQMovieDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQMovieFromPointer(ptr:String):QMovie {
	final r = new QMovie();
	r.initFrom(ptr, "gui.QMovie");
	return r;
}

function NewQMovie(parent:QObject_ITF):QMovie {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMovie", "", parent]);
}

function NewQMovie2(device:QIODevice_ITF, format:QByteArray_ITF, parent:QObject_ITF):QMovie {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMovie2", "", device, format, parent]);
}

function NewQMovie3(fileName:String, format:QByteArray_ITF, parent:QObject_ITF):QMovie {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQMovie3", "", fileName, format, parent]);
}

function QMovie_SupportedFormats():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QMovie_SupportedFormats", ""]);
}

interface QNativeGestureEvent_ITF extends QInputEvent_ITF {
	public function QNativeGestureEvent_PTR():QNativeGestureEvent;
}

class QNativeGestureEvent extends QInputEvent implements QNativeGestureEvent_ITF {
	public function new() {
		super();
	}

	public function QNativeGestureEvent_PTR():QNativeGestureEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QNativeGestureEvent_PTR"]);
	};

	public function DestroyQNativeGestureEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQNativeGestureEvent"]);
	};

	public function Device():QTouchDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function GestureType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GestureType"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function LocalPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LocalPos"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function ScreenPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScreenPos"]);
	};

	public function Value():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Value"]);
	};

	public function WindowPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowPos"]);
	};
}

function NewQNativeGestureEventFromPointer(ptr:String):QNativeGestureEvent {
	final r = new QNativeGestureEvent();
	r.initFrom(ptr, "gui.QNativeGestureEvent");
	return r;
}

function NewQNativeGestureEvent2(ty:Int, device:QTouchDevice_ITF, localPos:QPointF_ITF, windowPos:QPointF_ITF, screenPos:QPointF_ITF, realValue:Float,
		sequenceId:Int, intValue:Int):QNativeGestureEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQNativeGestureEvent2", "", ty, device, localPos, windowPos, screenPos, realValue, sequenceId, intValue
	]);
}

interface QOffscreenSurface_ITF extends QSurface_ITF {
	public function QOffscreenSurface_PTR():QOffscreenSurface;
	public function QObject_PTR():QObject;
}

class QOffscreenSurface extends QSurface implements QOffscreenSurface_ITF {
	public function QObject_PTR():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QObject_PTR"]);
	}

	public function new() {
		super();
	}

	public function QOffscreenSurface_PTR():QOffscreenSurface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOffscreenSurface_PTR"]);
	};

	public function Create() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public override function ConnectFormat(f:() -> QSurfaceFormat) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFormat", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectFormat() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFormat"]);
	};

	public override function Format():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function FormatDefault():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FormatDefault"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function NativeHandle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeHandle"]);
	};

	public function RequestedFormat():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RequestedFormat"]);
	};

	public function Screen():QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Screen"]);
	};

	public function ConnectScreenChanged(f:(screen:QScreen) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectScreenChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectScreenChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectScreenChanged"]);
	};

	public function ScreenChanged(screen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ScreenChanged", screen]);
	};

	public function SetFormat(format:QSurfaceFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetNativeHandle(handle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNativeHandle", handle]);
	};

	public function SetScreen(newScreen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScreen", newScreen]);
	};

	public override function ConnectSize(f:() -> QSize) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSize", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSize"]);
	};

	public override function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function SizeDefault():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizeDefault"]);
	};

	public override function ConnectSurfaceType(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSurfaceType", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectSurfaceType() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSurfaceType"]);
	};

	public override function SurfaceType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceType"]);
	};

	public function SurfaceTypeDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceTypeDefault"]);
	};

	public function ConnectDestroyQOffscreenSurface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOffscreenSurface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOffscreenSurface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOffscreenSurface"]);
	};

	public function DestroyQOffscreenSurface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOffscreenSurface"]);
	};

	public function DestroyQOffscreenSurfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOffscreenSurfaceDefault"]);
	};

	public function ChildEvent(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEvent", event]);
	};

	public function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public function ConnectNotify(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotify", sign]);
	};

	public function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public function CustomEvent(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEvent", event]);
	};

	public function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public function DeleteLater() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLater"]);
	};

	public function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public function DisconnectNotify(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotify", sign]);
	};

	public function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public function Event(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Event", e]);
	};

	public function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public function EventFilter(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilter", watched, event]);
	};

	public function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public function MetaObject():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObject"]);
	};

	public function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public function TimerEvent(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEvent", event]);
	};

	public function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOffscreenSurfaceFromPointer(ptr:String):QOffscreenSurface {
	final r = new QOffscreenSurface();
	r.initFrom(ptr, "gui.QOffscreenSurface");
	return r;
}

function NewQOffscreenSurface(targetScreen:QScreen_ITF, parent:QObject_ITF):QOffscreenSurface {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOffscreenSurface", "", targetScreen, parent]);
}

function NewQOffscreenSurface2(targetScreen:QScreen_ITF):QOffscreenSurface {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOffscreenSurface2", "", targetScreen]);
}

interface QOpenGLBuffer_ITF {
	public function QOpenGLBuffer_PTR():QOpenGLBuffer;
}

class QOpenGLBuffer extends Internal implements QOpenGLBuffer_ITF {
	public function new() {
		super();
	}

	public function QOpenGLBuffer_PTR():QOpenGLBuffer {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLBuffer_PTR"]);
	};

	public function Allocate(data:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Allocate", data, count]);
	};

	public function Allocate2(count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Allocate2", count]);
	};

	public function Bind():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bind"]);
	};

	public function BufferId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BufferId"]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function IsCreated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCreated"]);
	};

	public function Map(access:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map", access]);
	};

	public function MapRange(offset:Int, count:Int, access:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRange", offset, count, access]);
	};

	public function Read(offset:Int, data:Int, count:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Read", offset, data, count]);
	};

	public function Release() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function Release2(ty:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release2", ty]);
	};

	public function SetUsagePattern(value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUsagePattern", value]);
	};

	public function Size():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function Unmap():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Unmap"]);
	};

	public function UsagePattern():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UsagePattern"]);
	};

	public function Write(offset:Int, data:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Write", offset, data, count]);
	};

	public function DestroyQOpenGLBuffer() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLBuffer"]);
	};
}

function NewQOpenGLBufferFromPointer(ptr:String):QOpenGLBuffer {
	final r = new QOpenGLBuffer();
	r.initFrom(ptr, "gui.QOpenGLBuffer");
	return r;
}

function NewQOpenGLBuffer():QOpenGLBuffer {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLBuffer", ""]);
}

function NewQOpenGLBuffer2(ty:Int):QOpenGLBuffer {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLBuffer2", "", ty]);
}

function NewQOpenGLBuffer3(other:QOpenGLBuffer_ITF):QOpenGLBuffer {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLBuffer3", "", other]);
}

function QOpenGLBuffer_Release2(ty:Int) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QOpenGLBuffer_Release2", "", ty]);
}

interface QOpenGLContext_ITF extends QObject_ITF {
	public function QOpenGLContext_PTR():QOpenGLContext;
}

class QOpenGLContext extends QObject implements QOpenGLContext_ITF {
	public function new() {
		super();
	}

	public function QOpenGLContext_PTR():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLContext_PTR"]);
	};

	public function ConnectAboutToBeDestroyed(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectAboutToBeDestroyed",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectAboutToBeDestroyed() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAboutToBeDestroyed"]);
	};

	public function AboutToBeDestroyed() {
		Internal.callLocalFunction(["", Pointer(), ___className, "AboutToBeDestroyed"]);
	};

	public function AreSharing(first:QOpenGLContext_ITF, second:QOpenGLContext_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AreSharing", first, second]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function CurrentContext():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentContext"]);
	};

	public function DefaultFramebufferObject():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultFramebufferObject"]);
	};

	public function DoneCurrent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DoneCurrent"]);
	};

	public function ExtraFunctions():QOpenGLExtraFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ExtraFunctions"]);
	};

	public function Format():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function Functions():QOpenGLFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Functions"]);
	};

	public function GetProcAddress(procName:QByteArray_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GetProcAddress", procName]);
	};

	public function GetProcAddress2(procName:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GetProcAddress2", procName]);
	};

	public function GlobalShareContext():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalShareContext"]);
	};

	public function HasExtension(extensi:QByteArray_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasExtension", extensi]);
	};

	public function IsOpenGLES():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsOpenGLES"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function MakeCurrent(surface:QSurface_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MakeCurrent", surface]);
	};

	public function NativeHandle():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeHandle"]);
	};

	public function OpenGLModuleHandle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OpenGLModuleHandle"]);
	};

	public function OpenGLModuleType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OpenGLModuleType"]);
	};

	public function Screen():QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Screen"]);
	};

	public function SetFormat(format:QSurfaceFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetNativeHandle(handle:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNativeHandle", handle]);
	};

	public function SetScreen(screen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScreen", screen]);
	};

	public function SetShareContext(shareContext:QOpenGLContext_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetShareContext", shareContext]);
	};

	public function ShareContext():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShareContext"]);
	};

	public function ShareGroup():QOpenGLContextGroup {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShareGroup"]);
	};

	public function SupportsThreadedOpenGL():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsThreadedOpenGL"]);
	};

	public function Surface():QSurface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Surface"]);
	};

	public function SwapBuffers(surface:QSurface_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SwapBuffers", surface]);
	};

	public function VersionFunctions(versionProfile:QOpenGLVersionProfile_ITF):QAbstractOpenGLFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VersionFunctions", versionProfile]);
	};

	public function ConnectDestroyQOpenGLContext(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLContext",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLContext() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLContext"]);
	};

	public function DestroyQOpenGLContext() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLContext"]);
	};

	public function DestroyQOpenGLContextDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLContextDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLContextFromPointer(ptr:String):QOpenGLContext {
	final r = new QOpenGLContext();
	r.initFrom(ptr, "gui.QOpenGLContext");
	return r;
}

function NewQOpenGLContext(parent:QObject_ITF):QOpenGLContext {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLContext", "", parent]);
}

function QOpenGLContext_AreSharing(first:QOpenGLContext_ITF, second:QOpenGLContext_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContext_AreSharing", "", first, second]);
}

function QOpenGLContext_CurrentContext():QOpenGLContext {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContext_CurrentContext", ""]);
}

function QOpenGLContext_GlobalShareContext():QOpenGLContext {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContext_GlobalShareContext", ""]);
}

function QOpenGLContext_OpenGLModuleHandle():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContext_OpenGLModuleHandle", ""]);
}

function QOpenGLContext_OpenGLModuleType():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContext_OpenGLModuleType", ""]);
}

function QOpenGLContext_SupportsThreadedOpenGL():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContext_SupportsThreadedOpenGL", ""]);
}

interface QOpenGLContextGroup_ITF extends QObject_ITF {
	public function QOpenGLContextGroup_PTR():QOpenGLContextGroup;
}

class QOpenGLContextGroup extends QObject implements QOpenGLContextGroup_ITF {
	public function new() {
		super();
	}

	public function QOpenGLContextGroup_PTR():QOpenGLContextGroup {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLContextGroup_PTR"]);
	};

	public function CurrentContextGroup():QOpenGLContextGroup {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentContextGroup"]);
	};

	public function Shares():Array<QOpenGLContext> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Shares"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLContextGroupFromPointer(ptr:String):QOpenGLContextGroup {
	final r = new QOpenGLContextGroup();
	r.initFrom(ptr, "gui.QOpenGLContextGroup");
	return r;
}

function QOpenGLContextGroup_CurrentContextGroup():QOpenGLContextGroup {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLContextGroup_CurrentContextGroup", ""]);
}

interface QOpenGLDebugLogger_ITF extends QObject_ITF {
	public function QOpenGLDebugLogger_PTR():QOpenGLDebugLogger;
}

class QOpenGLDebugLogger extends QObject implements QOpenGLDebugLogger_ITF {
	public function new() {
		super();
	}

	public function QOpenGLDebugLogger_PTR():QOpenGLDebugLogger {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLDebugLogger_PTR"]);
	};

	public function DisableMessages(sources:Int, types:Int, severities:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisableMessages", sources, types, severities]);
	};

	public function DisableMessages2(ids:Array<Int>, sources:Int, types:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisableMessages2", ids, sources, types]);
	};

	public function EnableMessages(sources:Int, types:Int, severities:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EnableMessages", sources, types, severities]);
	};

	public function EnableMessages2(ids:Array<Int>, sources:Int, types:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EnableMessages2", ids, sources, types]);
	};

	public function Initialize():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Initialize"]);
	};

	public function IsLogging():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsLogging"]);
	};

	public function ConnectLogMessage(f:(debugMessage:QOpenGLDebugMessage) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLogMessage", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLogMessage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLogMessage"]);
	};

	public function LogMessage(debugMessage:QOpenGLDebugMessage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LogMessage", debugMessage]);
	};

	public function LogMessageDefault(debugMessage:QOpenGLDebugMessage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LogMessageDefault", debugMessage]);
	};

	public function LoggedMessages():Array<QOpenGLDebugMessage> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoggedMessages"]);
	};

	public function LoggingMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoggingMode"]);
	};

	public function MaximumMessageLength():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumMessageLength"]);
	};

	public function ConnectMessageLogged(f:(debugMessage:QOpenGLDebugMessage) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMessageLogged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMessageLogged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMessageLogged"]);
	};

	public function MessageLogged(debugMessage:QOpenGLDebugMessage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MessageLogged", debugMessage]);
	};

	public function PopGroup() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PopGroup"]);
	};

	public function PushGroup(name:String, id:Int, source:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PushGroup", name, id, source]);
	};

	public function ConnectStartLogging(f:(loggingMode:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectStartLogging", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectStartLogging() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStartLogging"]);
	};

	public function StartLogging(loggingMode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "StartLogging", loggingMode]);
	};

	public function StartLoggingDefault(loggingMode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "StartLoggingDefault", loggingMode]);
	};

	public function ConnectStopLogging(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectStopLogging", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectStopLogging() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStopLogging"]);
	};

	public function StopLogging() {
		Internal.callLocalFunction(["", Pointer(), ___className, "StopLogging"]);
	};

	public function StopLoggingDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "StopLoggingDefault"]);
	};

	public function ConnectDestroyQOpenGLDebugLogger(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLDebugLogger",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLDebugLogger() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLDebugLogger"]);
	};

	public function DestroyQOpenGLDebugLogger() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLDebugLogger"]);
	};

	public function DestroyQOpenGLDebugLoggerDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLDebugLoggerDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLDebugLoggerFromPointer(ptr:String):QOpenGLDebugLogger {
	final r = new QOpenGLDebugLogger();
	r.initFrom(ptr, "gui.QOpenGLDebugLogger");
	return r;
}

function NewQOpenGLDebugLogger(parent:QObject_ITF):QOpenGLDebugLogger {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLDebugLogger", "", parent]);
}

interface QOpenGLDebugMessage_ITF {
	public function QOpenGLDebugMessage_PTR():QOpenGLDebugMessage;
}

class QOpenGLDebugMessage extends Internal implements QOpenGLDebugMessage_ITF {
	public function new() {
		super();
	}

	public function QOpenGLDebugMessage_PTR():QOpenGLDebugMessage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLDebugMessage_PTR"]);
	};

	public function CreateApplicationMessage(text:String, id:Int, severity:Int, ty:Int):QOpenGLDebugMessage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateApplicationMessage", text, id, severity, ty]);
	};

	public function CreateThirdPartyMessage(text:String, id:Int, severity:Int, ty:Int):QOpenGLDebugMessage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateThirdPartyMessage", text, id, severity, ty]);
	};

	public function Id():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Id"]);
	};

	public function Message():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Message"]);
	};

	public function Severity():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Severity"]);
	};

	public function Source():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Source"]);
	};

	public function Swap(debugMessage:QOpenGLDebugMessage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", debugMessage]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function DestroyQOpenGLDebugMessage() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLDebugMessage"]);
	};
}

function NewQOpenGLDebugMessageFromPointer(ptr:String):QOpenGLDebugMessage {
	final r = new QOpenGLDebugMessage();
	r.initFrom(ptr, "gui.QOpenGLDebugMessage");
	return r;
}

function NewQOpenGLDebugMessage():QOpenGLDebugMessage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLDebugMessage", ""]);
}

function NewQOpenGLDebugMessage2(debugMessage:QOpenGLDebugMessage_ITF):QOpenGLDebugMessage {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLDebugMessage2", "", debugMessage]);
}

function QOpenGLDebugMessage_CreateApplicationMessage(text:String, id:Int, severity:Int, ty:Int):QOpenGLDebugMessage {
	Gui.initModule();
	return Internal.callLocalFunction([
		"",
		"",
		"gui.QOpenGLDebugMessage_CreateApplicationMessage",
		"",
		text,
		id,
		severity,
		ty
	]);
}

function QOpenGLDebugMessage_CreateThirdPartyMessage(text:String, id:Int, severity:Int, ty:Int):QOpenGLDebugMessage {
	Gui.initModule();
	return Internal.callLocalFunction([
		"",
		"",
		"gui.QOpenGLDebugMessage_CreateThirdPartyMessage",
		"",
		text,
		id,
		severity,
		ty
	]);
}

interface QOpenGLExtraFunctions_ITF extends QOpenGLFunctions_ITF {
	public function QOpenGLExtraFunctions_PTR():QOpenGLExtraFunctions;
}

class QOpenGLExtraFunctions extends QOpenGLFunctions implements QOpenGLExtraFunctions_ITF {
	public function new() {
		super();
	}

	public function QOpenGLExtraFunctions_PTR():QOpenGLExtraFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLExtraFunctions_PTR"]);
	};

	public function DestroyQOpenGLExtraFunctions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLExtraFunctions"]);
	};

	public function GlActiveShaderProgram(pipeline:Int, program:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlActiveShaderProgram", pipeline, program]);
	};

	public function GlBeginQuery(target:Int, id:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBeginQuery", target, id]);
	};

	public function GlBeginTransformFeedback(primitiveMode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBeginTransformFeedback", primitiveMode]);
	};

	public function GlBindBufferBase(target:Int, index:Int, buffer:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindBufferBase", target, index, buffer]);
	};

	public function GlBindImageTexture(unit:Int, texture:Int, level:Int, layered:Bool, layer:Int, access:Int, format:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlBindImageTexture", unit, texture, level, layered, layer, access, format
		]);
	};

	public function GlBindProgramPipeline(pipeline:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindProgramPipeline", pipeline]);
	};

	public function GlBindSampler(unit:Int, sampler:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindSampler", unit, sampler]);
	};

	public function GlBindTransformFeedback(target:Int, id:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindTransformFeedback", target, id]);
	};

	public function GlBindVertexArray(array:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindVertexArray", array]);
	};

	public function GlBlendBarrier() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendBarrier"]);
	};

	public function GlBlendEquationSeparatei(buf:Int, modeRGB:Int, modeAlpha:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendEquationSeparatei", buf, modeRGB, modeAlpha]);
	};

	public function GlBlendEquationi(buf:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendEquationi", buf, mode]);
	};

	public function GlBlendFuncSeparatei(buf:Int, srcRGB:Int, dstRGB:Int, srcAlpha:Int, dstAlpha:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlBlendFuncSeparatei",
			buf,
			srcRGB,
			dstRGB,
			srcAlpha,
			dstAlpha
		]);
	};

	public function GlBlendFunci(buf:Int, src:Int, dst:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendFunci", buf, src, dst]);
	};

	public function GlBlitFramebuffer(srcX0:Int, srcY0:Int, srcX1:Int, srcY1:Int, dstX0:Int, dstY0:Int, dstX1:Int, dstY1:Int, mask:Int, filter:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlBlitFramebuffer", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter
		]);
	};

	public function GlClearBufferfi(buffer:Int, drawbuffer:Int, depth:Float, stencil:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlClearBufferfi",
			buffer,
			drawbuffer,
			depth,
			stencil
		]);
	};

	public function GlClearBufferfv(buffer:Int, drawbuffer:Int, value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClearBufferfv", buffer, drawbuffer, value]);
	};

	public function GlClearBufferiv(buffer:Int, drawbuffer:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClearBufferiv", buffer, drawbuffer, value]);
	};

	public function GlClearBufferuiv(buffer:Int, drawbuffer:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClearBufferuiv", buffer, drawbuffer, value]);
	};

	public function GlColorMaski(index:Int, r:Bool, g:Bool, b:Bool, a:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlColorMaski", index, r, g, b, a]);
	};

	public function GlCompressedTexImage3D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, depth:Int, border:Int, imageSize:Int, data:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCompressedTexImage3D", target, level, internalformat, width, height, depth, border, imageSize, data
		]);
	};

	public function GlCompressedTexSubImage3D(target:Int, level:Int, xoffset:Int, yoffset:Int, zoffset:Int, width:Int, height:Int, depth:Int, format:Int,
			imageSize:Int, data:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCompressedTexSubImage3D", target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data
		]);
	};

	public function GlCopyImageSubData(srcName:Int, srcTarget:Int, srcLevel:Int, srcX:Int, srcY:Int, srcZ:Int, dstName:Int, dstTarget:Int, dstLevel:Int,
			dstX:Int, dstY:Int, dstZ:Int, srcWidth:Int, srcHeight:Int, srcDepth:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCopyImageSubData", srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ,
			srcWidth, srcHeight, srcDepth
		]);
	};

	public function GlCopyTexSubImage3D(target:Int, level:Int, xoffset:Int, yoffset:Int, zoffset:Int, x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCopyTexSubImage3D", target, level, xoffset, yoffset, zoffset, x, y, width, height
		]);
	};

	public function GlDebugMessageControl(source:Int, ty:Int, severity:Int, count:Int, ids:Int, enabled:Bool) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlDebugMessageControl", source, ty, severity, count, ids, enabled
		]);
	};

	public function GlDeleteProgramPipelines(n:Int, pipelines:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteProgramPipelines", n, pipelines]);
	};

	public function GlDeleteQueries(n:Int, ids:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteQueries", n, ids]);
	};

	public function GlDeleteSamplers(count:Int, samplers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteSamplers", count, samplers]);
	};

	public function GlDeleteTransformFeedbacks(n:Int, ids:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteTransformFeedbacks", n, ids]);
	};

	public function GlDeleteVertexArrays(n:Int, arrays:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteVertexArrays", n, arrays]);
	};

	public function GlDisablei(target:Int, index:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDisablei", target, index]);
	};

	public function GlDispatchCompute(num_groups_x:Int, num_groups_y:Int, num_groups_z:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlDispatchCompute",
			num_groups_x,
			num_groups_y,
			num_groups_z
		]);
	};

	public function GlDrawArraysIndirect(mode:Int, indirect:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDrawArraysIndirect", mode, indirect]);
	};

	public function GlDrawArraysInstanced(mode:Int, first:Int, count:Int, instancecount:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlDrawArraysInstanced",
			mode,
			first,
			count,
			instancecount
		]);
	};

	public function GlDrawBuffers(n:Int, bufs:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDrawBuffers", n, bufs]);
	};

	public function GlDrawElementsBaseVertex(mode:Int, count:Int, ty:Int, indices:Int, basevertex:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlDrawElementsBaseVertex",
			mode,
			count,
			ty,
			indices,
			basevertex
		]);
	};

	public function GlDrawElementsIndirect(mode:Int, ty:Int, indirect:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDrawElementsIndirect", mode, ty, indirect]);
	};

	public function GlDrawElementsInstanced(mode:Int, count:Int, ty:Int, indices:Int, instancecount:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlDrawElementsInstanced",
			mode,
			count,
			ty,
			indices,
			instancecount
		]);
	};

	public function GlDrawElementsInstancedBaseVertex(mode:Int, count:Int, ty:Int, indices:Int, instancecount:Int, basevertex:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlDrawElementsInstancedBaseVertex", mode, count, ty, indices, instancecount, basevertex
		]);
	};

	public function GlDrawRangeElements(mode:Int, start:Int, end:Int, count:Int, ty:Int, indices:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlDrawRangeElements", mode, start, end, count, ty, indices
		]);
	};

	public function GlDrawRangeElementsBaseVertex(mode:Int, start:Int, end:Int, count:Int, ty:Int, indices:Int, basevertex:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlDrawRangeElementsBaseVertex", mode, start, end, count, ty, indices, basevertex
		]);
	};

	public function GlEnablei(target:Int, index:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlEnablei", target, index]);
	};

	public function GlEndQuery(target:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlEndQuery", target]);
	};

	public function GlEndTransformFeedback() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlEndTransformFeedback"]);
	};

	public function GlFramebufferParameteri(target:Int, pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlFramebufferParameteri", target, pname, param]);
	};

	public function GlFramebufferTexture(target:Int, attachment:Int, texture:Int, level:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlFramebufferTexture",
			target,
			attachment,
			texture,
			level
		]);
	};

	public function GlFramebufferTextureLayer(target:Int, attachment:Int, texture:Int, level:Int, layer:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlFramebufferTextureLayer",
			target,
			attachment,
			texture,
			level,
			layer
		]);
	};

	public function GlGenProgramPipelines(n:Int, pipelines:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenProgramPipelines", n, pipelines]);
	};

	public function GlGenQueries(n:Int, ids:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenQueries", n, ids]);
	};

	public function GlGenSamplers(count:Int, samplers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenSamplers", count, samplers]);
	};

	public function GlGenTransformFeedbacks(n:Int, ids:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenTransformFeedbacks", n, ids]);
	};

	public function GlGenVertexArrays(n:Int, arrays:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenVertexArrays", n, arrays]);
	};

	public function GlGetActiveUniformBlockiv(program:Int, uniformBlockIndex:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetActiveUniformBlockiv",
			program,
			uniformBlockIndex,
			pname,
			params
		]);
	};

	public function GlGetActiveUniformsiv(program:Int, uniformCount:Int, uniformIndices:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetActiveUniformsiv",
			program,
			uniformCount,
			uniformIndices,
			pname,
			params
		]);
	};

	public function GlGetBooleani_v(target:Int, index:Int, data:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetBooleani_v", target, index, data]);
	};

	public function GlGetBufferPointerv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetBufferPointerv", target, pname, params]);
	};

	public function GlGetFramebufferParameteriv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetFramebufferParameteriv",
			target,
			pname,
			params
		]);
	};

	public function GlGetGraphicsResetStatus():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlGetGraphicsResetStatus"]);
	};

	public function GlGetIntegeri_v(target:Int, index:Int, data:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetIntegeri_v", target, index, data]);
	};

	public function GlGetInternalformativ(target:Int, internalformat:Int, pname:Int, bufSize:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetInternalformativ",
			target,
			internalformat,
			pname,
			bufSize,
			params
		]);
	};

	public function GlGetMultisamplefv(pname:Int, index:Int, val:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetMultisamplefv", pname, index, val]);
	};

	public function GlGetPointerv(pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetPointerv", pname, params]);
	};

	public function GlGetProgramBinary(program:Int, bufSize:Int, length:Int, binaryFormat:Int, binary:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetProgramBinary",
			program,
			bufSize,
			length,
			binaryFormat,
			binary
		]);
	};

	public function GlGetProgramInterfaceiv(program:Int, programInterface:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetProgramInterfaceiv",
			program,
			programInterface,
			pname,
			params
		]);
	};

	public function GlGetProgramPipelineiv(pipeline:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetProgramPipelineiv", pipeline, pname, params]);
	};

	public function GlGetProgramResourceiv(program:Int, programInterface:Int, index:Int, propCount:Int, props:Int, bufSize:Int, length:Int, params:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlGetProgramResourceiv", program, programInterface, index, propCount, props, bufSize, length, params
		]);
	};

	public function GlGetQueryObjectuiv(id:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetQueryObjectuiv", id, pname, params]);
	};

	public function GlGetQueryiv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetQueryiv", target, pname, params]);
	};

	public function GlGetSamplerParameterIiv(sampler:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetSamplerParameterIiv", sampler, pname, params]);
	};

	public function GlGetSamplerParameterIuiv(sampler:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetSamplerParameterIuiv", sampler, pname, params]);
	};

	public function GlGetSamplerParameterfv(sampler:Int, pname:Int, params:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetSamplerParameterfv", sampler, pname, params]);
	};

	public function GlGetSamplerParameteriv(sampler:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetSamplerParameteriv", sampler, pname, params]);
	};

	public function GlGetStringi(name:Int, index:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlGetStringi", name, index]);
	};

	public function GlGetTexLevelParameterfv(target:Int, level:Int, pname:Int, params:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetTexLevelParameterfv",
			target,
			level,
			pname,
			params
		]);
	};

	public function GlGetTexLevelParameteriv(target:Int, level:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetTexLevelParameteriv",
			target,
			level,
			pname,
			params
		]);
	};

	public function GlGetTexParameterIiv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetTexParameterIiv", target, pname, params]);
	};

	public function GlGetTexParameterIuiv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetTexParameterIuiv", target, pname, params]);
	};

	public function GlGetUniformuiv(program:Int, location:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetUniformuiv", program, location, params]);
	};

	public function GlGetVertexAttribIiv(index:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetVertexAttribIiv", index, pname, params]);
	};

	public function GlGetVertexAttribIuiv(index:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetVertexAttribIuiv", index, pname, params]);
	};

	public function GlGetnUniformfv(program:Int, location:Int, bufSize:Int, params:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetnUniformfv",
			program,
			location,
			bufSize,
			params
		]);
	};

	public function GlGetnUniformiv(program:Int, location:Int, bufSize:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetnUniformiv",
			program,
			location,
			bufSize,
			params
		]);
	};

	public function GlGetnUniformuiv(program:Int, location:Int, bufSize:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetnUniformuiv",
			program,
			location,
			bufSize,
			params
		]);
	};

	public function GlInvalidateFramebuffer(target:Int, numAttachments:Int, attachments:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlInvalidateFramebuffer",
			target,
			numAttachments,
			attachments
		]);
	};

	public function GlInvalidateSubFramebuffer(target:Int, numAttachments:Int, attachments:Int, x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlInvalidateSubFramebuffer", target, numAttachments, attachments, x, y, width, height
		]);
	};

	public function GlIsEnabledi(target:Int, index:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsEnabledi", target, index]);
	};

	public function GlIsProgramPipeline(pipeline:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsProgramPipeline", pipeline]);
	};

	public function GlIsQuery(id:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsQuery", id]);
	};

	public function GlIsSampler(sampler:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsSampler", sampler]);
	};

	public function GlIsTransformFeedback(id:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsTransformFeedback", id]);
	};

	public function GlIsVertexArray(array:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsVertexArray", array]);
	};

	public function GlMemoryBarrier(barriers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlMemoryBarrier", barriers]);
	};

	public function GlMemoryBarrierByRegion(barriers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlMemoryBarrierByRegion", barriers]);
	};

	public function GlMinSampleShading(value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlMinSampleShading", value]);
	};

	public function GlPatchParameteri(pname:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlPatchParameteri", pname, value]);
	};

	public function GlPauseTransformFeedback() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlPauseTransformFeedback"]);
	};

	public function GlPopDebugGroup() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlPopDebugGroup"]);
	};

	public function GlPrimitiveBoundingBox(minX:Float, minY:Float, minZ:Float, minW:Float, maxX:Float, maxY:Float, maxZ:Float, maxW:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlPrimitiveBoundingBox", minX, minY, minZ, minW, maxX, maxY, maxZ, maxW
		]);
	};

	public function GlProgramBinary(program:Int, binaryFormat:Int, binary:Int, length:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramBinary",
			program,
			binaryFormat,
			binary,
			length
		]);
	};

	public function GlProgramParameteri(program:Int, pname:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramParameteri", program, pname, value]);
	};

	public function GlProgramUniform1f(program:Int, location:Int, v0:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform1f", program, location, v0]);
	};

	public function GlProgramUniform1fv(program:Int, location:Int, count:Int, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform1fv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform1i(program:Int, location:Int, v0:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform1i", program, location, v0]);
	};

	public function GlProgramUniform1iv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform1iv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform1ui(program:Int, location:Int, v0:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform1ui", program, location, v0]);
	};

	public function GlProgramUniform1uiv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform1uiv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform2f(program:Int, location:Int, v0:Float, v1:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform2f", program, location, v0, v1]);
	};

	public function GlProgramUniform2fv(program:Int, location:Int, count:Int, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform2fv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform2i(program:Int, location:Int, v0:Int, v1:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform2i", program, location, v0, v1]);
	};

	public function GlProgramUniform2iv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform2iv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform2ui(program:Int, location:Int, v0:Int, v1:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform2ui", program, location, v0, v1]);
	};

	public function GlProgramUniform2uiv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform2uiv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform3f(program:Int, location:Int, v0:Float, v1:Float, v2:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform3f", program, location, v0, v1, v2]);
	};

	public function GlProgramUniform3fv(program:Int, location:Int, count:Int, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform3fv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform3i(program:Int, location:Int, v0:Int, v1:Int, v2:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlProgramUniform3i", program, location, v0, v1, v2]);
	};

	public function GlProgramUniform3iv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform3iv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform3ui(program:Int, location:Int, v0:Int, v1:Int, v2:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform3ui",
			program,
			location,
			v0,
			v1,
			v2
		]);
	};

	public function GlProgramUniform3uiv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform3uiv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform4f(program:Int, location:Int, v0:Float, v1:Float, v2:Float, v3:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlProgramUniform4f", program, location, v0, v1, v2, v3
		]);
	};

	public function GlProgramUniform4fv(program:Int, location:Int, count:Int, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform4fv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform4i(program:Int, location:Int, v0:Int, v1:Int, v2:Int, v3:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlProgramUniform4i", program, location, v0, v1, v2, v3
		]);
	};

	public function GlProgramUniform4iv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform4iv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniform4ui(program:Int, location:Int, v0:Int, v1:Int, v2:Int, v3:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlProgramUniform4ui", program, location, v0, v1, v2, v3
		]);
	};

	public function GlProgramUniform4uiv(program:Int, location:Int, count:Int, value:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniform4uiv",
			program,
			location,
			count,
			value
		]);
	};

	public function GlProgramUniformMatrix2fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix2fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix2x3fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix2x3fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix2x4fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix2x4fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix3fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix3fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix3x2fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix3x2fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix3x4fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix3x4fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix4fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix4fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix4x2fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix4x2fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlProgramUniformMatrix4x3fv(program:Int, location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlProgramUniformMatrix4x3fv",
			program,
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlReadBuffer(src:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlReadBuffer", src]);
	};

	public function GlReadnPixels(x:Int, y:Int, width:Int, height:Int, format:Int, ty:Int, bufSize:Int, data:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlReadnPixels", x, y, width, height, format, ty, bufSize, data
		]);
	};

	public function GlRenderbufferStorageMultisample(target:Int, samples:Int, internalformat:Int, width:Int, height:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlRenderbufferStorageMultisample",
			target,
			samples,
			internalformat,
			width,
			height
		]);
	};

	public function GlResumeTransformFeedback() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlResumeTransformFeedback"]);
	};

	public function GlSampleMaski(maskNumber:Int, mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSampleMaski", maskNumber, mask]);
	};

	public function GlSamplerParameterIiv(sampler:Int, pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSamplerParameterIiv", sampler, pname, param]);
	};

	public function GlSamplerParameterIuiv(sampler:Int, pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSamplerParameterIuiv", sampler, pname, param]);
	};

	public function GlSamplerParameterf(sampler:Int, pname:Int, param:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSamplerParameterf", sampler, pname, param]);
	};

	public function GlSamplerParameterfv(sampler:Int, pname:Int, param:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSamplerParameterfv", sampler, pname, param]);
	};

	public function GlSamplerParameteri(sampler:Int, pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSamplerParameteri", sampler, pname, param]);
	};

	public function GlSamplerParameteriv(sampler:Int, pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSamplerParameteriv", sampler, pname, param]);
	};

	public function GlTexBuffer(target:Int, internalformat:Int, buffer:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexBuffer", target, internalformat, buffer]);
	};

	public function GlTexImage3D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, depth:Int, border:Int, format:Int, ty:Int, pixels:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexImage3D", target, level, internalformat, width, height, depth, border, format, ty, pixels
		]);
	};

	public function GlTexParameterIiv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexParameterIiv", target, pname, params]);
	};

	public function GlTexParameterIuiv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexParameterIuiv", target, pname, params]);
	};

	public function GlTexStorage2D(target:Int, levels:Int, internalformat:Int, width:Int, height:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlTexStorage2D",
			target,
			levels,
			internalformat,
			width,
			height
		]);
	};

	public function GlTexStorage2DMultisample(target:Int, samples:Int, internalformat:Int, width:Int, height:Int, fixedsamplelocations:Bool) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexStorage2DMultisample", target, samples, internalformat, width, height, fixedsamplelocations
		]);
	};

	public function GlTexStorage3D(target:Int, levels:Int, internalformat:Int, width:Int, height:Int, depth:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexStorage3D", target, levels, internalformat, width, height, depth
		]);
	};

	public function GlTexStorage3DMultisample(target:Int, samples:Int, internalformat:Int, width:Int, height:Int, depth:Int, fixedsamplelocations:Bool) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexStorage3DMultisample", target, samples, internalformat, width, height, depth, fixedsamplelocations
		]);
	};

	public function GlTexSubImage3D(target:Int, level:Int, xoffset:Int, yoffset:Int, zoffset:Int, width:Int, height:Int, depth:Int, format:Int, ty:Int,
			pixels:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexSubImage3D", target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, pixels
		]);
	};

	public function GlUniform1ui(location:Int, v0:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform1ui", location, v0]);
	};

	public function GlUniform1uiv(location:Int, count:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform1uiv", location, count, value]);
	};

	public function GlUniform2ui(location:Int, v0:Int, v1:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform2ui", location, v0, v1]);
	};

	public function GlUniform2uiv(location:Int, count:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform2uiv", location, count, value]);
	};

	public function GlUniform3ui(location:Int, v0:Int, v1:Int, v2:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform3ui", location, v0, v1, v2]);
	};

	public function GlUniform3uiv(location:Int, count:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform3uiv", location, count, value]);
	};

	public function GlUniform4ui(location:Int, v0:Int, v1:Int, v2:Int, v3:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform4ui", location, v0, v1, v2, v3]);
	};

	public function GlUniform4uiv(location:Int, count:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform4uiv", location, count, value]);
	};

	public function GlUniformBlockBinding(program:Int, uniformBlockIndex:Int, uniformBlockBinding:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformBlockBinding",
			program,
			uniformBlockIndex,
			uniformBlockBinding
		]);
	};

	public function GlUniformMatrix2x3fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix2x3fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix2x4fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix2x4fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix3x2fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix3x2fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix3x4fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix3x4fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix4x2fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix4x2fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix4x3fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix4x3fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUnmapBuffer(target:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlUnmapBuffer", target]);
	};

	public function GlUseProgramStages(pipeline:Int, stages:Int, program:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUseProgramStages", pipeline, stages, program]);
	};

	public function GlValidateProgramPipeline(pipeline:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlValidateProgramPipeline", pipeline]);
	};

	public function GlVertexAttribBinding(attribindex:Int, bindingindex:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttribBinding", attribindex, bindingindex]);
	};

	public function GlVertexAttribDivisor(index:Int, divisor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttribDivisor", index, divisor]);
	};

	public function GlVertexAttribFormat(attribindex:Int, size:Int, ty:Int, normalized:Bool, relativeoffset:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlVertexAttribFormat",
			attribindex,
			size,
			ty,
			normalized,
			relativeoffset
		]);
	};

	public function GlVertexAttribI4i(index:Int, x:Int, y:Int, z:Int, w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttribI4i", index, x, y, z, w]);
	};

	public function GlVertexAttribI4iv(index:Int, v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttribI4iv", index, v]);
	};

	public function GlVertexAttribI4ui(index:Int, x:Int, y:Int, z:Int, w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttribI4ui", index, x, y, z, w]);
	};

	public function GlVertexAttribI4uiv(index:Int, v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttribI4uiv", index, v]);
	};

	public function GlVertexAttribIFormat(attribindex:Int, size:Int, ty:Int, relativeoffset:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlVertexAttribIFormat",
			attribindex,
			size,
			ty,
			relativeoffset
		]);
	};

	public function GlVertexAttribIPointer(index:Int, size:Int, ty:Int, stride:Int, pointer:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlVertexAttribIPointer",
			index,
			size,
			ty,
			stride,
			pointer
		]);
	};

	public function GlVertexBindingDivisor(bindingindex:Int, divisor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexBindingDivisor", bindingindex, divisor]);
	};
}

function NewQOpenGLExtraFunctionsFromPointer(ptr:String):QOpenGLExtraFunctions {
	final r = new QOpenGLExtraFunctions();
	r.initFrom(ptr, "gui.QOpenGLExtraFunctions");
	return r;
}

function NewQOpenGLExtraFunctions():QOpenGLExtraFunctions {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLExtraFunctions", ""]);
}

function NewQOpenGLExtraFunctions2(context:QOpenGLContext_ITF):QOpenGLExtraFunctions {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLExtraFunctions2", "", context]);
}

interface QOpenGLFramebufferObject_ITF {
	public function QOpenGLFramebufferObject_PTR():QOpenGLFramebufferObject;
}

class QOpenGLFramebufferObject extends Internal implements QOpenGLFramebufferObject_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFramebufferObject_PTR():QOpenGLFramebufferObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFramebufferObject_PTR"]);
	};

	public function AddColorAttachment(size:QSize_ITF, internalFormat:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddColorAttachment", size, internalFormat]);
	};

	public function AddColorAttachment2(width:Int, height:Int, internalFormat:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"AddColorAttachment2",
			width,
			height,
			internalFormat
		]);
	};

	public function Attachment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Attachment"]);
	};

	public function Bind():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bind"]);
	};

	public function BindDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BindDefault"]);
	};

	public function BlitFramebuffer(target:QOpenGLFramebufferObject_ITF, targetRect:QRect_ITF, source:QOpenGLFramebufferObject_ITF, sourceRect:QRect_ITF,
			buffers:Int, filter:Int, readColorAttachmentIndex:Int, drawColorAttachmentIndex:Int, restorePolicy:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "BlitFramebuffer", target, targetRect, source, sourceRect, buffers, filter, readColorAttachmentIndex,
			drawColorAttachmentIndex, restorePolicy
		]);
	};

	public function BlitFramebuffer2(target:QOpenGLFramebufferObject_ITF, targetRect:QRect_ITF, source:QOpenGLFramebufferObject_ITF, sourceRect:QRect_ITF,
			buffers:Int, filter:Int, readColorAttachmentIndex:Int, drawColorAttachmentIndex:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "BlitFramebuffer2", target, targetRect, source, sourceRect, buffers, filter, readColorAttachmentIndex,
			drawColorAttachmentIndex
		]);
	};

	public function BlitFramebuffer3(target:QOpenGLFramebufferObject_ITF, targetRect:QRect_ITF, source:QOpenGLFramebufferObject_ITF, sourceRect:QRect_ITF,
			buffers:Int, filter:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "BlitFramebuffer3", target, targetRect, source, sourceRect, buffers, filter
		]);
	};

	public function BlitFramebuffer4(target:QOpenGLFramebufferObject_ITF, source:QOpenGLFramebufferObject_ITF, buffers:Int, filter:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlitFramebuffer4", target, source, buffers, filter]);
	};

	public function Format():QOpenGLFramebufferObjectFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function Handle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Handle"]);
	};

	public function HasOpenGLFramebufferBlit():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasOpenGLFramebufferBlit"]);
	};

	public function HasOpenGLFramebufferObjects():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasOpenGLFramebufferObjects"]);
	};

	public function Height():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function IsBound():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsBound"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Release():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function SetAttachment(attachment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttachment", attachment]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function Sizes():Array<QSize> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Sizes"]);
	};

	public function TakeTexture():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeTexture"]);
	};

	public function TakeTexture2(colorAttachmentIndex:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeTexture2", colorAttachmentIndex]);
	};

	public function Texture():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Texture"]);
	};

	public function Textures():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Textures"]);
	};

	public function ToImage(flipped:Bool):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToImage", flipped]);
	};

	public function ToImage2():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToImage2"]);
	};

	public function ToImage3(flipped:Bool, colorAttachmentIndex:Int):QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToImage3", flipped, colorAttachmentIndex]);
	};

	public function Width():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function ConnectDestroyQOpenGLFramebufferObject(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLFramebufferObject",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLFramebufferObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLFramebufferObject"]);
	};

	public function DestroyQOpenGLFramebufferObject() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFramebufferObject"]);
	};

	public function DestroyQOpenGLFramebufferObjectDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFramebufferObjectDefault"]);
	};
}

function NewQOpenGLFramebufferObjectFromPointer(ptr:String):QOpenGLFramebufferObject {
	final r = new QOpenGLFramebufferObject();
	r.initFrom(ptr, "gui.QOpenGLFramebufferObject");
	return r;
}

function NewQOpenGLFramebufferObject(size:QSize_ITF, target:Int):QOpenGLFramebufferObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFramebufferObject", "", size, target]);
}

function NewQOpenGLFramebufferObject2(width:Int, height:Int, target:Int):QOpenGLFramebufferObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFramebufferObject2", "", width, height, target]);
}

function NewQOpenGLFramebufferObject3(size:QSize_ITF, attachment:Int, target:Int, internalFormat:Int):QOpenGLFramebufferObject {
	Gui.initModule();
	return Internal.callLocalFunction([
		"",
		"",
		"gui.NewQOpenGLFramebufferObject3",
		"",
		size,
		attachment,
		target,
		internalFormat
	]);
}

function NewQOpenGLFramebufferObject4(width:Int, height:Int, attachment:Int, target:Int, internalFormat:Int):QOpenGLFramebufferObject {
	Gui.initModule();
	return Internal.callLocalFunction([
		"",
		"",
		"gui.NewQOpenGLFramebufferObject4",
		"",
		width,
		height,
		attachment,
		target,
		internalFormat
	]);
}

function NewQOpenGLFramebufferObject5(size:QSize_ITF, format:QOpenGLFramebufferObjectFormat_ITF):QOpenGLFramebufferObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFramebufferObject5", "", size, format]);
}

function NewQOpenGLFramebufferObject6(width:Int, height:Int, format:QOpenGLFramebufferObjectFormat_ITF):QOpenGLFramebufferObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFramebufferObject6", "", width, height, format]);
}

function QOpenGLFramebufferObject_BindDefault():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLFramebufferObject_BindDefault", ""]);
}

function QOpenGLFramebufferObject_BlitFramebuffer(target:QOpenGLFramebufferObject_ITF, targetRect:QRect_ITF, source:QOpenGLFramebufferObject_ITF,
		sourceRect:QRect_ITF, buffers:Int, filter:Int, readColorAttachmentIndex:Int, drawColorAttachmentIndex:Int, restorePolicy:Int) {
	Gui.initModule();
	Internal.callLocalFunction([
		"", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer", "", target, targetRect, source, sourceRect, buffers, filter, readColorAttachmentIndex,
		drawColorAttachmentIndex, restorePolicy
	]);
}

function QOpenGLFramebufferObject_BlitFramebuffer2(target:QOpenGLFramebufferObject_ITF, targetRect:QRect_ITF, source:QOpenGLFramebufferObject_ITF,
		sourceRect:QRect_ITF, buffers:Int, filter:Int, readColorAttachmentIndex:Int, drawColorAttachmentIndex:Int) {
	Gui.initModule();
	Internal.callLocalFunction([
		"", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer2", "", target, targetRect, source, sourceRect, buffers, filter, readColorAttachmentIndex,
		drawColorAttachmentIndex
	]);
}

function QOpenGLFramebufferObject_BlitFramebuffer3(target:QOpenGLFramebufferObject_ITF, targetRect:QRect_ITF, source:QOpenGLFramebufferObject_ITF,
		sourceRect:QRect_ITF, buffers:Int, filter:Int) {
	Gui.initModule();
	Internal.callLocalFunction([
		"", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer3", "", target, targetRect, source, sourceRect, buffers, filter
	]);
}

function QOpenGLFramebufferObject_BlitFramebuffer4(target:QOpenGLFramebufferObject_ITF, source:QOpenGLFramebufferObject_ITF, buffers:Int, filter:Int) {
	Gui.initModule();
	Internal.callLocalFunction([
		"",
		"",
		"gui.QOpenGLFramebufferObject_BlitFramebuffer4",
		"",
		target,
		source,
		buffers,
		filter
	]);
}

function QOpenGLFramebufferObject_HasOpenGLFramebufferBlit():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLFramebufferObject_HasOpenGLFramebufferBlit", ""]);
}

function QOpenGLFramebufferObject_HasOpenGLFramebufferObjects():Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLFramebufferObject_HasOpenGLFramebufferObjects", ""]);
}

interface QOpenGLFramebufferObjectFormat_ITF {
	public function QOpenGLFramebufferObjectFormat_PTR():QOpenGLFramebufferObjectFormat;
}

class QOpenGLFramebufferObjectFormat extends Internal implements QOpenGLFramebufferObjectFormat_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFramebufferObjectFormat_PTR():QOpenGLFramebufferObjectFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFramebufferObjectFormat_PTR"]);
	};

	public function Attachment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Attachment"]);
	};

	public function InternalTextureFormat():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InternalTextureFormat"]);
	};

	public function Mipmap():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mipmap"]);
	};

	public function Samples():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Samples"]);
	};

	public function SetAttachment(attachment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttachment", attachment]);
	};

	public function SetInternalTextureFormat(internalTextureFormat:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetInternalTextureFormat", internalTextureFormat]);
	};

	public function SetMipmap(enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMipmap", enabled]);
	};

	public function SetSamples(samples:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSamples", samples]);
	};

	public function SetTextureTarget(target:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextureTarget", target]);
	};

	public function TextureTarget():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextureTarget"]);
	};

	public function DestroyQOpenGLFramebufferObjectFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFramebufferObjectFormat"]);
	};
}

function NewQOpenGLFramebufferObjectFormatFromPointer(ptr:String):QOpenGLFramebufferObjectFormat {
	final r = new QOpenGLFramebufferObjectFormat();
	r.initFrom(ptr, "gui.QOpenGLFramebufferObjectFormat");
	return r;
}

function NewQOpenGLFramebufferObjectFormat():QOpenGLFramebufferObjectFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFramebufferObjectFormat", ""]);
}

function NewQOpenGLFramebufferObjectFormat2(other:QOpenGLFramebufferObjectFormat_ITF):QOpenGLFramebufferObjectFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFramebufferObjectFormat2", "", other]);
}

interface QOpenGLFunctions_ITF {
	public function QOpenGLFunctions_PTR():QOpenGLFunctions;
}

class QOpenGLFunctions extends Internal implements QOpenGLFunctions_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_PTR():QOpenGLFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_PTR"]);
	};

	public function GlActiveTexture(texture:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlActiveTexture", texture]);
	};

	public function GlAttachShader(program:Int, shader:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlAttachShader", program, shader]);
	};

	public function GlBindAttribLocation(program:Int, index:Int, name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindAttribLocation", program, index, name]);
	};

	public function GlBindBuffer(target:Int, buffer:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindBuffer", target, buffer]);
	};

	public function GlBindFramebuffer(target:Int, framebuffer:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindFramebuffer", target, framebuffer]);
	};

	public function GlBindRenderbuffer(target:Int, renderbuffer:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindRenderbuffer", target, renderbuffer]);
	};

	public function GlBindTexture(target:Int, texture:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBindTexture", target, texture]);
	};

	public function GlBlendColor(red:Float, green:Float, blue:Float, alpha:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendColor", red, green, blue, alpha]);
	};

	public function GlBlendEquation(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendEquation", mode]);
	};

	public function GlBlendEquationSeparate(modeRGB:Int, modeAlpha:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendEquationSeparate", modeRGB, modeAlpha]);
	};

	public function GlBlendFunc(sfactor:Int, dfactor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlBlendFunc", sfactor, dfactor]);
	};

	public function GlBlendFuncSeparate(srcRGB:Int, dstRGB:Int, srcAlpha:Int, dstAlpha:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlBlendFuncSeparate",
			srcRGB,
			dstRGB,
			srcAlpha,
			dstAlpha
		]);
	};

	public function GlCheckFramebufferStatus(target:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlCheckFramebufferStatus", target]);
	};

	public function GlClear(mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClear", mask]);
	};

	public function GlClearColor(red:Float, green:Float, blue:Float, alpha:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClearColor", red, green, blue, alpha]);
	};

	public function GlClearDepthf(depth:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClearDepthf", depth]);
	};

	public function GlClearStencil(s:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlClearStencil", s]);
	};

	public function GlColorMask(red:Bool, green:Bool, blue:Bool, alpha:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlColorMask", red, green, blue, alpha]);
	};

	public function GlCompileShader(shader:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlCompileShader", shader]);
	};

	public function GlCompressedTexImage2D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, border:Int, imageSize:Int, data:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCompressedTexImage2D", target, level, internalformat, width, height, border, imageSize, data
		]);
	};

	public function GlCompressedTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, width:Int, height:Int, format:Int, imageSize:Int, data:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCompressedTexSubImage2D", target, level, xoffset, yoffset, width, height, format, imageSize, data
		]);
	};

	public function GlCopyTexImage2D(target:Int, level:Int, internalformat:Int, x:Int, y:Int, width:Int, height:Int, border:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCopyTexImage2D", target, level, internalformat, x, y, width, height, border
		]);
	};

	public function GlCopyTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlCopyTexSubImage2D", target, level, xoffset, yoffset, x, y, width, height
		]);
	};

	public function GlCreateProgram():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlCreateProgram"]);
	};

	public function GlCreateShader(ty:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlCreateShader", ty]);
	};

	public function GlCullFace(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlCullFace", mode]);
	};

	public function GlDeleteBuffers(n:Int, buffers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteBuffers", n, buffers]);
	};

	public function GlDeleteFramebuffers(n:Int, framebuffers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteFramebuffers", n, framebuffers]);
	};

	public function GlDeleteProgram(program:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteProgram", program]);
	};

	public function GlDeleteRenderbuffers(n:Int, renderbuffers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteRenderbuffers", n, renderbuffers]);
	};

	public function GlDeleteShader(shader:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteShader", shader]);
	};

	public function GlDeleteTextures(n:Int, textures:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDeleteTextures", n, textures]);
	};

	public function GlDepthFunc(fu:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDepthFunc", fu]);
	};

	public function GlDepthMask(flag:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDepthMask", flag]);
	};

	public function GlDepthRangef(zNear:Float, zFar:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDepthRangef", zNear, zFar]);
	};

	public function GlDetachShader(program:Int, shader:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDetachShader", program, shader]);
	};

	public function GlDisable(cap:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDisable", cap]);
	};

	public function GlDisableVertexAttribArray(index:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDisableVertexAttribArray", index]);
	};

	public function GlDrawArrays(mode:Int, first:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDrawArrays", mode, first, count]);
	};

	public function GlDrawElements(mode:Int, count:Int, ty:Int, indices:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlDrawElements", mode, count, ty, indices]);
	};

	public function GlEnable(cap:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlEnable", cap]);
	};

	public function GlEnableVertexAttribArray(index:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlEnableVertexAttribArray", index]);
	};

	public function GlFinish() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlFinish"]);
	};

	public function GlFlush() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlFlush"]);
	};

	public function GlFramebufferRenderbuffer(target:Int, attachment:Int, renderbuffertarget:Int, renderbuffer:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlFramebufferRenderbuffer",
			target,
			attachment,
			renderbuffertarget,
			renderbuffer
		]);
	};

	public function GlFramebufferTexture2D(target:Int, attachment:Int, textarget:Int, texture:Int, level:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlFramebufferTexture2D",
			target,
			attachment,
			textarget,
			texture,
			level
		]);
	};

	public function GlFrontFace(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlFrontFace", mode]);
	};

	public function GlGenBuffers(n:Int, buffers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenBuffers", n, buffers]);
	};

	public function GlGenFramebuffers(n:Int, framebuffers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenFramebuffers", n, framebuffers]);
	};

	public function GlGenRenderbuffers(n:Int, renderbuffers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenRenderbuffers", n, renderbuffers]);
	};

	public function GlGenTextures(n:Int, textures:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenTextures", n, textures]);
	};

	public function GlGenerateMipmap(target:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGenerateMipmap", target]);
	};

	public function GlGetActiveAttrib(program:Int, index:Int, bufsize:Int, length:Int, size:Int, ty:Int, name:String) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlGetActiveAttrib", program, index, bufsize, length, size, ty, name
		]);
	};

	public function GlGetActiveUniform(program:Int, index:Int, bufsize:Int, length:Int, size:Int, ty:Int, name:String) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlGetActiveUniform", program, index, bufsize, length, size, ty, name
		]);
	};

	public function GlGetAttachedShaders(program:Int, maxcount:Int, count:Int, shaders:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetAttachedShaders",
			program,
			maxcount,
			count,
			shaders
		]);
	};

	public function GlGetAttribLocation(program:Int, name:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlGetAttribLocation", program, name]);
	};

	public function GlGetBooleanv(pname:Int, params:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetBooleanv", pname, params]);
	};

	public function GlGetBufferParameteriv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetBufferParameteriv", target, pname, params]);
	};

	public function GlGetError():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlGetError"]);
	};

	public function GlGetFloatv(pname:Int, params:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetFloatv", pname, params]);
	};

	public function GlGetFramebufferAttachmentParameteriv(target:Int, attachment:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetFramebufferAttachmentParameteriv",
			target,
			attachment,
			pname,
			params
		]);
	};

	public function GlGetIntegerv(pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetIntegerv", pname, params]);
	};

	public function GlGetProgramInfoLog(program:Int, bufsize:Int, length:Int, infolog:String) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetProgramInfoLog",
			program,
			bufsize,
			length,
			infolog
		]);
	};

	public function GlGetProgramiv(program:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetProgramiv", program, pname, params]);
	};

	public function GlGetRenderbufferParameteriv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetRenderbufferParameteriv",
			target,
			pname,
			params
		]);
	};

	public function GlGetShaderInfoLog(shader:Int, bufsize:Int, length:Int, infolog:String) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetShaderInfoLog",
			shader,
			bufsize,
			length,
			infolog
		]);
	};

	public function GlGetShaderPrecisionFormat(shadertype:Int, precisiontype:Int, ran:Int, precision:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetShaderPrecisionFormat",
			shadertype,
			precisiontype,
			ran,
			precision
		]);
	};

	public function GlGetShaderSource(shader:Int, bufsize:Int, length:Int, source:String) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlGetShaderSource",
			shader,
			bufsize,
			length,
			source
		]);
	};

	public function GlGetShaderiv(shader:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetShaderiv", shader, pname, params]);
	};

	public function GlGetString(name:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlGetString", name]);
	};

	public function GlGetTexParameterfv(target:Int, pname:Int, params:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetTexParameterfv", target, pname, params]);
	};

	public function GlGetTexParameteriv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetTexParameteriv", target, pname, params]);
	};

	public function GlGetUniformLocation(program:Int, name:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlGetUniformLocation", program, name]);
	};

	public function GlGetUniformfv(program:Int, location:Int, params:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetUniformfv", program, location, params]);
	};

	public function GlGetUniformiv(program:Int, location:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetUniformiv", program, location, params]);
	};

	public function GlGetVertexAttribPointerv(index:Int, pname:Int, pointer:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetVertexAttribPointerv", index, pname, pointer]);
	};

	public function GlGetVertexAttribfv(index:Int, pname:Int, params:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetVertexAttribfv", index, pname, params]);
	};

	public function GlGetVertexAttribiv(index:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlGetVertexAttribiv", index, pname, params]);
	};

	public function GlHint(target:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlHint", target, mode]);
	};

	public function GlIsBuffer(buffer:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsBuffer", buffer]);
	};

	public function GlIsEnabled(cap:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsEnabled", cap]);
	};

	public function GlIsFramebuffer(framebuffer:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsFramebuffer", framebuffer]);
	};

	public function GlIsProgram(program:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsProgram", program]);
	};

	public function GlIsRenderbuffer(renderbuffer:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsRenderbuffer", renderbuffer]);
	};

	public function GlIsShader(shader:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsShader", shader]);
	};

	public function GlIsTexture(texture:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlIsTexture", texture]);
	};

	public function GlLineWidth(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlLineWidth", width]);
	};

	public function GlLinkProgram(program:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlLinkProgram", program]);
	};

	public function GlPixelStorei(pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlPixelStorei", pname, param]);
	};

	public function GlPolygonOffset(factor:Float, units:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlPolygonOffset", factor, units]);
	};

	public function GlReadPixels(x:Int, y:Int, width:Int, height:Int, format:Int, ty:Int, pixels:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlReadPixels", x, y, width, height, format, ty, pixels
		]);
	};

	public function GlReleaseShaderCompiler() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlReleaseShaderCompiler"]);
	};

	public function GlRenderbufferStorage(target:Int, internalformat:Int, width:Int, height:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlRenderbufferStorage",
			target,
			internalformat,
			width,
			height
		]);
	};

	public function GlSampleCoverage(value:Float, invert:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlSampleCoverage", value, invert]);
	};

	public function GlScissor(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlScissor", x, y, width, height]);
	};

	public function GlShaderBinary(n:Int, shaders:Int, binaryformat:Int, binary:Int, length:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlShaderBinary",
			n,
			shaders,
			binaryformat,
			binary,
			length
		]);
	};

	public function GlStencilFunc(fu:Int, ref:Int, mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlStencilFunc", fu, ref, mask]);
	};

	public function GlStencilFuncSeparate(face:Int, fu:Int, ref:Int, mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlStencilFuncSeparate", face, fu, ref, mask]);
	};

	public function GlStencilMask(mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlStencilMask", mask]);
	};

	public function GlStencilMaskSeparate(face:Int, mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlStencilMaskSeparate", face, mask]);
	};

	public function GlStencilOp(fail:Int, zfail:Int, zpass:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlStencilOp", fail, zfail, zpass]);
	};

	public function GlStencilOpSeparate(face:Int, fail:Int, zfail:Int, zpass:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlStencilOpSeparate", face, fail, zfail, zpass]);
	};

	public function GlTexImage2D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, border:Int, format:Int, ty:Int, pixels:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexImage2D", target, level, internalformat, width, height, border, format, ty, pixels
		]);
	};

	public function GlTexParameterf(target:Int, pname:Int, param:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexParameterf", target, pname, param]);
	};

	public function GlTexParameterfv(target:Int, pname:Int, params:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexParameterfv", target, pname, params]);
	};

	public function GlTexParameteri(target:Int, pname:Int, param:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexParameteri", target, pname, param]);
	};

	public function GlTexParameteriv(target:Int, pname:Int, params:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlTexParameteriv", target, pname, params]);
	};

	public function GlTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, width:Int, height:Int, format:Int, ty:Int, pixels:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlTexSubImage2D", target, level, xoffset, yoffset, width, height, format, ty, pixels
		]);
	};

	public function GlUniform1f(location:Int, x:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform1f", location, x]);
	};

	public function GlUniform1fv(location:Int, count:Int, v:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform1fv", location, count, v]);
	};

	public function GlUniform1i(location:Int, x:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform1i", location, x]);
	};

	public function GlUniform1iv(location:Int, count:Int, v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform1iv", location, count, v]);
	};

	public function GlUniform2f(location:Int, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform2f", location, x, y]);
	};

	public function GlUniform2fv(location:Int, count:Int, v:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform2fv", location, count, v]);
	};

	public function GlUniform2i(location:Int, x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform2i", location, x, y]);
	};

	public function GlUniform2iv(location:Int, count:Int, v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform2iv", location, count, v]);
	};

	public function GlUniform3f(location:Int, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform3f", location, x, y, z]);
	};

	public function GlUniform3fv(location:Int, count:Int, v:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform3fv", location, count, v]);
	};

	public function GlUniform3i(location:Int, x:Int, y:Int, z:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform3i", location, x, y, z]);
	};

	public function GlUniform3iv(location:Int, count:Int, v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform3iv", location, count, v]);
	};

	public function GlUniform4f(location:Int, x:Float, y:Float, z:Float, w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform4f", location, x, y, z, w]);
	};

	public function GlUniform4fv(location:Int, count:Int, v:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform4fv", location, count, v]);
	};

	public function GlUniform4i(location:Int, x:Int, y:Int, z:Int, w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform4i", location, x, y, z, w]);
	};

	public function GlUniform4iv(location:Int, count:Int, v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUniform4iv", location, count, v]);
	};

	public function GlUniformMatrix2fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix2fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix3fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix3fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUniformMatrix4fv(location:Int, count:Int, transpose:Bool, value:Float) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlUniformMatrix4fv",
			location,
			count,
			transpose,
			value
		]);
	};

	public function GlUseProgram(program:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlUseProgram", program]);
	};

	public function GlValidateProgram(program:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlValidateProgram", program]);
	};

	public function GlVertexAttrib1f(indx:Int, x:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib1f", indx, x]);
	};

	public function GlVertexAttrib1fv(indx:Int, values:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib1fv", indx, values]);
	};

	public function GlVertexAttrib2f(indx:Int, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib2f", indx, x, y]);
	};

	public function GlVertexAttrib2fv(indx:Int, values:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib2fv", indx, values]);
	};

	public function GlVertexAttrib3f(indx:Int, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib3f", indx, x, y, z]);
	};

	public function GlVertexAttrib3fv(indx:Int, values:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib3fv", indx, values]);
	};

	public function GlVertexAttrib4f(indx:Int, x:Float, y:Float, z:Float, w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib4f", indx, x, y, z, w]);
	};

	public function GlVertexAttrib4fv(indx:Int, values:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlVertexAttrib4fv", indx, values]);
	};

	public function GlVertexAttribPointer(indx:Int, size:Int, ty:Int, normalized:Bool, stride:Int, p:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "GlVertexAttribPointer", indx, size, ty, normalized, stride, p
		]);
	};

	public function GlViewport(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GlViewport", x, y, width, height]);
	};

	public function HasOpenGLFeature(feature:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasOpenGLFeature", feature]);
	};

	public function InitializeOpenGLFunctions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "InitializeOpenGLFunctions"]);
	};

	public function OpenGLFeatures():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OpenGLFeatures"]);
	};

	public function DestroyQOpenGLFunctions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions"]);
	};
}

function NewQOpenGLFunctionsFromPointer(ptr:String):QOpenGLFunctions {
	final r = new QOpenGLFunctions();
	r.initFrom(ptr, "gui.QOpenGLFunctions");
	return r;
}

function NewQOpenGLFunctions():QOpenGLFunctions {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFunctions", ""]);
}

function NewQOpenGLFunctions2(context:QOpenGLContext_ITF):QOpenGLFunctions {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLFunctions2", "", context]);
}

interface QOpenGLFunctions_1_0_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_1_0_PTR():QOpenGLFunctions_1_0;
}

class QOpenGLFunctions_1_0 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_1_0_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_0_PTR():QOpenGLFunctions_1_0 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_0_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_0() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_0"]);
	};
}

interface QOpenGLFunctions_1_0_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_0_CoreBackend_PTR():QOpenGLFunctions_1_0_CoreBackend;
}

class QOpenGLFunctions_1_0_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_0_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_0_CoreBackend_PTR():QOpenGLFunctions_1_0_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_0_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_0_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_0_CoreBackend"]);
	};
}

interface QOpenGLFunctions_1_0_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_0_DeprecatedBackend_PTR():QOpenGLFunctions_1_0_DeprecatedBackend;
}

class QOpenGLFunctions_1_0_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_0_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_0_DeprecatedBackend_PTR():QOpenGLFunctions_1_0_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_0_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_0_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_0_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_1_1_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_1_1_PTR():QOpenGLFunctions_1_1;
}

class QOpenGLFunctions_1_1 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_1_1_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_1_PTR():QOpenGLFunctions_1_1 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_1_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_1() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_1"]);
	};
}

interface QOpenGLFunctions_1_1_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_1_CoreBackend_PTR():QOpenGLFunctions_1_1_CoreBackend;
}

class QOpenGLFunctions_1_1_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_1_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_1_CoreBackend_PTR():QOpenGLFunctions_1_1_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_1_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_1_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_1_CoreBackend"]);
	};
}

interface QOpenGLFunctions_1_1_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_1_DeprecatedBackend_PTR():QOpenGLFunctions_1_1_DeprecatedBackend;
}

class QOpenGLFunctions_1_1_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_1_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_1_DeprecatedBackend_PTR():QOpenGLFunctions_1_1_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_1_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_1_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_1_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_1_2_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_1_2_PTR():QOpenGLFunctions_1_2;
}

class QOpenGLFunctions_1_2 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_1_2_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_2_PTR():QOpenGLFunctions_1_2 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_2_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_2() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_2"]);
	};
}

interface QOpenGLFunctions_1_2_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_2_CoreBackend_PTR():QOpenGLFunctions_1_2_CoreBackend;
}

class QOpenGLFunctions_1_2_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_2_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_2_CoreBackend_PTR():QOpenGLFunctions_1_2_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_2_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_2_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_2_CoreBackend"]);
	};
}

interface QOpenGLFunctions_1_2_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_2_DeprecatedBackend_PTR():QOpenGLFunctions_1_2_DeprecatedBackend;
}

class QOpenGLFunctions_1_2_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_2_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_2_DeprecatedBackend_PTR():QOpenGLFunctions_1_2_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_2_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_2_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_2_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_1_3_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_1_3_PTR():QOpenGLFunctions_1_3;
}

class QOpenGLFunctions_1_3 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_1_3_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_3_PTR():QOpenGLFunctions_1_3 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_3_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_3() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_3"]);
	};
}

interface QOpenGLFunctions_1_3_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_3_CoreBackend_PTR():QOpenGLFunctions_1_3_CoreBackend;
}

class QOpenGLFunctions_1_3_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_3_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_3_CoreBackend_PTR():QOpenGLFunctions_1_3_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_3_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_3_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_3_CoreBackend"]);
	};
}

interface QOpenGLFunctions_1_3_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_3_DeprecatedBackend_PTR():QOpenGLFunctions_1_3_DeprecatedBackend;
}

class QOpenGLFunctions_1_3_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_3_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_3_DeprecatedBackend_PTR():QOpenGLFunctions_1_3_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_3_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_3_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_3_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_1_4_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_1_4_PTR():QOpenGLFunctions_1_4;
}

class QOpenGLFunctions_1_4 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_1_4_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_4_PTR():QOpenGLFunctions_1_4 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_4_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_4() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_4"]);
	};
}

interface QOpenGLFunctions_1_4_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_4_CoreBackend_PTR():QOpenGLFunctions_1_4_CoreBackend;
}

class QOpenGLFunctions_1_4_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_4_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_4_CoreBackend_PTR():QOpenGLFunctions_1_4_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_4_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_4_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_4_CoreBackend"]);
	};
}

interface QOpenGLFunctions_1_4_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_4_DeprecatedBackend_PTR():QOpenGLFunctions_1_4_DeprecatedBackend;
}

class QOpenGLFunctions_1_4_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_4_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_4_DeprecatedBackend_PTR():QOpenGLFunctions_1_4_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_4_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_4_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_4_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_1_5_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_1_5_PTR():QOpenGLFunctions_1_5;
}

class QOpenGLFunctions_1_5 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_1_5_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_5_PTR():QOpenGLFunctions_1_5 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_5_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_5() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_5"]);
	};
}

interface QOpenGLFunctions_1_5_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_1_5_CoreBackend_PTR():QOpenGLFunctions_1_5_CoreBackend;
}

class QOpenGLFunctions_1_5_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_1_5_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_1_5_CoreBackend_PTR():QOpenGLFunctions_1_5_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_1_5_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_1_5_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_5_CoreBackend"]);
	};
}

interface QOpenGLFunctions_2_0_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_2_0_PTR():QOpenGLFunctions_2_0;
}

class QOpenGLFunctions_2_0 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_2_0_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_2_0_PTR():QOpenGLFunctions_2_0 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_2_0_PTR"]);
	};

	public function DestroyQOpenGLFunctions_2_0() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_0"]);
	};
}

interface QOpenGLFunctions_2_0_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_2_0_CoreBackend_PTR():QOpenGLFunctions_2_0_CoreBackend;
}

class QOpenGLFunctions_2_0_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_2_0_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_2_0_CoreBackend_PTR():QOpenGLFunctions_2_0_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_2_0_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_2_0_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_0_CoreBackend"]);
	};
}

interface QOpenGLFunctions_2_0_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_2_0_DeprecatedBackend_PTR():QOpenGLFunctions_2_0_DeprecatedBackend;
}

class QOpenGLFunctions_2_0_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_2_0_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_2_0_DeprecatedBackend_PTR():QOpenGLFunctions_2_0_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_2_0_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_2_0_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_0_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_2_1_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_2_1_PTR():QOpenGLFunctions_2_1;
}

class QOpenGLFunctions_2_1 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_2_1_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_2_1_PTR():QOpenGLFunctions_2_1 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_2_1_PTR"]);
	};

	public function DestroyQOpenGLFunctions_2_1() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_1"]);
	};
}

interface QOpenGLFunctions_2_1_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_2_1_CoreBackend_PTR():QOpenGLFunctions_2_1_CoreBackend;
}

class QOpenGLFunctions_2_1_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_2_1_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_2_1_CoreBackend_PTR():QOpenGLFunctions_2_1_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_2_1_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_2_1_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_1_CoreBackend"]);
	};
}

interface QOpenGLFunctions_3_0_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_3_0_PTR():QOpenGLFunctions_3_0;
}

class QOpenGLFunctions_3_0 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_3_0_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_0_PTR():QOpenGLFunctions_3_0 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_0_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_0() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_0"]);
	};
}

interface QOpenGLFunctions_3_0_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_3_0_CoreBackend_PTR():QOpenGLFunctions_3_0_CoreBackend;
}

class QOpenGLFunctions_3_0_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_3_0_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_0_CoreBackend_PTR():QOpenGLFunctions_3_0_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_0_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_0_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_0_CoreBackend"]);
	};
}

interface QOpenGLFunctions_3_0_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_3_0_DeprecatedBackend_PTR():QOpenGLFunctions_3_0_DeprecatedBackend;
}

class QOpenGLFunctions_3_0_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_3_0_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_0_DeprecatedBackend_PTR():QOpenGLFunctions_3_0_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_0_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_0_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_0_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_3_1_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_3_1_PTR():QOpenGLFunctions_3_1;
}

class QOpenGLFunctions_3_1 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_3_1_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_1_PTR():QOpenGLFunctions_3_1 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_1_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_1() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_1"]);
	};
}

interface QOpenGLFunctions_3_1_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_3_1_CoreBackend_PTR():QOpenGLFunctions_3_1_CoreBackend;
}

class QOpenGLFunctions_3_1_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_3_1_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_1_CoreBackend_PTR():QOpenGLFunctions_3_1_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_1_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_1_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_1_CoreBackend"]);
	};
}

interface QOpenGLFunctions_3_2_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_3_2_Compatibility_PTR():QOpenGLFunctions_3_2_Compatibility;
}

class QOpenGLFunctions_3_2_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_3_2_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_2_Compatibility_PTR():QOpenGLFunctions_3_2_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_2_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_2_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_2_Compatibility"]);
	};
}

interface QOpenGLFunctions_3_2_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_3_2_Core_PTR():QOpenGLFunctions_3_2_Core;
}

class QOpenGLFunctions_3_2_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_3_2_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_2_Core_PTR():QOpenGLFunctions_3_2_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_2_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_2_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_2_Core"]);
	};
}

interface QOpenGLFunctions_3_2_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_3_2_CoreBackend_PTR():QOpenGLFunctions_3_2_CoreBackend;
}

class QOpenGLFunctions_3_2_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_3_2_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_2_CoreBackend_PTR():QOpenGLFunctions_3_2_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_2_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_2_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_2_CoreBackend"]);
	};
}

interface QOpenGLFunctions_3_3_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_3_3_Compatibility_PTR():QOpenGLFunctions_3_3_Compatibility;
}

class QOpenGLFunctions_3_3_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_3_3_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_3_Compatibility_PTR():QOpenGLFunctions_3_3_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_3_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_3_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_Compatibility"]);
	};
}

interface QOpenGLFunctions_3_3_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_3_3_Core_PTR():QOpenGLFunctions_3_3_Core;
}

class QOpenGLFunctions_3_3_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_3_3_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_3_Core_PTR():QOpenGLFunctions_3_3_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_3_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_3_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_Core"]);
	};
}

interface QOpenGLFunctions_3_3_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_3_3_CoreBackend_PTR():QOpenGLFunctions_3_3_CoreBackend;
}

class QOpenGLFunctions_3_3_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_3_3_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_3_CoreBackend_PTR():QOpenGLFunctions_3_3_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_3_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_3_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_CoreBackend"]);
	};
}

interface QOpenGLFunctions_3_3_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_3_3_DeprecatedBackend_PTR():QOpenGLFunctions_3_3_DeprecatedBackend;
}

class QOpenGLFunctions_3_3_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_3_3_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_3_3_DeprecatedBackend_PTR():QOpenGLFunctions_3_3_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_3_3_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_3_3_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_4_0_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_0_Compatibility_PTR():QOpenGLFunctions_4_0_Compatibility;
}

class QOpenGLFunctions_4_0_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_0_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_0_Compatibility_PTR():QOpenGLFunctions_4_0_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_0_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_0_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_0_Compatibility"]);
	};
}

interface QOpenGLFunctions_4_0_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_0_Core_PTR():QOpenGLFunctions_4_0_Core;
}

class QOpenGLFunctions_4_0_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_0_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_0_Core_PTR():QOpenGLFunctions_4_0_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_0_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_0_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_0_Core"]);
	};
}

interface QOpenGLFunctions_4_0_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_0_CoreBackend_PTR():QOpenGLFunctions_4_0_CoreBackend;
}

class QOpenGLFunctions_4_0_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_0_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_0_CoreBackend_PTR():QOpenGLFunctions_4_0_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_0_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_0_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_0_CoreBackend"]);
	};
}

interface QOpenGLFunctions_4_1_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_1_Compatibility_PTR():QOpenGLFunctions_4_1_Compatibility;
}

class QOpenGLFunctions_4_1_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_1_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_1_Compatibility_PTR():QOpenGLFunctions_4_1_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_1_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_1_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_1_Compatibility"]);
	};
}

interface QOpenGLFunctions_4_1_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_1_Core_PTR():QOpenGLFunctions_4_1_Core;
}

class QOpenGLFunctions_4_1_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_1_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_1_Core_PTR():QOpenGLFunctions_4_1_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_1_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_1_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_1_Core"]);
	};
}

interface QOpenGLFunctions_4_1_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_1_CoreBackend_PTR():QOpenGLFunctions_4_1_CoreBackend;
}

class QOpenGLFunctions_4_1_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_1_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_1_CoreBackend_PTR():QOpenGLFunctions_4_1_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_1_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_1_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_1_CoreBackend"]);
	};
}

interface QOpenGLFunctions_4_2_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_2_Compatibility_PTR():QOpenGLFunctions_4_2_Compatibility;
}

class QOpenGLFunctions_4_2_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_2_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_2_Compatibility_PTR():QOpenGLFunctions_4_2_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_2_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_2_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_2_Compatibility"]);
	};
}

interface QOpenGLFunctions_4_2_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_2_Core_PTR():QOpenGLFunctions_4_2_Core;
}

class QOpenGLFunctions_4_2_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_2_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_2_Core_PTR():QOpenGLFunctions_4_2_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_2_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_2_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_2_Core"]);
	};
}

interface QOpenGLFunctions_4_2_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_2_CoreBackend_PTR():QOpenGLFunctions_4_2_CoreBackend;
}

class QOpenGLFunctions_4_2_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_2_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_2_CoreBackend_PTR():QOpenGLFunctions_4_2_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_2_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_2_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_2_CoreBackend"]);
	};
}

interface QOpenGLFunctions_4_3_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_3_Compatibility_PTR():QOpenGLFunctions_4_3_Compatibility;
}

class QOpenGLFunctions_4_3_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_3_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_3_Compatibility_PTR():QOpenGLFunctions_4_3_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_3_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_3_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_3_Compatibility"]);
	};
}

interface QOpenGLFunctions_4_3_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_3_Core_PTR():QOpenGLFunctions_4_3_Core;
}

class QOpenGLFunctions_4_3_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_3_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_3_Core_PTR():QOpenGLFunctions_4_3_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_3_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_3_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_3_Core"]);
	};
}

interface QOpenGLFunctions_4_3_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_3_CoreBackend_PTR():QOpenGLFunctions_4_3_CoreBackend;
}

class QOpenGLFunctions_4_3_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_3_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_3_CoreBackend_PTR():QOpenGLFunctions_4_3_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_3_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_3_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_3_CoreBackend"]);
	};
}

interface QOpenGLFunctions_4_4_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_4_Compatibility_PTR():QOpenGLFunctions_4_4_Compatibility;
}

class QOpenGLFunctions_4_4_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_4_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_4_Compatibility_PTR():QOpenGLFunctions_4_4_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_4_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_4_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_4_Compatibility"]);
	};
}

interface QOpenGLFunctions_4_4_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_4_Core_PTR():QOpenGLFunctions_4_4_Core;
}

class QOpenGLFunctions_4_4_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_4_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_4_Core_PTR():QOpenGLFunctions_4_4_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_4_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_4_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_4_Core"]);
	};
}

interface QOpenGLFunctions_4_4_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_4_CoreBackend_PTR():QOpenGLFunctions_4_4_CoreBackend;
}

class QOpenGLFunctions_4_4_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_4_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_4_CoreBackend_PTR():QOpenGLFunctions_4_4_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_4_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_4_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_4_CoreBackend"]);
	};
}

interface QOpenGLFunctions_4_5_Compatibility_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_5_Compatibility_PTR():QOpenGLFunctions_4_5_Compatibility;
}

class QOpenGLFunctions_4_5_Compatibility extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_5_Compatibility_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_5_Compatibility_PTR():QOpenGLFunctions_4_5_Compatibility {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_5_Compatibility_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_5_Compatibility() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_Compatibility"]);
	};
}

interface QOpenGLFunctions_4_5_Core_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_4_5_Core_PTR():QOpenGLFunctions_4_5_Core;
}

class QOpenGLFunctions_4_5_Core extends QAbstractOpenGLFunctions implements QOpenGLFunctions_4_5_Core_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_5_Core_PTR():QOpenGLFunctions_4_5_Core {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_5_Core_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_5_Core() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_Core"]);
	};
}

interface QOpenGLFunctions_4_5_CoreBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_5_CoreBackend_PTR():QOpenGLFunctions_4_5_CoreBackend;
}

class QOpenGLFunctions_4_5_CoreBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_5_CoreBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_5_CoreBackend_PTR():QOpenGLFunctions_4_5_CoreBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_5_CoreBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_5_CoreBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_CoreBackend"]);
	};
}

interface QOpenGLFunctions_4_5_DeprecatedBackend_ITF extends QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLFunctions_4_5_DeprecatedBackend_PTR():QOpenGLFunctions_4_5_DeprecatedBackend;
}

class QOpenGLFunctions_4_5_DeprecatedBackend extends QOpenGLVersionFunctionsBackend implements QOpenGLFunctions_4_5_DeprecatedBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_4_5_DeprecatedBackend_PTR():QOpenGLFunctions_4_5_DeprecatedBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_4_5_DeprecatedBackend_PTR"]);
	};

	public function DestroyQOpenGLFunctions_4_5_DeprecatedBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_DeprecatedBackend"]);
	};
}

interface QOpenGLFunctions_ES2_ITF extends QAbstractOpenGLFunctions_ITF {
	public function QOpenGLFunctions_ES2_PTR():QOpenGLFunctions_ES2;
}

class QOpenGLFunctions_ES2 extends QAbstractOpenGLFunctions implements QOpenGLFunctions_ES2_ITF {
	public function new() {
		super();
	}

	public function QOpenGLFunctions_ES2_PTR():QOpenGLFunctions_ES2 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLFunctions_ES2_PTR"]);
	};

	public function DestroyQOpenGLFunctions_ES2() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLFunctions_ES2"]);
	};
}

interface QOpenGLPaintDevice_ITF extends QPaintDevice_ITF {
	public function QOpenGLPaintDevice_PTR():QOpenGLPaintDevice;
}

class QOpenGLPaintDevice extends QPaintDevice implements QOpenGLPaintDevice_ITF {
	public function new() {
		super();
	}

	public function QOpenGLPaintDevice_PTR():QOpenGLPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLPaintDevice_PTR"]);
	};

	public function Context():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Context"]);
	};

	public function DotsPerMeterX():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotsPerMeterX"]);
	};

	public function DotsPerMeterY():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotsPerMeterY"]);
	};

	public function ConnectEnsureActiveTarget(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectEnsureActiveTarget",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectEnsureActiveTarget() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectEnsureActiveTarget"]);
	};

	public function EnsureActiveTarget() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EnsureActiveTarget"]);
	};

	public function EnsureActiveTargetDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EnsureActiveTargetDefault"]);
	};

	public override function ConnectPaintEngine(f:() -> QPaintEngine) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintEngine", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectPaintEngine() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintEngine"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};

	public function PaintFlipped():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintFlipped"]);
	};

	public function SetDevicePixelRatio(devicePixelRatio:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevicePixelRatio", devicePixelRatio]);
	};

	public function SetDotsPerMeterX(dpmx:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDotsPerMeterX", dpmx]);
	};

	public function SetDotsPerMeterY(dpmy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDotsPerMeterY", dpmy]);
	};

	public function SetPaintFlipped(flipped:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPaintFlipped", flipped]);
	};

	public function SetSize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSize", size]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function ConnectDestroyQOpenGLPaintDevice(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLPaintDevice",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLPaintDevice() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLPaintDevice"]);
	};

	public function DestroyQOpenGLPaintDevice() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLPaintDevice"]);
	};

	public function DestroyQOpenGLPaintDeviceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLPaintDeviceDefault"]);
	};
}

function NewQOpenGLPaintDeviceFromPointer(ptr:String):QOpenGLPaintDevice {
	final r = new QOpenGLPaintDevice();
	r.initFrom(ptr, "gui.QOpenGLPaintDevice");
	return r;
}

function NewQOpenGLPaintDevice():QOpenGLPaintDevice {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLPaintDevice", ""]);
}

function NewQOpenGLPaintDevice2(size:QSize_ITF):QOpenGLPaintDevice {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLPaintDevice2", "", size]);
}

function NewQOpenGLPaintDevice3(width:Int, height:Int):QOpenGLPaintDevice {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLPaintDevice3", "", width, height]);
}

interface QOpenGLPixelTransferOptions_ITF {
	public function QOpenGLPixelTransferOptions_PTR():QOpenGLPixelTransferOptions;
}

class QOpenGLPixelTransferOptions extends Internal implements QOpenGLPixelTransferOptions_ITF {
	public function new() {
		super();
	}

	public function QOpenGLPixelTransferOptions_PTR():QOpenGLPixelTransferOptions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLPixelTransferOptions_PTR"]);
	};

	public function Alignment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alignment"]);
	};

	public function ImageHeight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ImageHeight"]);
	};

	public function IsLeastSignificantBitFirst():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsLeastSignificantBitFirst"]);
	};

	public function IsSwapBytesEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSwapBytesEnabled"]);
	};

	public function RowLength():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowLength"]);
	};

	public function SetAlignment(alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlignment", alignment]);
	};

	public function SetImageHeight(imageHeight:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetImageHeight", imageHeight]);
	};

	public function SetLeastSignificantByteFirst(lsbFirst:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLeastSignificantByteFirst", lsbFirst]);
	};

	public function SetRowLength(rowLength:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRowLength", rowLength]);
	};

	public function SetSkipImages(skipImages:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSkipImages", skipImages]);
	};

	public function SetSkipPixels(skipPixels:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSkipPixels", skipPixels]);
	};

	public function SetSkipRows(skipRows:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSkipRows", skipRows]);
	};

	public function SetSwapBytesEnabled(swapBytes:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSwapBytesEnabled", swapBytes]);
	};

	public function SkipImages():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SkipImages"]);
	};

	public function SkipPixels():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SkipPixels"]);
	};

	public function SkipRows():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SkipRows"]);
	};

	public function DestroyQOpenGLPixelTransferOptions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLPixelTransferOptions"]);
	};
}

function NewQOpenGLPixelTransferOptionsFromPointer(ptr:String):QOpenGLPixelTransferOptions {
	final r = new QOpenGLPixelTransferOptions();
	r.initFrom(ptr, "gui.QOpenGLPixelTransferOptions");
	return r;
}

function NewQOpenGLPixelTransferOptions():QOpenGLPixelTransferOptions {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLPixelTransferOptions", ""]);
}

interface QOpenGLShader_ITF extends QObject_ITF {
	public function QOpenGLShader_PTR():QOpenGLShader;
}

class QOpenGLShader extends QObject implements QOpenGLShader_ITF {
	public function new() {
		super();
	}

	public function QOpenGLShader_PTR():QOpenGLShader {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLShader_PTR"]);
	};

	public function CompileSourceCode(source:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CompileSourceCode", source]);
	};

	public function CompileSourceCode2(source:QByteArray_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CompileSourceCode2", source]);
	};

	public function CompileSourceCode3(source:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CompileSourceCode3", source]);
	};

	public function CompileSourceFile(fileName:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CompileSourceFile", fileName]);
	};

	public function HasOpenGLShaders(ty:Int, context:QOpenGLContext_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasOpenGLShaders", ty, context]);
	};

	public function IsCompiled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCompiled"]);
	};

	public function Log():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Log"]);
	};

	public function ShaderId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShaderId"]);
	};

	public function ShaderType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShaderType"]);
	};

	public function SourceCode():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SourceCode"]);
	};

	public function ConnectDestroyQOpenGLShader(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLShader",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLShader() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLShader"]);
	};

	public function DestroyQOpenGLShader() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLShader"]);
	};

	public function DestroyQOpenGLShaderDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLShaderDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLShaderFromPointer(ptr:String):QOpenGLShader {
	final r = new QOpenGLShader();
	r.initFrom(ptr, "gui.QOpenGLShader");
	return r;
}

function NewQOpenGLShader(ty:Int, parent:QObject_ITF):QOpenGLShader {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLShader", "", ty, parent]);
}

function QOpenGLShader_HasOpenGLShaders(ty:Int, context:QOpenGLContext_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLShader_HasOpenGLShaders", "", ty, context]);
}

interface QOpenGLShaderProgram_ITF extends QObject_ITF {
	public function QOpenGLShaderProgram_PTR():QOpenGLShaderProgram;
}

class QOpenGLShaderProgram extends QObject implements QOpenGLShaderProgram_ITF {
	public function new() {
		super();
	}

	public function QOpenGLShaderProgram_PTR():QOpenGLShaderProgram {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLShaderProgram_PTR"]);
	};

	public function AddCacheableShaderFromSourceCode(ty:Int, source:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddCacheableShaderFromSourceCode", ty, source]);
	};

	public function AddCacheableShaderFromSourceCode2(ty:Int, source:QByteArray_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddCacheableShaderFromSourceCode2", ty, source]);
	};

	public function AddCacheableShaderFromSourceCode3(ty:Int, source:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddCacheableShaderFromSourceCode3", ty, source]);
	};

	public function AddCacheableShaderFromSourceFile(ty:Int, fileName:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddCacheableShaderFromSourceFile", ty, fileName]);
	};

	public function AddShader(shader:QOpenGLShader_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddShader", shader]);
	};

	public function AddShaderFromSourceCode(ty:Int, source:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddShaderFromSourceCode", ty, source]);
	};

	public function AddShaderFromSourceCode2(ty:Int, source:QByteArray_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddShaderFromSourceCode2", ty, source]);
	};

	public function AddShaderFromSourceCode3(ty:Int, source:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddShaderFromSourceCode3", ty, source]);
	};

	public function AddShaderFromSourceFile(ty:Int, fileName:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AddShaderFromSourceFile", ty, fileName]);
	};

	public function AttributeLocation(name:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AttributeLocation", name]);
	};

	public function AttributeLocation2(name:QByteArray_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AttributeLocation2", name]);
	};

	public function AttributeLocation3(name:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AttributeLocation3", name]);
	};

	public function Bind():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Bind"]);
	};

	public function BindAttributeLocation(name:String, location:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BindAttributeLocation", name, location]);
	};

	public function BindAttributeLocation2(name:QByteArray_ITF, location:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BindAttributeLocation2", name, location]);
	};

	public function BindAttributeLocation3(name:String, location:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BindAttributeLocation3", name, location]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function DefaultInnerTessellationLevels():Array<Float> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultInnerTessellationLevels"]);
	};

	public function DefaultOuterTessellationLevels():Array<Float> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultOuterTessellationLevels"]);
	};

	public function DisableAttributeArray(location:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisableAttributeArray", location]);
	};

	public function DisableAttributeArray2(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisableAttributeArray2", name]);
	};

	public function EnableAttributeArray(location:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EnableAttributeArray", location]);
	};

	public function EnableAttributeArray2(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EnableAttributeArray2", name]);
	};

	public function HasOpenGLShaderPrograms(context:QOpenGLContext_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasOpenGLShaderPrograms", context]);
	};

	public function IsLinked():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsLinked"]);
	};

	public function ConnectLink(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLink", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLink() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLink"]);
	};

	public function Link():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Link"]);
	};

	public function LinkDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LinkDefault"]);
	};

	public function Log():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Log"]);
	};

	public function MaxGeometryOutputVertices():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaxGeometryOutputVertices"]);
	};

	public function PatchVertexCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PatchVertexCount"]);
	};

	public function ProgramId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ProgramId"]);
	};

	public function Release() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function RemoveAllShaders() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveAllShaders"]);
	};

	public function RemoveShader(shader:QOpenGLShader_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveShader", shader]);
	};

	public function SetAttributeArray(location:Int, values:Float, tupleSize:Int, stride:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeArray",
			location,
			values,
			tupleSize,
			stride
		]);
	};

	public function SetAttributeArray2(location:Int, values:QVector2D_ITF, stride:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeArray2", location, values, stride]);
	};

	public function SetAttributeArray3(location:Int, values:QVector3D_ITF, stride:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeArray3", location, values, stride]);
	};

	public function SetAttributeArray4(location:Int, values:QVector4D_ITF, stride:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeArray4", location, values, stride]);
	};

	public function SetAttributeArray5(location:Int, ty:Int, values:Int, tupleSize:Int, stride:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeArray5",
			location,
			ty,
			values,
			tupleSize,
			stride
		]);
	};

	public function SetAttributeArray6(name:String, values:Float, tupleSize:Int, stride:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeArray6",
			name,
			values,
			tupleSize,
			stride
		]);
	};

	public function SetAttributeArray7(name:String, values:QVector2D_ITF, stride:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeArray7", name, values, stride]);
	};

	public function SetAttributeArray8(name:String, values:QVector3D_ITF, stride:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeArray8", name, values, stride]);
	};

	public function SetAttributeArray9(name:String, values:QVector4D_ITF, stride:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeArray9", name, values, stride]);
	};

	public function SetAttributeArray10(name:String, ty:Int, values:Int, tupleSize:Int, stride:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeArray10",
			name,
			ty,
			values,
			tupleSize,
			stride
		]);
	};

	public function SetAttributeBuffer(location:Int, ty:Int, offset:Int, tupleSize:Int, stride:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeBuffer",
			location,
			ty,
			offset,
			tupleSize,
			stride
		]);
	};

	public function SetAttributeBuffer2(name:String, ty:Int, offset:Int, tupleSize:Int, stride:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeBuffer2",
			name,
			ty,
			offset,
			tupleSize,
			stride
		]);
	};

	public function SetAttributeValue(location:Int, value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue", location, value]);
	};

	public function SetAttributeValue2(location:Int, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue2", location, x, y]);
	};

	public function SetAttributeValue3(location:Int, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue3", location, x, y, z]);
	};

	public function SetAttributeValue4(location:Int, x:Float, y:Float, z:Float, w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue4", location, x, y, z, w]);
	};

	public function SetAttributeValue5(location:Int, value:QVector2D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue5", location, value]);
	};

	public function SetAttributeValue6(location:Int, value:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue6", location, value]);
	};

	public function SetAttributeValue7(location:Int, value:QVector4D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue7", location, value]);
	};

	public function SetAttributeValue8(location:Int, value:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue8", location, value]);
	};

	public function SetAttributeValue9(location:Int, values:Float, columns:Int, rows:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetAttributeValue9",
			location,
			values,
			columns,
			rows
		]);
	};

	public function SetAttributeValue10(name:String, value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue10", name, value]);
	};

	public function SetAttributeValue11(name:String, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue11", name, x, y]);
	};

	public function SetAttributeValue12(name:String, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue12", name, x, y, z]);
	};

	public function SetAttributeValue13(name:String, x:Float, y:Float, z:Float, w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue13", name, x, y, z, w]);
	};

	public function SetAttributeValue14(name:String, value:QVector2D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue14", name, value]);
	};

	public function SetAttributeValue15(name:String, value:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue15", name, value]);
	};

	public function SetAttributeValue16(name:String, value:QVector4D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue16", name, value]);
	};

	public function SetAttributeValue17(name:String, value:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue17", name, value]);
	};

	public function SetAttributeValue18(name:String, values:Float, columns:Int, rows:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAttributeValue18", name, values, columns, rows]);
	};

	public function SetDefaultInnerTessellationLevels(levels:Array<Float>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultInnerTessellationLevels", levels]);
	};

	public function SetDefaultOuterTessellationLevels(levels:Array<Float>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultOuterTessellationLevels", levels]);
	};

	public function SetPatchVertexCount(count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPatchVertexCount", count]);
	};

	public function SetUniformValue(location:Int, value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue", location, value]);
	};

	public function SetUniformValue2(location:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue2", location, value]);
	};

	public function SetUniformValue3(location:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue3", location, value]);
	};

	public function SetUniformValue4(location:Int, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue4", location, x, y]);
	};

	public function SetUniformValue5(location:Int, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue5", location, x, y, z]);
	};

	public function SetUniformValue6(location:Int, x:Float, y:Float, z:Float, w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue6", location, x, y, z, w]);
	};

	public function SetUniformValue7(location:Int, value:QVector2D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue7", location, value]);
	};

	public function SetUniformValue8(location:Int, value:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue8", location, value]);
	};

	public function SetUniformValue9(location:Int, value:QVector4D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue9", location, value]);
	};

	public function SetUniformValue10(location:Int, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue10", location, color]);
	};

	public function SetUniformValue11(location:Int, point:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue11", location, point]);
	};

	public function SetUniformValue12(location:Int, point:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue12", location, point]);
	};

	public function SetUniformValue13(location:Int, size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue13", location, size]);
	};

	public function SetUniformValue14(location:Int, size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue14", location, size]);
	};

	public function SetUniformValue23(location:Int, value:QMatrix4x4_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue23", location, value]);
	};

	public function SetUniformValue27(location:Int, value:QTransform_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue27", location, value]);
	};

	public function SetUniformValue28(name:String, value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue28", name, value]);
	};

	public function SetUniformValue29(name:String, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue29", name, value]);
	};

	public function SetUniformValue30(name:String, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue30", name, value]);
	};

	public function SetUniformValue31(name:String, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue31", name, x, y]);
	};

	public function SetUniformValue32(name:String, x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue32", name, x, y, z]);
	};

	public function SetUniformValue33(name:String, x:Float, y:Float, z:Float, w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue33", name, x, y, z, w]);
	};

	public function SetUniformValue34(name:String, value:QVector2D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue34", name, value]);
	};

	public function SetUniformValue35(name:String, value:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue35", name, value]);
	};

	public function SetUniformValue36(name:String, value:QVector4D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue36", name, value]);
	};

	public function SetUniformValue37(name:String, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue37", name, color]);
	};

	public function SetUniformValue38(name:String, point:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue38", name, point]);
	};

	public function SetUniformValue39(name:String, point:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue39", name, point]);
	};

	public function SetUniformValue40(name:String, size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue40", name, size]);
	};

	public function SetUniformValue41(name:String, size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue41", name, size]);
	};

	public function SetUniformValue50(name:String, value:QMatrix4x4_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue50", name, value]);
	};

	public function SetUniformValue54(name:String, value:QTransform_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValue54", name, value]);
	};

	public function SetUniformValueArray(location:Int, values:Float, count:Int, tupleSize:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetUniformValueArray",
			location,
			values,
			count,
			tupleSize
		]);
	};

	public function SetUniformValueArray2(location:Int, values:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray2", location, values, count]);
	};

	public function SetUniformValueArray3(location:Int, values:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray3", location, values, count]);
	};

	public function SetUniformValueArray4(location:Int, values:QVector2D_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray4", location, values, count]);
	};

	public function SetUniformValueArray5(location:Int, values:QVector3D_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray5", location, values, count]);
	};

	public function SetUniformValueArray6(location:Int, values:QVector4D_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray6", location, values, count]);
	};

	public function SetUniformValueArray15(location:Int, values:QMatrix4x4_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray15", location, values, count]);
	};

	public function SetUniformValueArray16(name:String, values:Float, count:Int, tupleSize:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetUniformValueArray16",
			name,
			values,
			count,
			tupleSize
		]);
	};

	public function SetUniformValueArray17(name:String, values:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray17", name, values, count]);
	};

	public function SetUniformValueArray18(name:String, values:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray18", name, values, count]);
	};

	public function SetUniformValueArray19(name:String, values:QVector2D_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray19", name, values, count]);
	};

	public function SetUniformValueArray20(name:String, values:QVector3D_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray20", name, values, count]);
	};

	public function SetUniformValueArray21(name:String, values:QVector4D_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray21", name, values, count]);
	};

	public function SetUniformValueArray30(name:String, values:QMatrix4x4_ITF, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUniformValueArray30", name, values, count]);
	};

	public function Shaders():Array<QOpenGLShader> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Shaders"]);
	};

	public function UniformLocation(name:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UniformLocation", name]);
	};

	public function UniformLocation2(name:QByteArray_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UniformLocation2", name]);
	};

	public function UniformLocation3(name:String):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UniformLocation3", name]);
	};

	public function ConnectDestroyQOpenGLShaderProgram(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLShaderProgram",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLShaderProgram() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLShaderProgram"]);
	};

	public function DestroyQOpenGLShaderProgram() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLShaderProgram"]);
	};

	public function DestroyQOpenGLShaderProgramDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLShaderProgramDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLShaderProgramFromPointer(ptr:String):QOpenGLShaderProgram {
	final r = new QOpenGLShaderProgram();
	r.initFrom(ptr, "gui.QOpenGLShaderProgram");
	return r;
}

function NewQOpenGLShaderProgram(parent:QObject_ITF):QOpenGLShaderProgram {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLShaderProgram", "", parent]);
}

function QOpenGLShaderProgram_HasOpenGLShaderPrograms(context:QOpenGLContext_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLShaderProgram_HasOpenGLShaderPrograms", "", context]);
}

interface QOpenGLTexture_ITF {
	public function QOpenGLTexture_PTR():QOpenGLTexture;
}

class QOpenGLTexture extends Internal implements QOpenGLTexture_ITF {
	public function new() {
		super();
	}

	public function QOpenGLTexture_PTR():QOpenGLTexture {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLTexture_PTR"]);
	};

	public function DestroyQOpenGLTexture() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLTexture"]);
	};

	public function AllocateStorage() {
		Internal.callLocalFunction(["", Pointer(), ___className, "AllocateStorage"]);
	};

	public function AllocateStorage2(pixelFormat:Int, pixelType:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AllocateStorage2", pixelFormat, pixelType]);
	};

	public function Bind() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Bind"]);
	};

	public function Bind2(unit:Int, reset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Bind2", unit, reset]);
	};

	public function BorderColor():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BorderColor"]);
	};

	public function BorderColor2(border:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BorderColor2", border]);
	};

	public function BorderColor3(border:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BorderColor3", border]);
	};

	public function BorderColor4(border:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BorderColor4", border]);
	};

	public function BoundTextureId(target:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundTextureId", target]);
	};

	public function BoundTextureId2(unit:Int, target:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundTextureId2", unit, target]);
	};

	public function ComparisonFunction():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ComparisonFunction"]);
	};

	public function ComparisonMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ComparisonMode"]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function CreateTextureView(target:Int, viewFormat:Int, minimumMipmapLevel:Int, maximumMipmapLevel:Int, minimumLayer:Int,
			maximumLayer:Int):QOpenGLTexture {
		return Internal.callLocalFunction([
			"", Pointer(), ___className, "CreateTextureView", target, viewFormat, minimumMipmapLevel, maximumMipmapLevel, minimumLayer, maximumLayer
		]);
	};

	public function Depth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Depth"]);
	};

	public function DepthStencilMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DepthStencilMode"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function Faces():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Faces"]);
	};

	public function Format():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function GenerateMipMaps() {
		Internal.callLocalFunction(["", Pointer(), ___className, "GenerateMipMaps"]);
	};

	public function GenerateMipMaps2(baseLevel:Int, resetBaseLevel:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GenerateMipMaps2", baseLevel, resetBaseLevel]);
	};

	public function HasFeature(feature:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasFeature", feature]);
	};

	public function Height():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function IsAutoMipMapGenerationEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAutoMipMapGenerationEnabled"]);
	};

	public function IsBound():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsBound"]);
	};

	public function IsBound2(unit:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsBound2", unit]);
	};

	public function IsCreated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCreated"]);
	};

	public function IsFixedSamplePositions():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsFixedSamplePositions"]);
	};

	public function IsStorageAllocated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsStorageAllocated"]);
	};

	public function IsTextureView():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsTextureView"]);
	};

	public function Layers():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Layers"]);
	};

	public function LevelofDetailBias():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LevelofDetailBias"]);
	};

	public function MagnificationFilter():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MagnificationFilter"]);
	};

	public function MaximumAnisotropy():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumAnisotropy"]);
	};

	public function MaximumLevelOfDetail():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumLevelOfDetail"]);
	};

	public function MaximumMipLevels():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumMipLevels"]);
	};

	public function MinificationFilter():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinificationFilter"]);
	};

	public function MinimumLevelOfDetail():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumLevelOfDetail"]);
	};

	public function MipBaseLevel():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MipBaseLevel"]);
	};

	public function MipLevels():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MipLevels"]);
	};

	public function MipMaxLevel():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MipMaxLevel"]);
	};

	public function Release() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function Release2(unit:Int, reset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release2", unit, reset]);
	};

	public function Samples():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Samples"]);
	};

	public function SetAutoMipMapGenerationEnabled(enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAutoMipMapGenerationEnabled", enabled]);
	};

	public function SetBorderColor(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorderColor", color]);
	};

	public function SetBorderColor2(r:Float, g:Float, b:Float, a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorderColor2", r, g, b, a]);
	};

	public function SetBorderColor3(r:Int, g:Int, b:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorderColor3", r, g, b, a]);
	};

	public function SetBorderColor4(r:Int, g:Int, b:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorderColor4", r, g, b, a]);
	};

	public function SetComparisonFunction(func:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetComparisonFunction", func]);
	};

	public function SetComparisonMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetComparisonMode", mode]);
	};

	public function SetCompressedData(mipLevel:Int, layer:Int, cubeFace:Int, dataSize:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetCompressedData", mipLevel, layer, cubeFace, dataSize, data, options
		]);
	};

	public function SetCompressedData6(mipLevel:Int, layer:Int, layerCount:Int, cubeFace:Int, dataSize:Int, data:Int,
			options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetCompressedData6", mipLevel, layer, layerCount, cubeFace, dataSize, data, options
		]);
	};

	public function SetCompressedData7(mipLevel:Int, layer:Int, dataSize:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetCompressedData7",
			mipLevel,
			layer,
			dataSize,
			data,
			options
		]);
	};

	public function SetCompressedData8(mipLevel:Int, dataSize:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetCompressedData8",
			mipLevel,
			dataSize,
			data,
			options
		]);
	};

	public function SetCompressedData9(dataSize:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCompressedData9", dataSize, data, options]);
	};

	public function SetData(mipLevel:Int, layer:Int, cubeFace:Int, sourceFormat:Int, sourceType:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetData", mipLevel, layer, cubeFace, sourceFormat, sourceType, data, options
		]);
	};

	public function SetData6(mipLevel:Int, layer:Int, layerCount:Int, cubeFace:Int, sourceFormat:Int, sourceType:Int, data:Int,
			options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetData6", mipLevel, layer, layerCount, cubeFace, sourceFormat, sourceType, data, options
		]);
	};

	public function SetData7(mipLevel:Int, layer:Int, sourceFormat:Int, sourceType:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetData7", mipLevel, layer, sourceFormat, sourceType, data, options
		]);
	};

	public function SetData8(mipLevel:Int, sourceFormat:Int, sourceType:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetData8",
			mipLevel,
			sourceFormat,
			sourceType,
			data,
			options
		]);
	};

	public function SetData9(sourceFormat:Int, sourceType:Int, data:Int, options:QOpenGLPixelTransferOptions_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetData9", sourceFormat, sourceType, data, options]);
	};

	public function SetData10(image:QImage_ITF, genMipMaps:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetData10", image, genMipMaps]);
	};

	public function SetDepthStencilMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDepthStencilMode", mode]);
	};

	public function SetFixedSamplePositions(fixed:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFixedSamplePositions", fixed]);
	};

	public function SetFormat(format:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetLayers(layers:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLayers", layers]);
	};

	public function SetLevelOfDetailRange(mi:Float, max:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLevelOfDetailRange", mi, max]);
	};

	public function SetLevelofDetailBias(bias:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLevelofDetailBias", bias]);
	};

	public function SetMagnificationFilter(filter:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMagnificationFilter", filter]);
	};

	public function SetMaximumAnisotropy(anisotropy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumAnisotropy", anisotropy]);
	};

	public function SetMaximumLevelOfDetail(value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumLevelOfDetail", value]);
	};

	public function SetMinMagFilters(minificationFilter:Int, magnificationFilter:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetMinMagFilters",
			minificationFilter,
			magnificationFilter
		]);
	};

	public function SetMinificationFilter(filter:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinificationFilter", filter]);
	};

	public function SetMinimumLevelOfDetail(value:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumLevelOfDetail", value]);
	};

	public function SetMipBaseLevel(baseLevel:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMipBaseLevel", baseLevel]);
	};

	public function SetMipLevelRange(baseLevel:Int, maxLevel:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMipLevelRange", baseLevel, maxLevel]);
	};

	public function SetMipLevels(levels:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMipLevels", levels]);
	};

	public function SetMipMaxLevel(maxLevel:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMipMaxLevel", maxLevel]);
	};

	public function SetSamples(samples:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSamples", samples]);
	};

	public function SetSize(width:Int, height:Int, depth:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSize", width, height, depth]);
	};

	public function SetSwizzleMask(component:Int, value:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSwizzleMask", component, value]);
	};

	public function SetSwizzleMask2(r:Int, g:Int, b:Int, a:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSwizzleMask2", r, g, b, a]);
	};

	public function SetWrapMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWrapMode", mode]);
	};

	public function SetWrapMode2(direction:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWrapMode2", direction, mode]);
	};

	public function SwizzleMask(component:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SwizzleMask", component]);
	};

	public function Target():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Target"]);
	};

	public function TextureId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextureId"]);
	};

	public function Width():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function WrapMode(direction:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WrapMode", direction]);
	};
}

function NewQOpenGLTextureFromPointer(ptr:String):QOpenGLTexture {
	final r = new QOpenGLTexture();
	r.initFrom(ptr, "gui.QOpenGLTexture");
	return r;
}

function NewQOpenGLTexture(target:Int):QOpenGLTexture {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLTexture", "", target]);
}

function NewQOpenGLTexture2(image:QImage_ITF, genMipMaps:Int):QOpenGLTexture {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLTexture2", "", image, genMipMaps]);
}

function QOpenGLTexture_BoundTextureId(target:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLTexture_BoundTextureId", "", target]);
}

function QOpenGLTexture_BoundTextureId2(unit:Int, target:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLTexture_BoundTextureId2", "", unit, target]);
}

function QOpenGLTexture_HasFeature(feature:Int):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLTexture_HasFeature", "", feature]);
}

interface QOpenGLTextureBlitter_ITF {
	public function QOpenGLTextureBlitter_PTR():QOpenGLTextureBlitter;
}

class QOpenGLTextureBlitter extends Internal implements QOpenGLTextureBlitter_ITF {
	public function new() {
		super();
	}

	public function QOpenGLTextureBlitter_PTR():QOpenGLTextureBlitter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLTextureBlitter_PTR"]);
	};

	public function Bind(target:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Bind", target]);
	};

	public function Blit(texture:Int, targetTransform:QMatrix4x4_ITF, sourceOrigi:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Blit", texture, targetTransform, sourceOrigi]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function IsCreated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCreated"]);
	};

	public function Release() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function SetOpacity(opacity:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOpacity", opacity]);
	};

	public function SetRedBlueSwizzle(swizzle:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRedBlueSwizzle", swizzle]);
	};

	public function SupportsExternalOESTarget():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsExternalOESTarget"]);
	};

	public function TargetTransform(target:QRectF_ITF, viewport:QRect_ITF):QMatrix4x4 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TargetTransform", target, viewport]);
	};

	public function DestroyQOpenGLTextureBlitter() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLTextureBlitter"]);
	};
}

function NewQOpenGLTextureBlitterFromPointer(ptr:String):QOpenGLTextureBlitter {
	final r = new QOpenGLTextureBlitter();
	r.initFrom(ptr, "gui.QOpenGLTextureBlitter");
	return r;
}

function NewQOpenGLTextureBlitter():QOpenGLTextureBlitter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLTextureBlitter", ""]);
}

function QOpenGLTextureBlitter_TargetTransform(target:QRectF_ITF, viewport:QRect_ITF):QMatrix4x4 {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QOpenGLTextureBlitter_TargetTransform", "", target, viewport]);
}

interface QOpenGLTimeMonitor_ITF extends QObject_ITF {
	public function QOpenGLTimeMonitor_PTR():QOpenGLTimeMonitor;
}

class QOpenGLTimeMonitor extends QObject implements QOpenGLTimeMonitor_ITF {
	public function new() {
		super();
	}

	public function QOpenGLTimeMonitor_PTR():QOpenGLTimeMonitor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLTimeMonitor_PTR"]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function IsCreated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCreated"]);
	};

	public function IsResultAvailable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsResultAvailable"]);
	};

	public function ObjectIds():Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectIds"]);
	};

	public function RecordSample():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RecordSample"]);
	};

	public function Reset() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Reset"]);
	};

	public function SampleCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SampleCount"]);
	};

	public function SetSampleCount(sampleCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSampleCount", sampleCount]);
	};

	public function ConnectDestroyQOpenGLTimeMonitor(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLTimeMonitor",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLTimeMonitor() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLTimeMonitor"]);
	};

	public function DestroyQOpenGLTimeMonitor() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLTimeMonitor"]);
	};

	public function DestroyQOpenGLTimeMonitorDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLTimeMonitorDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLTimeMonitorFromPointer(ptr:String):QOpenGLTimeMonitor {
	final r = new QOpenGLTimeMonitor();
	r.initFrom(ptr, "gui.QOpenGLTimeMonitor");
	return r;
}

function NewQOpenGLTimeMonitor(parent:QObject_ITF):QOpenGLTimeMonitor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLTimeMonitor", "", parent]);
}

interface QOpenGLTimerQuery_ITF extends QObject_ITF {
	public function QOpenGLTimerQuery_PTR():QOpenGLTimerQuery;
}

class QOpenGLTimerQuery extends QObject implements QOpenGLTimerQuery_ITF {
	public function new() {
		super();
	}

	public function QOpenGLTimerQuery_PTR():QOpenGLTimerQuery {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLTimerQuery_PTR"]);
	};

	public function Begin() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Begin"]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function End() {
		Internal.callLocalFunction(["", Pointer(), ___className, "End"]);
	};

	public function IsCreated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCreated"]);
	};

	public function IsResultAvailable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsResultAvailable"]);
	};

	public function ObjectId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectId"]);
	};

	public function RecordTimestamp() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RecordTimestamp"]);
	};

	public function ConnectDestroyQOpenGLTimerQuery(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLTimerQuery",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLTimerQuery() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLTimerQuery"]);
	};

	public function DestroyQOpenGLTimerQuery() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLTimerQuery"]);
	};

	public function DestroyQOpenGLTimerQueryDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLTimerQueryDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLTimerQueryFromPointer(ptr:String):QOpenGLTimerQuery {
	final r = new QOpenGLTimerQuery();
	r.initFrom(ptr, "gui.QOpenGLTimerQuery");
	return r;
}

function NewQOpenGLTimerQuery(parent:QObject_ITF):QOpenGLTimerQuery {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLTimerQuery", "", parent]);
}

interface QOpenGLVersionFunctionsBackend_ITF {
	public function QOpenGLVersionFunctionsBackend_PTR():QOpenGLVersionFunctionsBackend;
}

class QOpenGLVersionFunctionsBackend extends Internal implements QOpenGLVersionFunctionsBackend_ITF {
	public function new() {
		super();
	}

	public function QOpenGLVersionFunctionsBackend_PTR():QOpenGLVersionFunctionsBackend {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLVersionFunctionsBackend_PTR"]);
	};

	public function DestroyQOpenGLVersionFunctionsBackend() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLVersionFunctionsBackend"]);
	};
}

function NewQOpenGLVersionFunctionsBackendFromPointer(ptr:String):QOpenGLVersionFunctionsBackend {
	final r = new QOpenGLVersionFunctionsBackend();
	r.initFrom(ptr, "gui.QOpenGLVersionFunctionsBackend");
	return r;
}

interface QOpenGLVersionFunctionsStorage_ITF {
	public function QOpenGLVersionFunctionsStorage_PTR():QOpenGLVersionFunctionsStorage;
}

class QOpenGLVersionFunctionsStorage extends Internal implements QOpenGLVersionFunctionsStorage_ITF {
	public function new() {
		super();
	}

	public function QOpenGLVersionFunctionsStorage_PTR():QOpenGLVersionFunctionsStorage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLVersionFunctionsStorage_PTR"]);
	};

	public function DestroyQOpenGLVersionFunctionsStorage() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLVersionFunctionsStorage"]);
	};
}

function NewQOpenGLVersionFunctionsStorageFromPointer(ptr:String):QOpenGLVersionFunctionsStorage {
	final r = new QOpenGLVersionFunctionsStorage();
	r.initFrom(ptr, "gui.QOpenGLVersionFunctionsStorage");
	return r;
}

interface QOpenGLVersionProfile_ITF {
	public function QOpenGLVersionProfile_PTR():QOpenGLVersionProfile;
}

class QOpenGLVersionProfile extends Internal implements QOpenGLVersionProfile_ITF {
	public function new() {
		super();
	}

	public function QOpenGLVersionProfile_PTR():QOpenGLVersionProfile {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLVersionProfile_PTR"]);
	};

	public function HasProfiles():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasProfiles"]);
	};

	public function IsLegacyVersion():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsLegacyVersion"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Profile():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Profile"]);
	};

	public function SetProfile(profile:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetProfile", profile]);
	};

	public function SetVersion(majorVersion:Int, minorVersion:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVersion", majorVersion, minorVersion]);
	};

	public function DestroyQOpenGLVersionProfile() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLVersionProfile"]);
	};
}

function NewQOpenGLVersionProfileFromPointer(ptr:String):QOpenGLVersionProfile {
	final r = new QOpenGLVersionProfile();
	r.initFrom(ptr, "gui.QOpenGLVersionProfile");
	return r;
}

function NewQOpenGLVersionProfile():QOpenGLVersionProfile {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLVersionProfile", ""]);
}

function NewQOpenGLVersionProfile2(format:QSurfaceFormat_ITF):QOpenGLVersionProfile {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLVersionProfile2", "", format]);
}

function NewQOpenGLVersionProfile3(other:QOpenGLVersionProfile_ITF):QOpenGLVersionProfile {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLVersionProfile3", "", other]);
}

interface QOpenGLVersionStatus_ITF {
	public function QOpenGLVersionStatus_PTR():QOpenGLVersionStatus;
}

class QOpenGLVersionStatus extends Internal implements QOpenGLVersionStatus_ITF {
	public function new() {
		super();
	}

	public function QOpenGLVersionStatus_PTR():QOpenGLVersionStatus {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLVersionStatus_PTR"]);
	};

	public function DestroyQOpenGLVersionStatus() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLVersionStatus"]);
	};
}

function NewQOpenGLVersionStatusFromPointer(ptr:String):QOpenGLVersionStatus {
	final r = new QOpenGLVersionStatus();
	r.initFrom(ptr, "gui.QOpenGLVersionStatus");
	return r;
}

interface QOpenGLVertexArrayObject_ITF extends QObject_ITF {
	public function QOpenGLVertexArrayObject_PTR():QOpenGLVertexArrayObject;
}

class QOpenGLVertexArrayObject extends QObject implements QOpenGLVertexArrayObject_ITF {
	public function new() {
		super();
	}

	public function QOpenGLVertexArrayObject_PTR():QOpenGLVertexArrayObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLVertexArrayObject_PTR"]);
	};

	public function Bind() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Bind"]);
	};

	public function Create():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function IsCreated():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCreated"]);
	};

	public function ObjectId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectId"]);
	};

	public function Release() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function ConnectDestroyQOpenGLVertexArrayObject(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLVertexArrayObject",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLVertexArrayObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLVertexArrayObject"]);
	};

	public function DestroyQOpenGLVertexArrayObject() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLVertexArrayObject"]);
	};

	public function DestroyQOpenGLVertexArrayObjectDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLVertexArrayObjectDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQOpenGLVertexArrayObjectFromPointer(ptr:String):QOpenGLVertexArrayObject {
	final r = new QOpenGLVertexArrayObject();
	r.initFrom(ptr, "gui.QOpenGLVertexArrayObject");
	return r;
}

function NewQOpenGLVertexArrayObject(parent:QObject_ITF):QOpenGLVertexArrayObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLVertexArrayObject", "", parent]);
}

interface QOpenGLWindow_ITF extends QPaintDeviceWindow_ITF {
	public function QOpenGLWindow_PTR():QOpenGLWindow;
}

class QOpenGLWindow extends QPaintDeviceWindow implements QOpenGLWindow_ITF {
	public function new() {
		super();
	}

	public function QOpenGLWindow_PTR():QOpenGLWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QOpenGLWindow_PTR"]);
	};

	public function Context():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Context"]);
	};

	public function DefaultFramebufferObject():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultFramebufferObject"]);
	};

	public function DoneCurrent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DoneCurrent"]);
	};

	public function ConnectFrameSwapped(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFrameSwapped", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFrameSwapped() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFrameSwapped"]);
	};

	public function FrameSwapped() {
		Internal.callLocalFunction(["", Pointer(), ___className, "FrameSwapped"]);
	};

	public function GrabFramebuffer():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GrabFramebuffer"]);
	};

	public function ConnectInitializeGL(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectInitializeGL", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectInitializeGL() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInitializeGL"]);
	};

	public function InitializeGL() {
		Internal.callLocalFunction(["", Pointer(), ___className, "InitializeGL"]);
	};

	public function InitializeGLDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "InitializeGLDefault"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function MakeCurrent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "MakeCurrent"]);
	};

	public function ConnectPaintGL(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintGL", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaintGL() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintGL"]);
	};

	public function PaintGL() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintGL"]);
	};

	public function PaintGLDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintGLDefault"]);
	};

	public function ConnectPaintOverGL(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintOverGL", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaintOverGL() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintOverGL"]);
	};

	public function PaintOverGL() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintOverGL"]);
	};

	public function PaintOverGLDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintOverGLDefault"]);
	};

	public function ConnectPaintUnderGL(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintUnderGL", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaintUnderGL() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintUnderGL"]);
	};

	public function PaintUnderGL() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintUnderGL"]);
	};

	public function PaintUnderGLDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintUnderGLDefault"]);
	};

	public function ConnectResizeGL(f:(w:Int, h:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectResizeGL", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectResizeGL() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectResizeGL"]);
	};

	public function ResizeGL(w:Int, h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResizeGL", w, h]);
	};

	public function ResizeGLDefault(w:Int, h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResizeGLDefault", w, h]);
	};

	public function ShareContext():QOpenGLContext {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShareContext"]);
	};

	public function UpdateBehavior():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UpdateBehavior"]);
	};

	public function ConnectDestroyQOpenGLWindow(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQOpenGLWindow",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQOpenGLWindow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQOpenGLWindow"]);
	};

	public function DestroyQOpenGLWindow() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLWindow"]);
	};

	public function DestroyQOpenGLWindowDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQOpenGLWindowDefault"]);
	};
}

function NewQOpenGLWindowFromPointer(ptr:String):QOpenGLWindow {
	final r = new QOpenGLWindow();
	r.initFrom(ptr, "gui.QOpenGLWindow");
	return r;
}

function NewQOpenGLWindow(updateBehavior:Int, parent:QWindow_ITF):QOpenGLWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLWindow", "", updateBehavior, parent]);
}

function NewQOpenGLWindow2(shareContext:QOpenGLContext_ITF, updateBehavior:Int, parent:QWindow_ITF):QOpenGLWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQOpenGLWindow2", "", shareContext, updateBehavior, parent]);
}

interface QPageLayout_ITF {
	public function QPageLayout_PTR():QPageLayout;
}

class QPageLayout extends Internal implements QPageLayout_ITF {
	public function new() {
		super();
	}

	public function QPageLayout_PTR():QPageLayout {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPageLayout_PTR"]);
	};

	public function FullRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FullRect"]);
	};

	public function FullRect2(units:Int):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FullRect2", units]);
	};

	public function FullRectPixels(resolution:Int):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FullRectPixels", resolution]);
	};

	public function FullRectPoints():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FullRectPoints"]);
	};

	public function IsEquivalentTo(other:QPageLayout_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEquivalentTo", other]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Margins():QMarginsF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Margins"]);
	};

	public function Margins2(units:Int):QMarginsF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Margins2", units]);
	};

	public function MarginsPixels(resolution:Int):QMargins {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MarginsPixels", resolution]);
	};

	public function MarginsPoints():QMargins {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MarginsPoints"]);
	};

	public function MaximumMargins():QMarginsF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumMargins"]);
	};

	public function MinimumMargins():QMarginsF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumMargins"]);
	};

	public function Mode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mode"]);
	};

	public function Orientation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Orientation"]);
	};

	public function PageSize():QPageSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageSize"]);
	};

	public function PaintRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintRect"]);
	};

	public function PaintRect2(units:Int):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintRect2", units]);
	};

	public function PaintRectPixels(resolution:Int):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintRectPixels", resolution]);
	};

	public function PaintRectPoints():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintRectPoints"]);
	};

	public function SetBottomMargin(bottomMargi:Float):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetBottomMargin", bottomMargi]);
	};

	public function SetLeftMargin(leftMargi:Float):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetLeftMargin", leftMargi]);
	};

	public function SetMargins(margins:QMarginsF_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetMargins", margins]);
	};

	public function SetMinimumMargins(minMargins:QMarginsF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumMargins", minMargins]);
	};

	public function SetMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMode", mode]);
	};

	public function SetOrientation(orientation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOrientation", orientation]);
	};

	public function SetPageSize(pageSize:QPageSize_ITF, minMargins:QMarginsF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSize", pageSize, minMargins]);
	};

	public function SetRightMargin(rightMargi:Float):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetRightMargin", rightMargi]);
	};

	public function SetTopMargin(topMargi:Float):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetTopMargin", topMargi]);
	};

	public function SetUnits(units:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUnits", units]);
	};

	public function Swap(other:QPageLayout_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Units():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Units"]);
	};

	public function DestroyQPageLayout() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPageLayout"]);
	};
}

function NewQPageLayoutFromPointer(ptr:String):QPageLayout {
	final r = new QPageLayout();
	r.initFrom(ptr, "gui.QPageLayout");
	return r;
}

function NewQPageLayout():QPageLayout {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageLayout", ""]);
}

function NewQPageLayout2(pageSize:QPageSize_ITF, orientation:Int, margins:QMarginsF_ITF, units:Int, minMargins:QMarginsF_ITF):QPageLayout {
	Gui.initModule();
	return Internal.callLocalFunction([
		"",
		"",
		"gui.NewQPageLayout2",
		"",
		pageSize,
		orientation,
		margins,
		units,
		minMargins
	]);
}

function NewQPageLayout3(other:QPageLayout_ITF):QPageLayout {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageLayout3", "", other]);
}

interface QPageSize_ITF {
	public function QPageSize_PTR():QPageSize;
}

class QPageSize extends Internal implements QPageSize_ITF {
	public function new() {
		super();
	}

	public function QPageSize_PTR():QPageSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPageSize_PTR"]);
	};

	public function DefinitionSize():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefinitionSize"]);
	};

	public function DefinitionSize2(pageSizeId:Int):QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefinitionSize2", pageSizeId]);
	};

	public function DefinitionUnits():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefinitionUnits"]);
	};

	public function DefinitionUnits2(pageSizeId:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefinitionUnits2", pageSizeId]);
	};

	public function Id():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Id"]);
	};

	public function Id2(pointSize:QSize_ITF, matchPolicy:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Id2", pointSize, matchPolicy]);
	};

	public function Id3(size:QSizeF_ITF, units:Int, matchPolicy:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Id3", size, units, matchPolicy]);
	};

	public function Id4(windowsId:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Id4", windowsId]);
	};

	public function IsEquivalentTo(other:QPageSize_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEquivalentTo", other]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Key():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Key"]);
	};

	public function Key2(pageSizeId:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Key2", pageSizeId]);
	};

	public function Name():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name"]);
	};

	public function Name2(pageSizeId:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name2", pageSizeId]);
	};

	public function Rect(units:Int):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect", units]);
	};

	public function RectPixels(resolution:Int):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RectPixels", resolution]);
	};

	public function RectPoints():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RectPoints"]);
	};

	public function Size(units:Int):QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size", units]);
	};

	public function Size2(pageSizeId:Int, units:Int):QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size2", pageSizeId, units]);
	};

	public function SizePixels(resolution:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizePixels", resolution]);
	};

	public function SizePixels2(pageSizeId:Int, resolution:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizePixels2", pageSizeId, resolution]);
	};

	public function SizePoints():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizePoints"]);
	};

	public function SizePoints2(pageSizeId:Int):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizePoints2", pageSizeId]);
	};

	public function Swap(other:QPageSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function WindowsId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowsId"]);
	};

	public function WindowsId2(pageSizeId:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowsId2", pageSizeId]);
	};

	public function DestroyQPageSize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPageSize"]);
	};
}

function NewQPageSizeFromPointer(ptr:String):QPageSize {
	final r = new QPageSize();
	r.initFrom(ptr, "gui.QPageSize");
	return r;
}

function NewQPageSize():QPageSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageSize", ""]);
}

function NewQPageSize2(pageSize:Int):QPageSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageSize2", "", pageSize]);
}

function NewQPageSize3(pointSize:QSize_ITF, name:String, matchPolicy:Int):QPageSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageSize3", "", pointSize, name, matchPolicy]);
}

function NewQPageSize4(size:QSizeF_ITF, units:Int, name:String, matchPolicy:Int):QPageSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageSize4", "", size, units, name, matchPolicy]);
}

function NewQPageSize5(other:QPageSize_ITF):QPageSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPageSize5", "", other]);
}

function QPageSize_DefinitionSize2(pageSizeId:Int):QSizeF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_DefinitionSize2", "", pageSizeId]);
}

function QPageSize_DefinitionUnits2(pageSizeId:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_DefinitionUnits2", "", pageSizeId]);
}

function QPageSize_Id2(pointSize:QSize_ITF, matchPolicy:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_Id2", "", pointSize, matchPolicy]);
}

function QPageSize_Id3(size:QSizeF_ITF, units:Int, matchPolicy:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_Id3", "", size, units, matchPolicy]);
}

function QPageSize_Id4(windowsId:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_Id4", "", windowsId]);
}

function QPageSize_Key2(pageSizeId:Int):String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_Key2", "", pageSizeId]);
}

function QPageSize_Name2(pageSizeId:Int):String {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_Name2", "", pageSizeId]);
}

function QPageSize_Size2(pageSizeId:Int, units:Int):QSizeF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_Size2", "", pageSizeId, units]);
}

function QPageSize_SizePixels2(pageSizeId:Int, resolution:Int):QSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_SizePixels2", "", pageSizeId, resolution]);
}

function QPageSize_SizePoints2(pageSizeId:Int):QSize {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_SizePoints2", "", pageSizeId]);
}

function QPageSize_WindowsId2(pageSizeId:Int):Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPageSize_WindowsId2", "", pageSizeId]);
}

interface QPagedPaintDevice_ITF extends QPaintDevice_ITF {
	public function QPagedPaintDevice_PTR():QPagedPaintDevice;
}

class QPagedPaintDevice extends QPaintDevice implements QPagedPaintDevice_ITF {
	public function new() {
		super();
	}

	public function QPagedPaintDevice_PTR():QPagedPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPagedPaintDevice_PTR"]);
	};

	public function ConnectNewPage(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectNewPage", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectNewPage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectNewPage"]);
	};

	public function NewPage():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NewPage"]);
	};

	public function PageLayout():QPageLayout {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageLayout"]);
	};

	public function PageSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageSize"]);
	};

	public function PageSizeMM():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageSizeMM"]);
	};

	public function SetPageLayout(newPageLayout:QPageLayout_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetPageLayout", newPageLayout]);
	};

	public function SetPageMargins(margins:QMarginsF_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetPageMargins", margins]);
	};

	public function SetPageMargins2(margins:QMarginsF_ITF, units:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetPageMargins2", margins, units]);
	};

	public function SetPageOrientation(orientation:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetPageOrientation", orientation]);
	};

	public function SetPageSize(pageSize:QPageSize_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSize", pageSize]);
	};

	public function ConnectSetPageSize2(f:(size:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetPageSize2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetPageSize2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetPageSize2"]);
	};

	public function SetPageSize2(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSize2", size]);
	};

	public function SetPageSize2Default(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSize2Default", size]);
	};

	public function ConnectSetPageSizeMM(f:(size:QSizeF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetPageSizeMM", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetPageSizeMM() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetPageSizeMM"]);
	};

	public function SetPageSizeMM(size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSizeMM", size]);
	};

	public function SetPageSizeMMDefault(size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSizeMMDefault", size]);
	};

	public function ConnectDestroyQPagedPaintDevice(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQPagedPaintDevice",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQPagedPaintDevice() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPagedPaintDevice"]);
	};

	public function DestroyQPagedPaintDevice() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPagedPaintDevice"]);
	};

	public function DestroyQPagedPaintDeviceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPagedPaintDeviceDefault"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};
}

function NewQPagedPaintDeviceFromPointer(ptr:String):QPagedPaintDevice {
	final r = new QPagedPaintDevice();
	r.initFrom(ptr, "gui.QPagedPaintDevice");
	return r;
}

interface QPaintDevice_ITF {
	public function QPaintDevice_PTR():QPaintDevice;
}

class QPaintDevice extends Internal implements QPaintDevice_ITF {
	public function new() {
		super();
	}

	public function QPaintDevice_PTR():QPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPaintDevice_PTR"]);
	};

	public function ColorCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColorCount"]);
	};

	public function Depth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Depth"]);
	};

	public function DevicePixelRatio():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatio"]);
	};

	public function DevicePixelRatioF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatioF"]);
	};

	public function Height():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function HeightMM():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HeightMM"]);
	};

	public function LogicalDpiX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LogicalDpiX"]);
	};

	public function LogicalDpiY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LogicalDpiY"]);
	};

	public function ConnectMetric(f:(metric:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMetric", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMetric() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMetric"]);
	};

	public function Metric(metric:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Metric", metric]);
	};

	public function MetricDefault(metric:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetricDefault", metric]);
	};

	public function ConnectPaintEngine(f:() -> QPaintEngine) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintEngine", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaintEngine() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintEngine"]);
	};

	public function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintingActive():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintingActive"]);
	};

	public function PhysicalDpiX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalDpiX"]);
	};

	public function PhysicalDpiY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalDpiY"]);
	};

	public function Width():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function WidthMM():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WidthMM"]);
	};

	public function ConnectDestroyQPaintDevice(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQPaintDevice",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQPaintDevice() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPaintDevice"]);
	};

	public function DestroyQPaintDevice() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPaintDevice"]);
	};

	public function DestroyQPaintDeviceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPaintDeviceDefault"]);
	};
}

function NewQPaintDeviceFromPointer(ptr:String):QPaintDevice {
	final r = new QPaintDevice();
	r.initFrom(ptr, "gui.QPaintDevice");
	return r;
}

function NewQPaintDevice():QPaintDevice {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPaintDevice", ""]);
}

interface QPaintDeviceWindow_ITF extends QPaintDevice_ITF {
	public function QPaintDeviceWindow_PTR():QPaintDeviceWindow;
	public function QWindow_PTR():QWindow;
}

class QPaintDeviceWindow extends QPaintDevice implements QPaintDeviceWindow_ITF {
	public function QWindow_PTR():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QWindow_PTR"]);
	}

	public function new() {
		super();
	}

	public function QPaintDeviceWindow_PTR():QPaintDeviceWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPaintDeviceWindow_PTR"]);
	};

	public function ConnectPaintEvent(f:(event:QPaintEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectPaintEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintEvent"]);
	};

	public function PaintEvent(event:QPaintEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintEvent", event]);
	};

	public function PaintEventDefault(event:QPaintEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PaintEventDefault", event]);
	};

	public function Update(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Update", rect]);
	};

	public function Update2(region:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Update2", region]);
	};

	public function ConnectUpdate3(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUpdate3", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUpdate3() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUpdate3"]);
	};

	public function Update3() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Update3"]);
	};

	public function Update3Default() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Update3Default"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};
}

function NewQPaintDeviceWindowFromPointer(ptr:String):QPaintDeviceWindow {
	final r = new QPaintDeviceWindow();
	r.initFrom(ptr, "gui.QPaintDeviceWindow");
	return r;
}

interface QPaintEngine_ITF {
	public function QPaintEngine_PTR():QPaintEngine;
}

class QPaintEngine extends Internal implements QPaintEngine_ITF {
	public function new() {
		super();
	}

	public function QPaintEngine_PTR():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPaintEngine_PTR"]);
	};

	public function ConnectBegin(f:(pdev:QPaintDevice) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBegin", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBegin() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBegin"]);
	};

	public function Begin(pdev:QPaintDevice_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Begin", pdev]);
	};

	public function ConnectDrawEllipse(f:(rect:QRectF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawEllipse", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawEllipse() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawEllipse"]);
	};

	public function DrawEllipse(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse", rect]);
	};

	public function DrawEllipseDefault(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipseDefault", rect]);
	};

	public function ConnectDrawEllipse2(f:(rect:QRect) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawEllipse2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawEllipse2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawEllipse2"]);
	};

	public function DrawEllipse2(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse2", rect]);
	};

	public function DrawEllipse2Default(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse2Default", rect]);
	};

	public function ConnectDrawImage(f:(rectangle:QRectF, image:QImage, sr:QRectF, flags:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawImage", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawImage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawImage"]);
	};

	public function DrawImage(rectangle:QRectF_ITF, image:QImage_ITF, sr:QRectF_ITF, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage", rectangle, image, sr, flags]);
	};

	public function DrawImageDefault(rectangle:QRectF_ITF, image:QImage_ITF, sr:QRectF_ITF, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImageDefault", rectangle, image, sr, flags]);
	};

	public function ConnectDrawLines(f:(lines:QLineF, lineCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawLines", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawLines() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawLines"]);
	};

	public function DrawLines(lines:QLineF_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines", lines, lineCount]);
	};

	public function DrawLinesDefault(lines:QLineF_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLinesDefault", lines, lineCount]);
	};

	public function ConnectDrawLines2(f:(lines:QLine, lineCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawLines2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawLines2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawLines2"]);
	};

	public function DrawLines2(lines:QLine_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines2", lines, lineCount]);
	};

	public function DrawLines2Default(lines:QLine_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines2Default", lines, lineCount]);
	};

	public function ConnectDrawPath(f:(path:QPainterPath) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawPath", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawPath() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawPath"]);
	};

	public function DrawPath(path:QPainterPath_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPath", path]);
	};

	public function DrawPathDefault(path:QPainterPath_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPathDefault", path]);
	};

	public function ConnectDrawPixmap(f:(r:QRectF, pm:QPixmap, sr:QRectF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawPixmap", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawPixmap() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawPixmap"]);
	};

	public function DrawPixmap(r:QRectF_ITF, pm:QPixmap_ITF, sr:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap", r, pm, sr]);
	};

	public function ConnectDrawPoints(f:(points:QPointF, pointCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawPoints", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawPoints() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawPoints"]);
	};

	public function DrawPoints(points:QPointF_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints", points, pointCount]);
	};

	public function DrawPointsDefault(points:QPointF_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPointsDefault", points, pointCount]);
	};

	public function ConnectDrawPoints2(f:(points:QPoint, pointCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawPoints2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawPoints2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawPoints2"]);
	};

	public function DrawPoints2(points:QPoint_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints2", points, pointCount]);
	};

	public function DrawPoints2Default(points:QPoint_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints2Default", points, pointCount]);
	};

	public function ConnectDrawPolygon(f:(points:QPointF, pointCount:Int, mode:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawPolygon", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawPolygon() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawPolygon"]);
	};

	public function DrawPolygon(points:QPointF_ITF, pointCount:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon", points, pointCount, mode]);
	};

	public function DrawPolygonDefault(points:QPointF_ITF, pointCount:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygonDefault", points, pointCount, mode]);
	};

	public function ConnectDrawPolygon2(f:(points:QPoint, pointCount:Int, mode:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawPolygon2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawPolygon2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawPolygon2"]);
	};

	public function DrawPolygon2(points:QPoint_ITF, pointCount:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon2", points, pointCount, mode]);
	};

	public function DrawPolygon2Default(points:QPoint_ITF, pointCount:Int, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon2Default", points, pointCount, mode]);
	};

	public function ConnectDrawRects(f:(rects:QRectF, rectCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawRects", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawRects() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawRects"]);
	};

	public function DrawRects(rects:QRectF_ITF, rectCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects", rects, rectCount]);
	};

	public function DrawRectsDefault(rects:QRectF_ITF, rectCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRectsDefault", rects, rectCount]);
	};

	public function ConnectDrawRects2(f:(rects:QRect, rectCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawRects2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawRects2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawRects2"]);
	};

	public function DrawRects2(rects:QRect_ITF, rectCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects2", rects, rectCount]);
	};

	public function DrawRects2Default(rects:QRect_ITF, rectCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects2Default", rects, rectCount]);
	};

	public function ConnectDrawTextItem(f:(p:QPointF, textItem:QTextItem) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawTextItem", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawTextItem() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawTextItem"]);
	};

	public function DrawTextItem(p:QPointF_ITF, textItem:QTextItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawTextItem", p, textItem]);
	};

	public function DrawTextItemDefault(p:QPointF_ITF, textItem:QTextItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawTextItemDefault", p, textItem]);
	};

	public function ConnectDrawTiledPixmap(f:(rect:QRectF, pixmap:QPixmap, p:QPointF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawTiledPixmap", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawTiledPixmap() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawTiledPixmap"]);
	};

	public function DrawTiledPixmap(rect:QRectF_ITF, pixmap:QPixmap_ITF, p:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawTiledPixmap", rect, pixmap, p]);
	};

	public function DrawTiledPixmapDefault(rect:QRectF_ITF, pixmap:QPixmap_ITF, p:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawTiledPixmapDefault", rect, pixmap, p]);
	};

	public function ConnectEnd(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectEnd", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectEnd() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectEnd"]);
	};

	public function End():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "End"]);
	};

	public function HasFeature(feature:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasFeature", feature]);
	};

	public function IsActive():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsActive"]);
	};

	public function PaintDevice():QPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintDevice"]);
	};

	public function Painter():QPainter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Painter"]);
	};

	public function SetActive(state:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetActive", state]);
	};

	public function ConnectType(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectType", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectType() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectType"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function ConnectUpdateState(f:(state:QPaintEngineState) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUpdateState", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUpdateState() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUpdateState"]);
	};

	public function UpdateState(state:QPaintEngineState_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UpdateState", state]);
	};

	public function ConnectDestroyQPaintEngine(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQPaintEngine",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQPaintEngine() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPaintEngine"]);
	};

	public function DestroyQPaintEngine() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPaintEngine"]);
	};

	public function DestroyQPaintEngineDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPaintEngineDefault"]);
	};
}

function NewQPaintEngineFromPointer(ptr:String):QPaintEngine {
	final r = new QPaintEngine();
	r.initFrom(ptr, "gui.QPaintEngine");
	return r;
}

function NewQPaintEngine(caps:Int):QPaintEngine {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPaintEngine", "", caps]);
}

interface QPaintEngineState_ITF {
	public function QPaintEngineState_PTR():QPaintEngineState;
}

class QPaintEngineState extends Internal implements QPaintEngineState_ITF {
	public function new() {
		super();
	}

	public function QPaintEngineState_PTR():QPaintEngineState {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPaintEngineState_PTR"]);
	};

	public function DestroyQPaintEngineState() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPaintEngineState"]);
	};

	public function BackgroundBrush():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundBrush"]);
	};

	public function BackgroundMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundMode"]);
	};

	public function Brush():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Brush"]);
	};

	public function BrushNeedsResolving():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BrushNeedsResolving"]);
	};

	public function BrushOrigin():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BrushOrigin"]);
	};

	public function ClipOperation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipOperation"]);
	};

	public function ClipPath():QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipPath"]);
	};

	public function ClipRegion():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipRegion"]);
	};

	public function CompositionMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CompositionMode"]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function IsClipEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsClipEnabled"]);
	};

	public function Opacity():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Opacity"]);
	};

	public function Painter():QPainter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Painter"]);
	};

	public function Pen():QPen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pen"]);
	};

	public function PenNeedsResolving():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PenNeedsResolving"]);
	};

	public function RenderHints():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RenderHints"]);
	};

	public function State():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "State"]);
	};

	public function Transform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transform"]);
	};
}

function NewQPaintEngineStateFromPointer(ptr:String):QPaintEngineState {
	final r = new QPaintEngineState();
	r.initFrom(ptr, "gui.QPaintEngineState");
	return r;
}

interface QPaintEvent_ITF extends QEvent_ITF {
	public function QPaintEvent_PTR():QPaintEvent;
}

class QPaintEvent extends QEvent implements QPaintEvent_ITF {
	public function new() {
		super();
	}

	public function QPaintEvent_PTR():QPaintEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPaintEvent_PTR"]);
	};

	public function DestroyQPaintEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPaintEvent"]);
	};

	public function Rect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function Region():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Region"]);
	};
}

function NewQPaintEventFromPointer(ptr:String):QPaintEvent {
	final r = new QPaintEvent();
	r.initFrom(ptr, "gui.QPaintEvent");
	return r;
}

function NewQPaintEvent(paintRegion:QRegion_ITF):QPaintEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPaintEvent", "", paintRegion]);
}

function NewQPaintEvent2(paintRect:QRect_ITF):QPaintEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPaintEvent2", "", paintRect]);
}

interface QPainter_ITF {
	public function QPainter_PTR():QPainter;
}

class QPainter extends Internal implements QPainter_ITF {
	public function new() {
		super();
	}

	public function QPainter_PTR():QPainter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPainter_PTR"]);
	};

	public function Background():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Background"]);
	};

	public function BackgroundMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BackgroundMode"]);
	};

	public function Begin(device:QPaintDevice_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Begin", device]);
	};

	public function BeginNativePainting() {
		Internal.callLocalFunction(["", Pointer(), ___className, "BeginNativePainting"]);
	};

	public function BoundingRect(rectangle:QRectF_ITF, flags:Int, text:String):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect", rectangle, flags, text]);
	};

	public function BoundingRect2(rectangle:QRect_ITF, flags:Int, text:String):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect2", rectangle, flags, text]);
	};

	public function BoundingRect3(x:Int, y:Int, w:Int, h:Int, flags:Int, text:String):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect3", x, y, w, h, flags, text]);
	};

	public function BoundingRect4(rectangle:QRectF_ITF, text:String, option:QTextOption_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect4", rectangle, text, option]);
	};

	public function Brush():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Brush"]);
	};

	public function BrushOrigin():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BrushOrigin"]);
	};

	public function ClipBoundingRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipBoundingRect"]);
	};

	public function ClipPath():QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipPath"]);
	};

	public function ClipRegion():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClipRegion"]);
	};

	public function CombinedTransform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CombinedTransform"]);
	};

	public function CompositionMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CompositionMode"]);
	};

	public function Device():QPaintDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function DeviceTransform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DeviceTransform"]);
	};

	public function DrawArc(rectangle:QRectF_ITF, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawArc", rectangle, startAngle, spanAngle]);
	};

	public function DrawArc2(rectangle:QRect_ITF, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawArc2", rectangle, startAngle, spanAngle]);
	};

	public function DrawArc3(x:Int, y:Int, width:Int, height:Int, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "DrawArc3", x, y, width, height, startAngle, spanAngle
		]);
	};

	public function DrawChord(rectangle:QRectF_ITF, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawChord", rectangle, startAngle, spanAngle]);
	};

	public function DrawChord2(x:Int, y:Int, width:Int, height:Int, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "DrawChord2", x, y, width, height, startAngle, spanAngle
		]);
	};

	public function DrawChord3(rectangle:QRect_ITF, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawChord3", rectangle, startAngle, spanAngle]);
	};

	public function DrawConvexPolygon(points:QPointF_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawConvexPolygon", points, pointCount]);
	};

	public function DrawConvexPolygon2(polygon:QPolygonF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawConvexPolygon2", polygon]);
	};

	public function DrawConvexPolygon3(points:QPoint_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawConvexPolygon3", points, pointCount]);
	};

	public function DrawConvexPolygon4(polygon:QPolygon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawConvexPolygon4", polygon]);
	};

	public function DrawEllipse(rectangle:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse", rectangle]);
	};

	public function DrawEllipse2(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse2", rectangle]);
	};

	public function DrawEllipse3(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse3", x, y, width, height]);
	};

	public function DrawEllipse4(center:QPointF_ITF, rx:Float, ry:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse4", center, rx, ry]);
	};

	public function DrawEllipse5(center:QPoint_ITF, rx:Int, ry:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawEllipse5", center, rx, ry]);
	};

	public function DrawGlyphRun(position:QPointF_ITF, glyphs:QGlyphRun_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawGlyphRun", position, glyphs]);
	};

	public function DrawImage(target:QRectF_ITF, image:QImage_ITF, source:QRectF_ITF, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage", target, image, source, flags]);
	};

	public function DrawImage2(target:QRect_ITF, image:QImage_ITF, source:QRect_ITF, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage2", target, image, source, flags]);
	};

	public function DrawImage3(point:QPointF_ITF, image:QImage_ITF, source:QRectF_ITF, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage3", point, image, source, flags]);
	};

	public function DrawImage4(point:QPoint_ITF, image:QImage_ITF, source:QRect_ITF, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage4", point, image, source, flags]);
	};

	public function DrawImage5(rectangle:QRectF_ITF, image:QImage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage5", rectangle, image]);
	};

	public function DrawImage6(rectangle:QRect_ITF, image:QImage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage6", rectangle, image]);
	};

	public function DrawImage7(point:QPointF_ITF, image:QImage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage7", point, image]);
	};

	public function DrawImage8(point:QPoint_ITF, image:QImage_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage8", point, image]);
	};

	public function DrawImage9(x:Int, y:Int, image:QImage_ITF, sx:Int, sy:Int, sw:Int, sh:Int, flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawImage9", x, y, image, sx, sy, sw, sh, flags]);
	};

	public function DrawLine(line:QLineF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLine", line]);
	};

	public function DrawLine2(line:QLine_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLine2", line]);
	};

	public function DrawLine3(x1:Int, y1:Int, x2:Int, y2:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLine3", x1, y1, x2, y2]);
	};

	public function DrawLine4(p1:QPoint_ITF, p2:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLine4", p1, p2]);
	};

	public function DrawLine5(p1:QPointF_ITF, p2:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLine5", p1, p2]);
	};

	public function DrawLines(lines:QLineF_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines", lines, lineCount]);
	};

	public function DrawLines2(lines:Array<QLineF>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines2", lines]);
	};

	public function DrawLines3(pointPairs:QPointF_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines3", pointPairs, lineCount]);
	};

	public function DrawLines4(pointPairs:Array<QPointF>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines4", pointPairs]);
	};

	public function DrawLines5(lines:QLine_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines5", lines, lineCount]);
	};

	public function DrawLines6(lines:Array<QLine>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines6", lines]);
	};

	public function DrawLines7(pointPairs:QPoint_ITF, lineCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines7", pointPairs, lineCount]);
	};

	public function DrawLines8(pointPairs:Array<QPoint>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawLines8", pointPairs]);
	};

	public function DrawPath(path:QPainterPath_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPath", path]);
	};

	public function DrawPicture(point:QPointF_ITF, picture:QPicture_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPicture", point, picture]);
	};

	public function DrawPicture2(x:Int, y:Int, picture:QPicture_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPicture2", x, y, picture]);
	};

	public function DrawPicture3(point:QPoint_ITF, picture:QPicture_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPicture3", point, picture]);
	};

	public function DrawPie(rectangle:QRectF_ITF, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPie", rectangle, startAngle, spanAngle]);
	};

	public function DrawPie2(x:Int, y:Int, width:Int, height:Int, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "DrawPie2", x, y, width, height, startAngle, spanAngle
		]);
	};

	public function DrawPie3(rectangle:QRect_ITF, startAngle:Int, spanAngle:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPie3", rectangle, startAngle, spanAngle]);
	};

	public function DrawPixmap(target:QRectF_ITF, pixmap:QPixmap_ITF, source:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap", target, pixmap, source]);
	};

	public function DrawPixmap2(target:QRect_ITF, pixmap:QPixmap_ITF, source:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap2", target, pixmap, source]);
	};

	public function DrawPixmap3(x:Int, y:Int, w:Int, h:Int, pixmap:QPixmap_ITF, sx:Int, sy:Int, sw:Int, sh:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap3", x, y, w, h, pixmap, sx, sy, sw, sh]);
	};

	public function DrawPixmap4(x:Int, y:Int, pixmap:QPixmap_ITF, sx:Int, sy:Int, sw:Int, sh:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap4", x, y, pixmap, sx, sy, sw, sh]);
	};

	public function DrawPixmap5(point:QPointF_ITF, pixmap:QPixmap_ITF, source:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap5", point, pixmap, source]);
	};

	public function DrawPixmap6(point:QPoint_ITF, pixmap:QPixmap_ITF, source:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap6", point, pixmap, source]);
	};

	public function DrawPixmap7(point:QPointF_ITF, pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap7", point, pixmap]);
	};

	public function DrawPixmap8(point:QPoint_ITF, pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap8", point, pixmap]);
	};

	public function DrawPixmap9(x:Int, y:Int, pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap9", x, y, pixmap]);
	};

	public function DrawPixmap10(rectangle:QRect_ITF, pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap10", rectangle, pixmap]);
	};

	public function DrawPixmap11(x:Int, y:Int, width:Int, height:Int, pixmap:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPixmap11", x, y, width, height, pixmap]);
	};

	public function DrawPoint(position:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoint", position]);
	};

	public function DrawPoint2(position:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoint2", position]);
	};

	public function DrawPoint3(x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoint3", x, y]);
	};

	public function DrawPoints(points:QPointF_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints", points, pointCount]);
	};

	public function DrawPoints2(points:QPolygonF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints2", points]);
	};

	public function DrawPoints3(points:QPoint_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints3", points, pointCount]);
	};

	public function DrawPoints4(points:QPolygon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPoints4", points]);
	};

	public function DrawPolygon(points:QPointF_ITF, pointCount:Int, fillRule:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon", points, pointCount, fillRule]);
	};

	public function DrawPolygon2(points:QPolygonF_ITF, fillRule:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon2", points, fillRule]);
	};

	public function DrawPolygon3(points:QPoint_ITF, pointCount:Int, fillRule:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon3", points, pointCount, fillRule]);
	};

	public function DrawPolygon4(points:QPolygon_ITF, fillRule:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolygon4", points, fillRule]);
	};

	public function DrawPolyline(points:QPointF_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolyline", points, pointCount]);
	};

	public function DrawPolyline2(points:QPolygonF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolyline2", points]);
	};

	public function DrawPolyline3(points:QPoint_ITF, pointCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolyline3", points, pointCount]);
	};

	public function DrawPolyline4(points:QPolygon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawPolyline4", points]);
	};

	public function DrawRect(rectangle:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRect", rectangle]);
	};

	public function DrawRect2(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRect2", x, y, width, height]);
	};

	public function DrawRect3(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRect3", rectangle]);
	};

	public function DrawRects(rectangles:QRectF_ITF, rectCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects", rectangles, rectCount]);
	};

	public function DrawRects2(rectangles:Array<QRectF>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects2", rectangles]);
	};

	public function DrawRects3(rectangles:QRect_ITF, rectCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects3", rectangles, rectCount]);
	};

	public function DrawRects4(rectangles:Array<QRect>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRects4", rectangles]);
	};

	public function DrawRoundedRect(rect:QRectF_ITF, xRadius:Float, yRadius:Float, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRoundedRect", rect, xRadius, yRadius, mode]);
	};

	public function DrawRoundedRect2(x:Int, y:Int, w:Int, h:Int, xRadius:Float, yRadius:Float, mode:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "DrawRoundedRect2", x, y, w, h, xRadius, yRadius, mode
		]);
	};

	public function DrawRoundedRect3(rect:QRect_ITF, xRadius:Float, yRadius:Float, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawRoundedRect3", rect, xRadius, yRadius, mode]);
	};

	public function DrawStaticText(topLeftPosition:QPointF_ITF, staticText:QStaticText_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawStaticText", topLeftPosition, staticText]);
	};

	public function DrawStaticText2(topLeftPosition:QPoint_ITF, staticText:QStaticText_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawStaticText2", topLeftPosition, staticText]);
	};

	public function DrawStaticText3(left:Int, top:Int, staticText:QStaticText_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawStaticText3", left, top, staticText]);
	};

	public function DrawText(position:QPointF_ITF, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawText", position, text]);
	};

	public function DrawText2(position:QPoint_ITF, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawText2", position, text]);
	};

	public function DrawText3(x:Int, y:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawText3", x, y, text]);
	};

	public function DrawText4(rectangle:QRect_ITF, flags:Int, text:String, boundingRect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawText4", rectangle, flags, text, boundingRect]);
	};

	public function DrawText5(x:Int, y:Int, width:Int, height:Int, flags:Int, text:String, boundingRect:QRect_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "DrawText5", x, y, width, height, flags, text, boundingRect
		]);
	};

	public function DrawText6(rectangle:QRectF_ITF, text:String, option:QTextOption_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawText6", rectangle, text, option]);
	};

	public function DrawTiledPixmap(rectangle:QRectF_ITF, pixmap:QPixmap_ITF, position:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawTiledPixmap", rectangle, pixmap, position]);
	};

	public function DrawTiledPixmap2(x:Int, y:Int, width:Int, height:Int, pixmap:QPixmap_ITF, sx:Int, sy:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "DrawTiledPixmap2", x, y, width, height, pixmap, sx, sy
		]);
	};

	public function DrawTiledPixmap3(rectangle:QRect_ITF, pixmap:QPixmap_ITF, position:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawTiledPixmap3", rectangle, pixmap, position]);
	};

	public function End():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "End"]);
	};

	public function EndNativePainting() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EndNativePainting"]);
	};

	public function EraseRect(rectangle:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EraseRect", rectangle]);
	};

	public function EraseRect2(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EraseRect2", x, y, width, height]);
	};

	public function EraseRect3(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "EraseRect3", rectangle]);
	};

	public function FillPath(path:QPainterPath_ITF, brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillPath", path, brush]);
	};

	public function FillRect(rectangle:QRectF_ITF, brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect", rectangle, brush]);
	};

	public function FillRect2(x:Int, y:Int, width:Int, height:Int, brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect2", x, y, width, height, brush]);
	};

	public function FillRect3(rectangle:QRect_ITF, brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect3", rectangle, brush]);
	};

	public function FillRect4(rectangle:QRectF_ITF, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect4", rectangle, color]);
	};

	public function FillRect5(x:Int, y:Int, width:Int, height:Int, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect5", x, y, width, height, color]);
	};

	public function FillRect6(rectangle:QRect_ITF, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect6", rectangle, color]);
	};

	public function FillRect7(x:Int, y:Int, width:Int, height:Int, color:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect7", x, y, width, height, color]);
	};

	public function FillRect8(rectangle:QRect_ITF, color:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect8", rectangle, color]);
	};

	public function FillRect9(rectangle:QRectF_ITF, color:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect9", rectangle, color]);
	};

	public function FillRect10(x:Int, y:Int, width:Int, height:Int, style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect10", x, y, width, height, style]);
	};

	public function FillRect11(rectangle:QRect_ITF, style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect11", rectangle, style]);
	};

	public function FillRect12(rectangle:QRectF_ITF, style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect12", rectangle, style]);
	};

	public function FillRect13(x:Int, y:Int, width:Int, height:Int, preset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect13", x, y, width, height, preset]);
	};

	public function FillRect14(rectangle:QRect_ITF, preset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect14", rectangle, preset]);
	};

	public function FillRect15(rectangle:QRectF_ITF, preset:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FillRect15", rectangle, preset]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function FontInfo():QFontInfo {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontInfo"]);
	};

	public function FontMetrics():QFontMetrics {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontMetrics"]);
	};

	public function HasClipping():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasClipping"]);
	};

	public function IsActive():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsActive"]);
	};

	public function LayoutDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LayoutDirection"]);
	};

	public function Opacity():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Opacity"]);
	};

	public function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function Pen():QPen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pen"]);
	};

	public function RenderHints():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RenderHints"]);
	};

	public function ResetTransform() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResetTransform"]);
	};

	public function Restore() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Restore"]);
	};

	public function Rotate(angle:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Rotate", angle]);
	};

	public function Save() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Save"]);
	};

	public function Scale(sx:Float, sy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scale", sx, sy]);
	};

	public function SetBackground(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBackground", brush]);
	};

	public function SetBackgroundMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBackgroundMode", mode]);
	};

	public function SetBrush(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrush", brush]);
	};

	public function SetBrush2(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrush2", style]);
	};

	public function SetBrushOrigin(position:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrushOrigin", position]);
	};

	public function SetBrushOrigin2(x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrushOrigin2", x, y]);
	};

	public function SetBrushOrigin3(position:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrushOrigin3", position]);
	};

	public function SetClipPath(path:QPainterPath_ITF, operation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipPath", path, operation]);
	};

	public function SetClipRect(rectangle:QRectF_ITF, operation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipRect", rectangle, operation]);
	};

	public function SetClipRect2(rectangle:QRect_ITF, operation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipRect2", rectangle, operation]);
	};

	public function SetClipRect3(x:Int, y:Int, width:Int, height:Int, operation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipRect3", x, y, width, height, operation]);
	};

	public function SetClipRegion(region:QRegion_ITF, operation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipRegion", region, operation]);
	};

	public function SetClipping(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetClipping", enable]);
	};

	public function SetCompositionMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCompositionMode", mode]);
	};

	public function SetFont(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFont", font]);
	};

	public function SetLayoutDirection(direction:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLayoutDirection", direction]);
	};

	public function SetOpacity(opacity:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOpacity", opacity]);
	};

	public function SetPen(pen:QPen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPen", pen]);
	};

	public function SetPen2(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPen2", color]);
	};

	public function SetPen3(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPen3", style]);
	};

	public function SetRenderHint(hint:Int, on:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRenderHint", hint, on]);
	};

	public function SetRenderHints(hints:Int, on:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRenderHints", hints, on]);
	};

	public function SetTransform(transform:QTransform_ITF, combine:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTransform", transform, combine]);
	};

	public function SetViewTransformEnabled(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetViewTransformEnabled", enable]);
	};

	public function SetViewport(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetViewport", rectangle]);
	};

	public function SetViewport2(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetViewport2", x, y, width, height]);
	};

	public function SetWindow(rectangle:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWindow", rectangle]);
	};

	public function SetWindow2(x:Int, y:Int, width:Int, height:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWindow2", x, y, width, height]);
	};

	public function SetWorldMatrixEnabled(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWorldMatrixEnabled", enable]);
	};

	public function SetWorldTransform(matrix:QTransform_ITF, combine:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWorldTransform", matrix, combine]);
	};

	public function Shear(sh:Float, sv:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Shear", sh, sv]);
	};

	public function StrokePath(path:QPainterPath_ITF, pen:QPen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "StrokePath", path, pen]);
	};

	public function TestRenderHint(hint:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TestRenderHint", hint]);
	};

	public function Transform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transform"]);
	};

	public function Translate(offset:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate", offset]);
	};

	public function Translate2(offset:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate2", offset]);
	};

	public function Translate3(dx:Float, dy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate3", dx, dy]);
	};

	public function ViewTransformEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ViewTransformEnabled"]);
	};

	public function Viewport():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Viewport"]);
	};

	public function Window():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Window"]);
	};

	public function WorldMatrixEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WorldMatrixEnabled"]);
	};

	public function WorldTransform():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WorldTransform"]);
	};

	public function DestroyQPainter() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPainter"]);
	};
}

function NewQPainterFromPointer(ptr:String):QPainter {
	final r = new QPainter();
	r.initFrom(ptr, "gui.QPainter");
	return r;
}

function NewQPainter():QPainter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainter", ""]);
}

function NewQPainter2(device:QPaintDevice_ITF):QPainter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainter2", "", device]);
}

interface QPainterPath_ITF {
	public function QPainterPath_PTR():QPainterPath;
}

class QPainterPath extends Internal implements QPainterPath_ITF {
	public function new() {
		super();
	}

	public function QPainterPath_PTR():QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPainterPath_PTR"]);
	};

	public function AddEllipse(boundingRectangle:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddEllipse", boundingRectangle]);
	};

	public function AddEllipse2(x:Float, y:Float, width:Float, height:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddEllipse2", x, y, width, height]);
	};

	public function AddEllipse3(center:QPointF_ITF, rx:Float, ry:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddEllipse3", center, rx, ry]);
	};

	public function AddPath(path:QPainterPath_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddPath", path]);
	};

	public function AddPolygon(polygon:QPolygonF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddPolygon", polygon]);
	};

	public function AddRect(rectangle:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddRect", rectangle]);
	};

	public function AddRect2(x:Float, y:Float, width:Float, height:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddRect2", x, y, width, height]);
	};

	public function AddRegion(region:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddRegion", region]);
	};

	public function AddRoundedRect(rect:QRectF_ITF, xRadius:Float, yRadius:Float, mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddRoundedRect", rect, xRadius, yRadius, mode]);
	};

	public function AddRoundedRect2(x:Float, y:Float, w:Float, h:Float, xRadius:Float, yRadius:Float, mode:Int) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "AddRoundedRect2", x, y, w, h, xRadius, yRadius, mode
		]);
	};

	public function AddText(point:QPointF_ITF, font:QFont_ITF, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddText", point, font, text]);
	};

	public function AddText2(x:Float, y:Float, font:QFont_ITF, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddText2", x, y, font, text]);
	};

	public function AngleAtPercent(t:Float):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AngleAtPercent", t]);
	};

	public function ArcMoveTo(rectangle:QRectF_ITF, angle:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ArcMoveTo", rectangle, angle]);
	};

	public function ArcMoveTo2(x:Float, y:Float, width:Float, height:Float, angle:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ArcMoveTo2", x, y, width, height, angle]);
	};

	public function ArcTo(rectangle:QRectF_ITF, startAngle:Float, sweepLength:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ArcTo", rectangle, startAngle, sweepLength]);
	};

	public function ArcTo2(x:Float, y:Float, width:Float, height:Float, startAngle:Float, sweepLength:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "ArcTo2", x, y, width, height, startAngle, sweepLength
		]);
	};

	public function BoundingRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function Capacity():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Capacity"]);
	};

	public function Clear() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear"]);
	};

	public function CloseSubpath() {
		Internal.callLocalFunction(["", Pointer(), ___className, "CloseSubpath"]);
	};

	public function ConnectPath(path:QPainterPath_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectPath", path]);
	};

	public function Contains(point:QPointF_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains", point]);
	};

	public function Contains2(rectangle:QRectF_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains2", rectangle]);
	};

	public function Contains3(p:QPainterPath_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains3", p]);
	};

	public function ControlPointRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ControlPointRect"]);
	};

	public function CubicTo(c1:QPointF_ITF, c2:QPointF_ITF, endPoint:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CubicTo", c1, c2, endPoint]);
	};

	public function CubicTo2(c1X:Float, c1Y:Float, c2X:Float, c2Y:Float, endPointX:Float, endPointY:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "CubicTo2", c1X, c1Y, c2X, c2Y, endPointX, endPointY
		]);
	};

	public function CurrentPosition():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentPosition"]);
	};

	public function ElementCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ElementCount"]);
	};

	public function FillRule():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FillRule"]);
	};

	public function Intersected(p:QPainterPath_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersected", p]);
	};

	public function Intersects(rectangle:QRectF_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersects", rectangle]);
	};

	public function Intersects2(p:QPainterPath_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersects2", p]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function Length():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function LineTo(endPoint:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LineTo", endPoint]);
	};

	public function LineTo2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LineTo2", x, y]);
	};

	public function MoveTo(point:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MoveTo", point]);
	};

	public function MoveTo2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MoveTo2", x, y]);
	};

	public function PercentAtLength(l:Float):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PercentAtLength", l]);
	};

	public function PointAtPercent(t:Float):QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointAtPercent", t]);
	};

	public function QuadTo(c:QPointF_ITF, endPoint:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "QuadTo", c, endPoint]);
	};

	public function QuadTo2(cx:Float, cy:Float, endPointX:Float, endPointY:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "QuadTo2", cx, cy, endPointX, endPointY]);
	};

	public function Reserve(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Reserve", size]);
	};

	public function SetElementPositionAt(index:Int, x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetElementPositionAt", index, x, y]);
	};

	public function SetFillRule(fillRule:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFillRule", fillRule]);
	};

	public function Simplified():QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Simplified"]);
	};

	public function SlopeAtPercent(t:Float):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SlopeAtPercent", t]);
	};

	public function Subtracted(p:QPainterPath_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Subtracted", p]);
	};

	public function Swap(other:QPainterPath_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ToFillPolygon(matrix:QTransform_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToFillPolygon", matrix]);
	};

	public function ToFillPolygon2(matrix:QMatrix_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToFillPolygon2", matrix]);
	};

	public function ToFillPolygons(matrix:QTransform_ITF):Array<QPolygonF> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToFillPolygons", matrix]);
	};

	public function ToFillPolygons2(matrix:QMatrix_ITF):Array<QPolygonF> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToFillPolygons2", matrix]);
	};

	public function ToReversed():QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToReversed"]);
	};

	public function ToSubpathPolygons(matrix:QTransform_ITF):Array<QPolygonF> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToSubpathPolygons", matrix]);
	};

	public function ToSubpathPolygons2(matrix:QMatrix_ITF):Array<QPolygonF> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToSubpathPolygons2", matrix]);
	};

	public function Translate(dx:Float, dy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate", dx, dy]);
	};

	public function Translate2(offset:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate2", offset]);
	};

	public function Translated(dx:Float, dy:Float):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated", dx, dy]);
	};

	public function Translated2(offset:QPointF_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated2", offset]);
	};

	public function United(p:QPainterPath_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "United", p]);
	};

	public function DestroyQPainterPath() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPainterPath"]);
	};
}

function NewQPainterPathFromPointer(ptr:String):QPainterPath {
	final r = new QPainterPath();
	r.initFrom(ptr, "gui.QPainterPath");
	return r;
}

function NewQPainterPath():QPainterPath {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainterPath", ""]);
}

function NewQPainterPath2(startPoint:QPointF_ITF):QPainterPath {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainterPath2", "", startPoint]);
}

function NewQPainterPath3(path:QPainterPath_ITF):QPainterPath {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainterPath3", "", path]);
}

interface QPainterPathStroker_ITF {
	public function QPainterPathStroker_PTR():QPainterPathStroker;
}

class QPainterPathStroker extends Internal implements QPainterPathStroker_ITF {
	public function new() {
		super();
	}

	public function QPainterPathStroker_PTR():QPainterPathStroker {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPainterPathStroker_PTR"]);
	};

	public function CapStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CapStyle"]);
	};

	public function CreateStroke(path:QPainterPath_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateStroke", path]);
	};

	public function CurveThreshold():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurveThreshold"]);
	};

	public function DashOffset():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DashOffset"]);
	};

	public function DashPattern():Array<Float> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DashPattern"]);
	};

	public function JoinStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JoinStyle"]);
	};

	public function MiterLimit():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MiterLimit"]);
	};

	public function SetCapStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCapStyle", style]);
	};

	public function SetCurveThreshold(threshold:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCurveThreshold", threshold]);
	};

	public function SetDashOffset(offset:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDashOffset", offset]);
	};

	public function SetDashPattern(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDashPattern", style]);
	};

	public function SetDashPattern2(dashPattern:Array<Float>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDashPattern2", dashPattern]);
	};

	public function SetJoinStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetJoinStyle", style]);
	};

	public function SetMiterLimit(limit:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMiterLimit", limit]);
	};

	public function SetWidth(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth", width]);
	};

	public function Width():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function DestroyQPainterPathStroker() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPainterPathStroker"]);
	};
}

function NewQPainterPathStrokerFromPointer(ptr:String):QPainterPathStroker {
	final r = new QPainterPathStroker();
	r.initFrom(ptr, "gui.QPainterPathStroker");
	return r;
}

function NewQPainterPathStroker():QPainterPathStroker {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainterPathStroker", ""]);
}

function NewQPainterPathStroker2(pen:QPen_ITF):QPainterPathStroker {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPainterPathStroker2", "", pen]);
}

interface QPalette_ITF {
	public function QPalette_PTR():QPalette;
}

class QPalette extends Internal implements QPalette_ITF {
	public function new() {
		super();
	}

	public function QPalette_PTR():QPalette {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPalette_PTR"]);
	};

	public function AlternateBase():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AlternateBase"]);
	};

	public function Base():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Base"]);
	};

	public function BrightText():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BrightText"]);
	};

	public function Brush(group:Int, role:Int):QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Brush", group, role]);
	};

	public function Brush2(role:Int):QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Brush2", role]);
	};

	public function Button():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Button"]);
	};

	public function ButtonText():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ButtonText"]);
	};

	public function CacheKey():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheKey"]);
	};

	public function Color(group:Int, role:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Color", group, role]);
	};

	public function Color2(role:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Color2", role]);
	};

	public function CurrentColorGroup():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentColorGroup"]);
	};

	public function Dark():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Dark"]);
	};

	public function Highlight():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Highlight"]);
	};

	public function HighlightedText():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HighlightedText"]);
	};

	public function IsBrushSet(cg:Int, cr:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsBrushSet", cg, cr]);
	};

	public function IsCopyOf(p:QPalette_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCopyOf", p]);
	};

	public function IsEqual(cg1:Int, cg2:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEqual", cg1, cg2]);
	};

	public function Light():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Light"]);
	};

	public function Link():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Link"]);
	};

	public function LinkVisited():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LinkVisited"]);
	};

	public function Mid():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mid"]);
	};

	public function Midlight():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Midlight"]);
	};

	public function PlaceholderText():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PlaceholderText"]);
	};

	public function Resolve(other:QPalette_ITF):QPalette {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Resolve", other]);
	};

	public function SetBrush(role:Int, brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrush", role, brush]);
	};

	public function SetBrush2(group:Int, role:Int, brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrush2", group, role, brush]);
	};

	public function SetColor(group:Int, role:Int, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColor", group, role, color]);
	};

	public function SetColor2(role:Int, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColor2", role, color]);
	};

	public function SetColorGroup(cg:Int, windowText:QBrush_ITF, button:QBrush_ITF, light:QBrush_ITF, dark:QBrush_ITF, mid:QBrush_ITF, text:QBrush_ITF,
			bright_text:QBrush_ITF, base:QBrush_ITF, window:QBrush_ITF) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetColorGroup", cg, windowText, button, light, dark, mid, text, bright_text, base, window
		]);
	};

	public function SetCurrentColorGroup(cg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCurrentColorGroup", cg]);
	};

	public function Shadow():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Shadow"]);
	};

	public function Swap(other:QPalette_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Text():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};

	public function ToolTipBase():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToolTipBase"]);
	};

	public function ToolTipText():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToolTipText"]);
	};

	public function Window():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Window"]);
	};

	public function WindowText():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowText"]);
	};

	public function DestroyQPalette() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPalette"]);
	};
}

function NewQPaletteFromPointer(ptr:String):QPalette {
	final r = new QPalette();
	r.initFrom(ptr, "gui.QPalette");
	return r;
}

function NewQPalette():QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPalette", ""]);
}

function NewQPalette2(button:QColor_ITF):QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPalette2", "", button]);
}

function NewQPalette3(button:Int):QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPalette3", "", button]);
}

function NewQPalette4(button:QColor_ITF, window:QColor_ITF):QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPalette4", "", button, window]);
}

function NewQPalette5(windowText:QBrush_ITF, button:QBrush_ITF, light:QBrush_ITF, dark:QBrush_ITF, mid:QBrush_ITF, text:QBrush_ITF, bright_text:QBrush_ITF,
		base:QBrush_ITF, window:QBrush_ITF):QPalette {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQPalette5", "", windowText, button, light, dark, mid, text, bright_text, base, window
	]);
}

function NewQPalette7(p:QPalette_ITF):QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPalette7", "", p]);
}

function NewQPalette8(other:QPalette_ITF):QPalette {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPalette8", "", other]);
}

interface QPdfWriter_ITF extends QPagedPaintDevice_ITF {
	public function QPdfWriter_PTR():QPdfWriter;
	public function QObject_PTR():QObject;
}

class QPdfWriter extends QPagedPaintDevice implements QPdfWriter_ITF {
	public function QObject_PTR():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QObject_PTR"]);
	}

	public function new() {
		super();
	}

	public function QPdfWriter_PTR():QPdfWriter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPdfWriter_PTR"]);
	};

	public function Creator():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Creator"]);
	};

	public override function ConnectNewPage(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectNewPage", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectNewPage() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectNewPage"]);
	};

	public override function NewPage():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NewPage"]);
	};

	public function NewPageDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NewPageDefault"]);
	};

	public override function ConnectPaintEngine(f:() -> QPaintEngine) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectPaintEngine", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectPaintEngine() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPaintEngine"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public override function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};

	public function PdfVersion():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PdfVersion"]);
	};

	public function Resolution():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Resolution"]);
	};

	public function SetCreator(creator:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCreator", creator]);
	};

	public function SetPdfVersion(version:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPdfVersion", version]);
	};

	public function SetResolution(resolution:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetResolution", resolution]);
	};

	public function SetTitle(title:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTitle", title]);
	};

	public function Title():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Title"]);
	};

	public function ConnectDestroyQPdfWriter(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQPdfWriter", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQPdfWriter() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPdfWriter"]);
	};

	public function DestroyQPdfWriter() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPdfWriter"]);
	};

	public function DestroyQPdfWriterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPdfWriterDefault"]);
	};

	public function ChildEvent(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEvent", event]);
	};

	public function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public function ConnectNotify(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotify", sign]);
	};

	public function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public function CustomEvent(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEvent", event]);
	};

	public function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public function DeleteLater() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLater"]);
	};

	public function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public function DisconnectNotify(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotify", sign]);
	};

	public function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public function Event(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Event", e]);
	};

	public function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public function EventFilter(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilter", watched, event]);
	};

	public function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public function MetaObject():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObject"]);
	};

	public function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public function TimerEvent(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEvent", event]);
	};

	public function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQPdfWriterFromPointer(ptr:String):QPdfWriter {
	final r = new QPdfWriter();
	r.initFrom(ptr, "gui.QPdfWriter");
	return r;
}

function NewQPdfWriter(filename:String):QPdfWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPdfWriter", "", filename]);
}

function NewQPdfWriter2(device:QIODevice_ITF):QPdfWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPdfWriter2", "", device]);
}

interface QPen_ITF {
	public function QPen_PTR():QPen;
}

class QPen extends Internal implements QPen_ITF {
	public function new() {
		super();
	}

	public function QPen_PTR():QPen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPen_PTR"]);
	};

	public function Brush():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Brush"]);
	};

	public function CapStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CapStyle"]);
	};

	public function Color():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Color"]);
	};

	public function DashOffset():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DashOffset"]);
	};

	public function DashPattern():Array<Float> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DashPattern"]);
	};

	public function IsCosmetic():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCosmetic"]);
	};

	public function IsSolid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSolid"]);
	};

	public function JoinStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "JoinStyle"]);
	};

	public function MiterLimit():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MiterLimit"]);
	};

	public function SetBrush(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBrush", brush]);
	};

	public function SetCapStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCapStyle", style]);
	};

	public function SetColor(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColor", color]);
	};

	public function SetCosmetic(cosmetic:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCosmetic", cosmetic]);
	};

	public function SetDashOffset(offset:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDashOffset", offset]);
	};

	public function SetDashPattern(pattern:Array<Float>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDashPattern", pattern]);
	};

	public function SetJoinStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetJoinStyle", style]);
	};

	public function SetMiterLimit(limit:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMiterLimit", limit]);
	};

	public function SetStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyle", style]);
	};

	public function SetWidth(width:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth", width]);
	};

	public function SetWidthF(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidthF", width]);
	};

	public function Style():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Style"]);
	};

	public function Swap(other:QPen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Width():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function WidthF():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WidthF"]);
	};

	public function DestroyQPen() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPen"]);
	};
}

function NewQPenFromPointer(ptr:String):QPen {
	final r = new QPen();
	r.initFrom(ptr, "gui.QPen");
	return r;
}

function NewQPen():QPen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPen", ""]);
}

function NewQPen2(style:Int):QPen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPen2", "", style]);
}

function NewQPen3(color:QColor_ITF):QPen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPen3", "", color]);
}

function NewQPen4(brush:QBrush_ITF, width:Float, style:Int, cap:Int, joi:Int):QPen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPen4", "", brush, width, style, cap, joi]);
}

function NewQPen5(pen:QPen_ITF):QPen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPen5", "", pen]);
}

function NewQPen6(pen:QPen_ITF):QPen {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPen6", "", pen]);
}

interface QPicture_ITF extends QPaintDevice_ITF {
	public function QPicture_PTR():QPicture;
}

class QPicture extends QPaintDevice implements QPicture_ITF {
	public function new() {
		super();
	}

	public function QPicture_PTR():QPicture {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPicture_PTR"]);
	};

	public function BoundingRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function Data():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Data"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Load(fileName:String, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Load", fileName, format]);
	};

	public function Load2(dev:QIODevice_ITF, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Load2", dev, format]);
	};

	public function Play(painter:QPainter_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Play", painter]);
	};

	public function Save(fileName:String, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Save", fileName, format]);
	};

	public function Save2(dev:QIODevice_ITF, format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Save2", dev, format]);
	};

	public function SetBoundingRect(r:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBoundingRect", r]);
	};

	public function ConnectSetData(f:(data:String, size:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetData", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetData() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetData"]);
	};

	public function SetData(data:String, size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetData", data, size]);
	};

	public function SetDataDefault(data:String, size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDataDefault", data, size]);
	};

	public function Size():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function Swap(other:QPicture_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ConnectDestroyQPicture(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQPicture", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQPicture() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPicture"]);
	};

	public function DestroyQPicture() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPicture"]);
	};

	public function DestroyQPictureDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPictureDefault"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};
}

function NewQPictureFromPointer(ptr:String):QPicture {
	final r = new QPicture();
	r.initFrom(ptr, "gui.QPicture");
	return r;
}

function NewQPicture(formatVersion:Int):QPicture {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPicture", "", formatVersion]);
}

function NewQPicture2(pic:QPicture_ITF):QPicture {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPicture2", "", pic]);
}

interface QPictureFormatPlugin_ITF extends QObject_ITF {
	public function QPictureFormatPlugin_PTR():QPictureFormatPlugin;
}

class QPictureFormatPlugin extends QObject implements QPictureFormatPlugin_ITF {
	public function new() {
		super();
	}

	public function QPictureFormatPlugin_PTR():QPictureFormatPlugin {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPictureFormatPlugin_PTR"]);
	};

	public function ConnectInstallIOHandler(f:(format:String) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectInstallIOHandler", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectInstallIOHandler() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectInstallIOHandler"]);
	};

	public function InstallIOHandler(format:String):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InstallIOHandler", format]);
	};

	public function ConnectLoadPicture(f:(format:String, fileName:String, picture:QPicture) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLoadPicture", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLoadPicture() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLoadPicture"]);
	};

	public function LoadPicture(format:String, fileName:String, picture:QPicture_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadPicture", format, fileName, picture]);
	};

	public function LoadPictureDefault(format:String, fileName:String, picture:QPicture_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadPictureDefault", format, fileName, picture]);
	};

	public function ConnectSavePicture(f:(format:String, fileName:String, picture:QPicture) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSavePicture", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSavePicture() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSavePicture"]);
	};

	public function SavePicture(format:String, fileName:String, picture:QPicture_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SavePicture", format, fileName, picture]);
	};

	public function SavePictureDefault(format:String, fileName:String, picture:QPicture_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SavePictureDefault", format, fileName, picture]);
	};

	public function ConnectDestroyQPictureFormatPlugin(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQPictureFormatPlugin",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQPictureFormatPlugin() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPictureFormatPlugin"]);
	};

	public function DestroyQPictureFormatPlugin() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPictureFormatPlugin"]);
	};

	public function DestroyQPictureFormatPluginDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPictureFormatPluginDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQPictureFormatPluginFromPointer(ptr:String):QPictureFormatPlugin {
	final r = new QPictureFormatPlugin();
	r.initFrom(ptr, "gui.QPictureFormatPlugin");
	return r;
}

function NewQPictureFormatPlugin(parent:QObject_ITF):QPictureFormatPlugin {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPictureFormatPlugin", "", parent]);
}

interface QPictureIO_ITF {
	public function QPictureIO_PTR():QPictureIO;
}

class QPictureIO extends Internal implements QPictureIO_ITF {
	public function new() {
		super();
	}

	public function QPictureIO_PTR():QPictureIO {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPictureIO_PTR"]);
	};

	public function Description():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Description"]);
	};

	public function FileName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FileName"]);
	};

	public function Format():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function Gamma():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Gamma"]);
	};

	public function InputFormats():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InputFormats"]);
	};

	public function IoDevice():QIODevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IoDevice"]);
	};

	public function OutputFormats():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OutputFormats"]);
	};

	public function Parameters():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parameters"]);
	};

	public function Picture():QPicture {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Picture"]);
	};

	public function PictureFormat(fileName:String):QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PictureFormat", fileName]);
	};

	public function PictureFormat2(d:QIODevice_ITF):QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PictureFormat2", d]);
	};

	public function Quality():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Quality"]);
	};

	public function Read():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Read"]);
	};

	public function SetDescription(description:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDescription", description]);
	};

	public function SetFileName(fileName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFileName", fileName]);
	};

	public function SetFormat(format:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetGamma(gamma:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGamma", gamma]);
	};

	public function SetIODevice(ioDevice:QIODevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIODevice", ioDevice]);
	};

	public function SetParameters(parameters:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetParameters", parameters]);
	};

	public function SetPicture(picture:QPicture_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPicture", picture]);
	};

	public function SetQuality(q:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetQuality", q]);
	};

	public function SetStatus(status:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStatus", status]);
	};

	public function Status():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Status"]);
	};

	public function Write():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Write"]);
	};

	public function DestroyQPictureIO() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPictureIO"]);
	};
}

function NewQPictureIOFromPointer(ptr:String):QPictureIO {
	final r = new QPictureIO();
	r.initFrom(ptr, "gui.QPictureIO");
	return r;
}

function NewQPictureIO():QPictureIO {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPictureIO", ""]);
}

function NewQPictureIO2(ioDevice:QIODevice_ITF, format:String):QPictureIO {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPictureIO2", "", ioDevice, format]);
}

function NewQPictureIO3(fileName:String, format:String):QPictureIO {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPictureIO3", "", fileName, format]);
}

function QPictureIO_InputFormats():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPictureIO_InputFormats", ""]);
}

function QPictureIO_OutputFormats():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPictureIO_OutputFormats", ""]);
}

function QPictureIO_PictureFormat(fileName:String):QByteArray {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPictureIO_PictureFormat", "", fileName]);
}

function QPictureIO_PictureFormat2(d:QIODevice_ITF):QByteArray {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPictureIO_PictureFormat2", "", d]);
}

interface QPixelFormat_ITF {
	public function QPixelFormat_PTR():QPixelFormat;
}

class QPixelFormat extends Internal implements QPixelFormat_ITF {
	public function new() {
		super();
	}

	public function QPixelFormat_PTR():QPixelFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPixelFormat_PTR"]);
	};

	public function DestroyQPixelFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPixelFormat"]);
	};

	public function AlphaPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AlphaPosition"]);
	};

	public function AlphaSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AlphaSize"]);
	};

	public function AlphaUsage():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AlphaUsage"]);
	};

	public function BitsPerPixel():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BitsPerPixel"]);
	};

	public function BlackSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlackSize"]);
	};

	public function BlueSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlueSize"]);
	};

	public function BrightnessSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BrightnessSize"]);
	};

	public function ByteOrder():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ByteOrder"]);
	};

	public function ChannelCount():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChannelCount"]);
	};

	public function ColorModel():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColorModel"]);
	};

	public function CyanSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CyanSize"]);
	};

	public function GreenSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GreenSize"]);
	};

	public function HueSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HueSize"]);
	};

	public function LightnessSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LightnessSize"]);
	};

	public function MagentaSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MagentaSize"]);
	};

	public function Premultiplied():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Premultiplied"]);
	};

	public function RedSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RedSize"]);
	};

	public function SaturationSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SaturationSize"]);
	};

	public function TypeInterpretation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TypeInterpretation"]);
	};

	public function YellowSize():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "YellowSize"]);
	};

	public function YuvLayout():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "YuvLayout"]);
	};
}

function NewQPixelFormatFromPointer(ptr:String):QPixelFormat {
	final r = new QPixelFormat();
	r.initFrom(ptr, "gui.QPixelFormat");
	return r;
}

function NewQPixelFormat():QPixelFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPixelFormat", ""]);
}

function NewQPixelFormat2(colorModel:Int, firstSize:String, secondSize:String, thirdSize:String, fourthSize:String, fifthSize:String, alphaSize:String,
		alphaUsage:Int, alphaPosition:Int, premultiplied:Int, typeInterpretation:Int, byteOrder:Int, subEnum:String):QPixelFormat {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQPixelFormat2", "", colorModel, firstSize, secondSize, thirdSize, fourthSize, fifthSize, alphaSize, alphaUsage, alphaPosition,
		premultiplied, typeInterpretation, byteOrder, subEnum
	]);
}

interface QPixmap_ITF extends QPaintDevice_ITF {
	public function QPixmap_PTR():QPixmap;
}

class QPixmap extends QPaintDevice implements QPixmap_ITF {
	public function new() {
		super();
	}

	public function QPixmap_PTR():QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPixmap_PTR"]);
	};

	public function CacheKey():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheKey"]);
	};

	public function ConvertFromImage(image:QImage_ITF, flags:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ConvertFromImage", image, flags]);
	};

	public function Copy(rectangle:QRect_ITF):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Copy", rectangle]);
	};

	public function Copy2(x:Int, y:Int, width:Int, height:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Copy2", x, y, width, height]);
	};

	public function CreateHeuristicMask(clipTight:Bool):QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateHeuristicMask", clipTight]);
	};

	public function CreateMaskFromColor(maskColor:QColor_ITF, mode:Int):QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateMaskFromColor", maskColor, mode]);
	};

	public function DefaultDepth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultDepth"]);
	};

	public function Detach() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Detach"]);
	};

	public function DevicePixelRatio_QPixmap():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatio"]);
	};

	public function Fill(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Fill", color]);
	};

	public function FromImage(image:QImage_ITF, flags:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromImage", image, flags]);
	};

	public function FromImage2(image:QImage_ITF, flags:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromImage2", image, flags]);
	};

	public function FromImageReader(imageReader:QImageReader_ITF, flags:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromImageReader", imageReader, flags]);
	};

	public function HasAlpha():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasAlpha"]);
	};

	public function HasAlphaChannel():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasAlphaChannel"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function IsQBitmap():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsQBitmap"]);
	};

	public function Load(fileName:String, format:String, flags:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Load", fileName, format, flags]);
	};

	public function LoadFromData(data:String, l:Int, format:String, flags:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadFromData", data, l, format, flags]);
	};

	public function LoadFromData2(data:QByteArray_ITF, format:String, flags:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadFromData2", data, format, flags]);
	};

	public function Mask():QBitmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mask"]);
	};

	public function Rect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function Save(fileName:String, format:String, quality:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Save", fileName, format, quality]);
	};

	public function Save2(device:QIODevice_ITF, format:String, quality:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Save2", device, format, quality]);
	};

	public function Scaled(size:QSize_ITF, aspectRatioMode:Int, transformMode:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Scaled", size, aspectRatioMode, transformMode]);
	};

	public function Scaled2(width:Int, height:Int, aspectRatioMode:Int, transformMode:Int):QPixmap {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"Scaled2",
			width,
			height,
			aspectRatioMode,
			transformMode
		]);
	};

	public function ScaledToHeight(height:Int, mode:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledToHeight", height, mode]);
	};

	public function ScaledToWidth(width:Int, mode:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScaledToWidth", width, mode]);
	};

	public function Scroll(dx:Int, dy:Int, x:Int, y:Int, width:Int, height:Int, exposed:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scroll", dx, dy, x, y, width, height, exposed]);
	};

	public function Scroll2(dx:Int, dy:Int, rect:QRect_ITF, exposed:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Scroll2", dx, dy, rect, exposed]);
	};

	public function SetDevicePixelRatio(scaleFactor:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevicePixelRatio", scaleFactor]);
	};

	public function SetMask(mask:QBitmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMask", mask]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function Swap(other:QPixmap_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ToImage():QImage {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToImage"]);
	};

	public function Transformed(transform:QTransform_ITF, mode:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformed", transform, mode]);
	};

	public function Transformed2(matrix:QMatrix_ITF, mode:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transformed2", matrix, mode]);
	};

	public function TrueMatrix(matrix:QTransform_ITF, width:Int, height:Int):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TrueMatrix", matrix, width, height]);
	};

	public function TrueMatrix2(m:QMatrix_ITF, w:Int, h:Int):QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TrueMatrix2", m, w, h]);
	};

	public function ConnectDestroyQPixmap(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQPixmap", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQPixmap() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQPixmap"]);
	};

	public function DestroyQPixmap() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPixmap"]);
	};

	public function DestroyQPixmapDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPixmapDefault"]);
	};

	public function ToVariant():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVariant"]);
	};

	public override function PaintEngine():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngine"]);
	};

	public function PaintEngineDefault():QPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PaintEngineDefault"]);
	};
}

function NewQPixmapFromPointer(ptr:String):QPixmap {
	final r = new QPixmap();
	r.initFrom(ptr, "gui.QPixmap");
	return r;
}

function NewQPixmap():QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPixmap", ""]);
}

function NewQPixmap2(size:QSize_ITF):QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPixmap2", "", size]);
}

function NewQPixmap3(fileName:String, format:String, flags:Int):QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPixmap3", "", fileName, format, flags]);
}

function NewQPixmap5(pixmap:QPixmap_ITF):QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPixmap5", "", pixmap]);
}

function QPixmap_DefaultDepth():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmap_DefaultDepth", ""]);
}

function QPixmap_FromImage(image:QImage_ITF, flags:Int):QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmap_FromImage", "", image, flags]);
}

function QPixmap_FromImage2(image:QImage_ITF, flags:Int):QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmap_FromImage2", "", image, flags]);
}

function QPixmap_FromImageReader(imageReader:QImageReader_ITF, flags:Int):QPixmap {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmap_FromImageReader", "", imageReader, flags]);
}

function QPixmap_TrueMatrix(matrix:QTransform_ITF, width:Int, height:Int):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmap_TrueMatrix", "", matrix, width, height]);
}

function QPixmap_TrueMatrix2(m:QMatrix_ITF, w:Int, h:Int):QMatrix {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmap_TrueMatrix2", "", m, w, h]);
}

interface QPixmapCache_ITF {
	public function QPixmapCache_PTR():QPixmapCache;
}

class QPixmapCache extends Internal implements QPixmapCache_ITF {
	public function new() {
		super();
	}

	public function QPixmapCache_PTR():QPixmapCache {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPixmapCache_PTR"]);
	};

	public function DestroyQPixmapCache() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPixmapCache"]);
	};

	public function CacheLimit():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheLimit"]);
	};

	public function Clear() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear"]);
	};

	public function Find3(key:String, pixmap:QPixmap_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find3", key, pixmap]);
	};

	public function Insert(key:String, pixmap:QPixmap_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Insert", key, pixmap]);
	};

	public function Remove(key:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Remove", key]);
	};

	public function SetCacheLimit(n:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCacheLimit", n]);
	};
}

function NewQPixmapCacheFromPointer(ptr:String):QPixmapCache {
	final r = new QPixmapCache();
	r.initFrom(ptr, "gui.QPixmapCache");
	return r;
}

function QPixmapCache_CacheLimit():Int {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmapCache_CacheLimit", ""]);
}

function QPixmapCache_Clear() {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QPixmapCache_Clear", ""]);
}

function QPixmapCache_Find3(key:String, pixmap:QPixmap_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmapCache_Find3", "", key, pixmap]);
}

function QPixmapCache_Insert(key:String, pixmap:QPixmap_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPixmapCache_Insert", "", key, pixmap]);
}

function QPixmapCache_Remove(key:String) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QPixmapCache_Remove", "", key]);
}

function QPixmapCache_SetCacheLimit(n:Int) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QPixmapCache_SetCacheLimit", "", n]);
}

interface QPlatformDragQtResponse_ITF extends QPlatformDropQtResponse_ITF {
	public function QPlatformDragQtResponse_PTR():QPlatformDragQtResponse;
}

class QPlatformDragQtResponse extends QPlatformDropQtResponse implements QPlatformDragQtResponse_ITF {
	public function new() {
		super();
	}

	public function QPlatformDragQtResponse_PTR():QPlatformDragQtResponse {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformDragQtResponse_PTR"]);
	};

	public function DestroyQPlatformDragQtResponse() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPlatformDragQtResponse"]);
	};
}

interface QPlatformDropQtResponse_ITF {
	public function QPlatformDropQtResponse_PTR():QPlatformDropQtResponse;
}

class QPlatformDropQtResponse extends Internal implements QPlatformDropQtResponse_ITF {
	public function new() {
		super();
	}

	public function QPlatformDropQtResponse_PTR():QPlatformDropQtResponse {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformDropQtResponse_PTR"]);
	};

	public function DestroyQPlatformDropQtResponse() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPlatformDropQtResponse"]);
	};
}

interface QPlatformIntegrationPlugin_ITF extends QObject_ITF {
	public function QPlatformIntegrationPlugin_PTR():QPlatformIntegrationPlugin;
}

class QPlatformIntegrationPlugin extends QObject implements QPlatformIntegrationPlugin_ITF {
	public function new() {
		super();
	}

	public function QPlatformIntegrationPlugin_PTR():QPlatformIntegrationPlugin {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformIntegrationPlugin_PTR"]);
	};
}

interface QPlatformMenu_ITF extends QObject_ITF {
	public function QPlatformMenu_PTR():QPlatformMenu;
}

class QPlatformMenu extends QObject implements QPlatformMenu_ITF {
	public function new() {
		super();
	}

	public function QPlatformMenu_PTR():QPlatformMenu {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformMenu_PTR"]);
	};
}

interface QPlatformMenuBar_ITF extends QObject_ITF {
	public function QPlatformMenuBar_PTR():QPlatformMenuBar;
}

class QPlatformMenuBar extends QObject implements QPlatformMenuBar_ITF {
	public function new() {
		super();
	}

	public function QPlatformMenuBar_PTR():QPlatformMenuBar {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformMenuBar_PTR"]);
	};
}

interface QPlatformMenuItem_ITF extends QObject_ITF {
	public function QPlatformMenuItem_PTR():QPlatformMenuItem;
}

class QPlatformMenuItem extends QObject implements QPlatformMenuItem_ITF {
	public function new() {
		super();
	}

	public function QPlatformMenuItem_PTR():QPlatformMenuItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformMenuItem_PTR"]);
	};
}

interface QPlatformOffscreenSurface_ITF {
	public function QPlatformOffscreenSurface_PTR():QPlatformOffscreenSurface;
}

class QPlatformOffscreenSurface extends Internal implements QPlatformOffscreenSurface_ITF {
	public function new() {
		super();
	}

	public function QPlatformOffscreenSurface_PTR():QPlatformOffscreenSurface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformOffscreenSurface_PTR"]);
	};

	public function DestroyQPlatformOffscreenSurface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPlatformOffscreenSurface"]);
	};
}

interface QPlatformSessionManager_ITF {
	public function QPlatformSessionManager_PTR():QPlatformSessionManager;
}

class QPlatformSessionManager extends Internal implements QPlatformSessionManager_ITF {
	public function new() {
		super();
	}

	public function QPlatformSessionManager_PTR():QPlatformSessionManager {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformSessionManager_PTR"]);
	};

	public function DestroyQPlatformSessionManager() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPlatformSessionManager"]);
	};
}

interface QPlatformSurfaceEvent_ITF extends QEvent_ITF {
	public function QPlatformSurfaceEvent_PTR():QPlatformSurfaceEvent;
}

class QPlatformSurfaceEvent extends QEvent implements QPlatformSurfaceEvent_ITF {
	public function new() {
		super();
	}

	public function QPlatformSurfaceEvent_PTR():QPlatformSurfaceEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformSurfaceEvent_PTR"]);
	};

	public function DestroyQPlatformSurfaceEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPlatformSurfaceEvent"]);
	};

	public function SurfaceEventType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceEventType"]);
	};
}

function NewQPlatformSurfaceEventFromPointer(ptr:String):QPlatformSurfaceEvent {
	final r = new QPlatformSurfaceEvent();
	r.initFrom(ptr, "gui.QPlatformSurfaceEvent");
	return r;
}

function NewQPlatformSurfaceEvent(surfaceEventType:Int):QPlatformSurfaceEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPlatformSurfaceEvent", "", surfaceEventType]);
}

interface QPlatformTextureList_ITF extends QObject_ITF {
	public function QPlatformTextureList_PTR():QPlatformTextureList;
}

class QPlatformTextureList extends QObject implements QPlatformTextureList_ITF {
	public function new() {
		super();
	}

	public function QPlatformTextureList_PTR():QPlatformTextureList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPlatformTextureList_PTR"]);
	};
}

interface QPointingDeviceUniqueId_ITF {
	public function QPointingDeviceUniqueId_PTR():QPointingDeviceUniqueId;
}

class QPointingDeviceUniqueId extends Internal implements QPointingDeviceUniqueId_ITF {
	public function new() {
		super();
	}

	public function QPointingDeviceUniqueId_PTR():QPointingDeviceUniqueId {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPointingDeviceUniqueId_PTR"]);
	};

	public function DestroyQPointingDeviceUniqueId() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPointingDeviceUniqueId"]);
	};

	public function FromNumericId(id:Int):QPointingDeviceUniqueId {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromNumericId", id]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function NumericId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NumericId"]);
	};
}

function NewQPointingDeviceUniqueIdFromPointer(ptr:String):QPointingDeviceUniqueId {
	final r = new QPointingDeviceUniqueId();
	r.initFrom(ptr, "gui.QPointingDeviceUniqueId");
	return r;
}

function NewQPointingDeviceUniqueId():QPointingDeviceUniqueId {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPointingDeviceUniqueId", ""]);
}

function QPointingDeviceUniqueId_FromNumericId(id:Int):QPointingDeviceUniqueId {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QPointingDeviceUniqueId_FromNumericId", "", id]);
}

interface QPolygon_ITF extends QVector_ITF {
	public function QPolygon_PTR():QPolygon;
}

class QPolygon extends QVector implements QPolygon_ITF {
	public function new() {
		super();
	}

	public function QPolygon_PTR():QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPolygon_PTR"]);
	};

	public function BoundingRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function ContainsPoint(point:QPoint_ITF, fillRule:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ContainsPoint", point, fillRule]);
	};

	public function Intersected(r:QPolygon_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersected", r]);
	};

	public function Intersects(p:QPolygon_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersects", p]);
	};

	public function Point(index:Int, x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Point", index, x, y]);
	};

	public function Point2(index:Int):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Point2", index]);
	};

	public function PutPoints(index:Int, nPoints:Int, fromPolygon:QPolygon_ITF, fromIndex:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PutPoints", index, nPoints, fromPolygon, fromIndex]);
	};

	public function SetPoint(index:Int, x:Int, y:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPoint", index, x, y]);
	};

	public function SetPoint2(index:Int, point:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPoint2", index, point]);
	};

	public function SetPoints(nPoints:Int, points:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPoints", nPoints, points]);
	};

	public function Subtracted(r:QPolygon_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Subtracted", r]);
	};

	public function Swap_QPolygon(other:QPolygon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Translate(dx:Int, dy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate", dx, dy]);
	};

	public function Translate2(offset:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate2", offset]);
	};

	public function Translated(dx:Int, dy:Int):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated", dx, dy]);
	};

	public function Translated2(offset:QPoint_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated2", offset]);
	};

	public function United(r:QPolygon_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "United", r]);
	};

	public function DestroyQPolygon() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPolygon"]);
	};
}

function NewQPolygonFromPointer(ptr:String):QPolygon {
	final r = new QPolygon();
	r.initFrom(ptr, "gui.QPolygon");
	return r;
}

function NewQPolygon():QPolygon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygon", ""]);
}

function NewQPolygon2(size:Int):QPolygon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygon2", "", size]);
}

function NewQPolygon3(points:Array<QPoint>):QPolygon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygon3", "", points]);
}

function NewQPolygon5(rectangle:QRect_ITF, closed:Bool):QPolygon {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygon5", "", rectangle, closed]);
}

interface QPolygonF_ITF extends QVector_ITF {
	public function QPolygonF_PTR():QPolygonF;
}

class QPolygonF extends QVector implements QPolygonF_ITF {
	public function new() {
		super();
	}

	public function QPolygonF_PTR():QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QPolygonF_PTR"]);
	};

	public function BoundingRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function ContainsPoint(point:QPointF_ITF, fillRule:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ContainsPoint", point, fillRule]);
	};

	public function Intersected(r:QPolygonF_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersected", r]);
	};

	public function Intersects(p:QPolygonF_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersects", p]);
	};

	public function IsClosed():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsClosed"]);
	};

	public function Subtracted(r:QPolygonF_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Subtracted", r]);
	};

	public function Swap_QPolygonF(other:QPolygonF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ToPolygon():QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPolygon"]);
	};

	public function Translate(offset:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate", offset]);
	};

	public function Translate2(dx:Float, dy:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate2", dx, dy]);
	};

	public function Translated(offset:QPointF_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated", offset]);
	};

	public function Translated2(dx:Float, dy:Float):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated2", dx, dy]);
	};

	public function United(r:QPolygonF_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "United", r]);
	};

	public function DestroyQPolygonF() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQPolygonF"]);
	};
}

function NewQPolygonFFromPointer(ptr:String):QPolygonF {
	final r = new QPolygonF();
	r.initFrom(ptr, "gui.QPolygonF");
	return r;
}

function NewQPolygonF():QPolygonF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygonF", ""]);
}

function NewQPolygonF2(size:Int):QPolygonF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygonF2", "", size]);
}

function NewQPolygonF3(points:Array<QPointF>):QPolygonF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygonF3", "", points]);
}

function NewQPolygonF5(rectangle:QRectF_ITF):QPolygonF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygonF5", "", rectangle]);
}

function NewQPolygonF6(polygon:QPolygon_ITF):QPolygonF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygonF6", "", polygon]);
}

function NewQPolygonF7(polygon:QPolygonF_ITF):QPolygonF {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQPolygonF7", "", polygon]);
}

interface QQuaternion_ITF {
	public function QQuaternion_PTR():QQuaternion;
}

class QQuaternion extends Internal implements QQuaternion_ITF {
	public function new() {
		super();
	}

	public function QQuaternion_PTR():QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QQuaternion_PTR"]);
	};

	public function DestroyQQuaternion() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQQuaternion"]);
	};

	public function Conjugated():QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Conjugated"]);
	};

	public function DotProduct(q1:QQuaternion_ITF, q2:QQuaternion_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotProduct", q1, q2]);
	};

	public function FromAxes(xAxis:QVector3D_ITF, yAxis:QVector3D_ITF, zAxis:QVector3D_ITF):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromAxes", xAxis, yAxis, zAxis]);
	};

	public function FromAxisAndAngle(axis:QVector3D_ITF, angle:Float):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromAxisAndAngle", axis, angle]);
	};

	public function FromAxisAndAngle2(x:Float, y:Float, z:Float, angle:Float):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromAxisAndAngle2", x, y, z, angle]);
	};

	public function FromDirection(direction:QVector3D_ITF, up:QVector3D_ITF):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromDirection", direction, up]);
	};

	public function FromEulerAngles(pitch:Float, yaw:Float, roll:Float):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromEulerAngles", pitch, yaw, roll]);
	};

	public function FromEulerAngles2(eulerAngles:QVector3D_ITF):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromEulerAngles2", eulerAngles]);
	};

	public function GetAxes(xAxis:QVector3D_ITF, yAxis:QVector3D_ITF, zAxis:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetAxes", xAxis, yAxis, zAxis]);
	};

	public function GetAxisAndAngle(x:Float, y:Float, z:Float, angle:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetAxisAndAngle", x, y, z, angle]);
	};

	public function GetAxisAndAngle2(axis:QVector3D_ITF, angle:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetAxisAndAngle2", axis, angle]);
	};

	public function GetEulerAngles(pitch:Float, yaw:Float, roll:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GetEulerAngles", pitch, yaw, roll]);
	};

	public function Inverted():QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Inverted"]);
	};

	public function IsIdentity():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsIdentity"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Length():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function LengthSquared():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LengthSquared"]);
	};

	public function Nlerp(q1:QQuaternion_ITF, q2:QQuaternion_ITF, t:Float):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Nlerp", q1, q2, t]);
	};

	public function Normalize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Normalize"]);
	};

	public function Normalized():QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Normalized"]);
	};

	public function RotatedVector(vector:QVector3D_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RotatedVector", vector]);
	};

	public function RotationTo(from:QVector3D_ITF, to:QVector3D_ITF):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RotationTo", from, to]);
	};

	public function Scalar():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Scalar"]);
	};

	public function SetScalar(scalar:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScalar", scalar]);
	};

	public function SetVector(vector:QVector3D_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVector", vector]);
	};

	public function SetVector2(x:Float, y:Float, z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVector2", x, y, z]);
	};

	public function SetX(x:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetX", x]);
	};

	public function SetY(y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetY", y]);
	};

	public function SetZ(z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetZ", z]);
	};

	public function Slerp(q1:QQuaternion_ITF, q2:QQuaternion_ITF, t:Float):QQuaternion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Slerp", q1, q2, t]);
	};

	public function ToEulerAngles():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToEulerAngles"]);
	};

	public function ToVector4D():QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector4D"]);
	};

	public function Vector():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Vector"]);
	};

	public function X():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};

	public function Z():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Z"]);
	};
}

function NewQQuaternionFromPointer(ptr:String):QQuaternion {
	final r = new QQuaternion();
	r.initFrom(ptr, "gui.QQuaternion");
	return r;
}

function NewQQuaternion():QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQQuaternion", ""]);
}

function NewQQuaternion3(scalar:Float, xpos:Float, ypos:Float, zpos:Float):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQQuaternion3", "", scalar, xpos, ypos, zpos]);
}

function NewQQuaternion4(scalar:Float, vector:QVector3D_ITF):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQQuaternion4", "", scalar, vector]);
}

function NewQQuaternion5(vector:QVector4D_ITF):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQQuaternion5", "", vector]);
}

function QQuaternion_DotProduct(q1:QQuaternion_ITF, q2:QQuaternion_ITF):Float {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_DotProduct", "", q1, q2]);
}

function QQuaternion_FromAxes(xAxis:QVector3D_ITF, yAxis:QVector3D_ITF, zAxis:QVector3D_ITF):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_FromAxes", "", xAxis, yAxis, zAxis]);
}

function QQuaternion_FromAxisAndAngle(axis:QVector3D_ITF, angle:Float):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_FromAxisAndAngle", "", axis, angle]);
}

function QQuaternion_FromAxisAndAngle2(x:Float, y:Float, z:Float, angle:Float):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_FromAxisAndAngle2", "", x, y, z, angle]);
}

function QQuaternion_FromDirection(direction:QVector3D_ITF, up:QVector3D_ITF):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_FromDirection", "", direction, up]);
}

function QQuaternion_FromEulerAngles(pitch:Float, yaw:Float, roll:Float):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_FromEulerAngles", "", pitch, yaw, roll]);
}

function QQuaternion_FromEulerAngles2(eulerAngles:QVector3D_ITF):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_FromEulerAngles2", "", eulerAngles]);
}

function QQuaternion_Nlerp(q1:QQuaternion_ITF, q2:QQuaternion_ITF, t:Float):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_Nlerp", "", q1, q2, t]);
}

function QQuaternion_RotationTo(from:QVector3D_ITF, to:QVector3D_ITF):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_RotationTo", "", from, to]);
}

function QQuaternion_Slerp(q1:QQuaternion_ITF, q2:QQuaternion_ITF, t:Float):QQuaternion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QQuaternion_Slerp", "", q1, q2, t]);
}

interface QRadialGradient_ITF extends QGradient_ITF {
	public function QRadialGradient_PTR():QRadialGradient;
}

class QRadialGradient extends QGradient implements QRadialGradient_ITF {
	public function new() {
		super();
	}

	public function QRadialGradient_PTR():QRadialGradient {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRadialGradient_PTR"]);
	};

	public function DestroyQRadialGradient() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRadialGradient"]);
	};

	public function Center():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Center"]);
	};

	public function CenterRadius():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CenterRadius"]);
	};

	public function FocalPoint():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocalPoint"]);
	};

	public function FocalRadius():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocalRadius"]);
	};

	public function Radius():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Radius"]);
	};

	public function SetCenter(center:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCenter", center]);
	};

	public function SetCenter2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCenter2", x, y]);
	};

	public function SetCenterRadius(radius:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCenterRadius", radius]);
	};

	public function SetFocalPoint(focalPoint:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFocalPoint", focalPoint]);
	};

	public function SetFocalPoint2(x:Float, y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFocalPoint2", x, y]);
	};

	public function SetFocalRadius(radius:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFocalRadius", radius]);
	};

	public function SetRadius(radius:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRadius", radius]);
	};
}

function NewQRadialGradientFromPointer(ptr:String):QRadialGradient {
	final r = new QRadialGradient();
	r.initFrom(ptr, "gui.QRadialGradient");
	return r;
}

function NewQRadialGradient():QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRadialGradient", ""]);
}

function NewQRadialGradient2(center:QPointF_ITF, radius:Float, focalPoint:QPointF_ITF):QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRadialGradient2", "", center, radius, focalPoint]);
}

function NewQRadialGradient3(cx:Float, cy:Float, radius:Float, fx:Float, fy:Float):QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRadialGradient3", "", cx, cy, radius, fx, fy]);
}

function NewQRadialGradient4(center:QPointF_ITF, radius:Float):QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRadialGradient4", "", center, radius]);
}

function NewQRadialGradient5(cx:Float, cy:Float, radius:Float):QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRadialGradient5", "", cx, cy, radius]);
}

function NewQRadialGradient6(center:QPointF_ITF, centerRadius:Float, focalPoint:QPointF_ITF, focalRadius:Float):QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction([
		"",
		"",
		"gui.NewQRadialGradient6",
		"",
		center,
		centerRadius,
		focalPoint,
		focalRadius
	]);
}

function NewQRadialGradient7(cx:Float, cy:Float, centerRadius:Float, fx:Float, fy:Float, focalRadius:Float):QRadialGradient {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRadialGradient7", "", cx, cy, centerRadius, fx, fy, focalRadius]);
}

interface QRasterPaintEngine_ITF extends QPaintEngine_ITF {
	public function QRasterPaintEngine_PTR():QRasterPaintEngine;
}

class QRasterPaintEngine extends QPaintEngine implements QRasterPaintEngine_ITF {
	public function new() {
		super();
	}

	public function QRasterPaintEngine_PTR():QRasterPaintEngine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRasterPaintEngine_PTR"]);
	};
}

interface QRasterWindow_ITF extends QPaintDeviceWindow_ITF {
	public function QRasterWindow_PTR():QRasterWindow;
}

class QRasterWindow extends QPaintDeviceWindow implements QRasterWindow_ITF {
	public function new() {
		super();
	}

	public function QRasterWindow_PTR():QRasterWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRasterWindow_PTR"]);
	};
}

function NewQRasterWindowFromPointer(ptr:String):QRasterWindow {
	final r = new QRasterWindow();
	r.initFrom(ptr, "gui.QRasterWindow");
	return r;
}

function NewQRasterWindow(parent:QWindow_ITF):QRasterWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRasterWindow", "", parent]);
}

interface QRawFont_ITF {
	public function QRawFont_PTR():QRawFont;
}

class QRawFont extends Internal implements QRawFont_ITF {
	public function new() {
		super();
	}

	public function QRawFont_PTR():QRawFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRawFont_PTR"]);
	};

	public function AdvancesForGlyphIndexes(glyphIndexes:Array<Int>, layoutFlags:Int):Array<QPointF> {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"AdvancesForGlyphIndexes",
			glyphIndexes,
			layoutFlags
		]);
	};

	public function AdvancesForGlyphIndexes2(glyphIndexes:Array<Int>):Array<QPointF> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AdvancesForGlyphIndexes2", glyphIndexes]);
	};

	public function AdvancesForGlyphIndexes3(glyphIndexes:Int, advances:QPointF_ITF, numGlyphs:Int):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"AdvancesForGlyphIndexes3",
			glyphIndexes,
			advances,
			numGlyphs
		]);
	};

	public function AdvancesForGlyphIndexes4(glyphIndexes:Int, advances:QPointF_ITF, numGlyphs:Int, layoutFlags:Int):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"AdvancesForGlyphIndexes4",
			glyphIndexes,
			advances,
			numGlyphs,
			layoutFlags
		]);
	};

	public function AlphaMapForGlyph(glyphIndex:Int, antialiasingType:Int, transform:QTransform_ITF):QImage {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"AlphaMapForGlyph",
			glyphIndex,
			antialiasingType,
			transform
		]);
	};

	public function Ascent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Ascent"]);
	};

	public function AverageCharWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AverageCharWidth"]);
	};

	public function BoundingRect(glyphIndex:Int):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect", glyphIndex]);
	};

	public function CapHeight():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CapHeight"]);
	};

	public function Descent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Descent"]);
	};

	public function FamilyName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FamilyName"]);
	};

	public function FontTable(tagName:String):QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontTable", tagName]);
	};

	public function FromFont(font:QFont_ITF, writingSystem:Int):QRawFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromFont", font, writingSystem]);
	};

	public function GlyphIndexesForChars(chars:QChar_ITF, numChars:Int, glyphIndexes:Int, numGlyphs:Int):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"GlyphIndexesForChars",
			chars,
			numChars,
			glyphIndexes,
			numGlyphs
		]);
	};

	public function GlyphIndexesForString(text:String):Array<Int> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlyphIndexesForString", text]);
	};

	public function HintingPreference():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HintingPreference"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Leading():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Leading"]);
	};

	public function LineThickness():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineThickness"]);
	};

	public function LoadFromData(fontData:QByteArray_ITF, pixelSize:Float, hintingPreference:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"LoadFromData",
			fontData,
			pixelSize,
			hintingPreference
		]);
	};

	public function LoadFromFile(fileName:String, pixelSize:Float, hintingPreference:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"LoadFromFile",
			fileName,
			pixelSize,
			hintingPreference
		]);
	};

	public function MaxCharWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaxCharWidth"]);
	};

	public function PathForGlyph(glyphIndex:Int):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PathForGlyph", glyphIndex]);
	};

	public function PixelSize():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelSize"]);
	};

	public function SetPixelSize(pixelSize:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPixelSize", pixelSize]);
	};

	public function Style():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Style"]);
	};

	public function StyleName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StyleName"]);
	};

	public function SupportedWritingSystems():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedWritingSystems"]);
	};

	public function SupportsCharacter(character:QChar_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsCharacter", character]);
	};

	public function SupportsCharacter2(ucs4:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsCharacter2", ucs4]);
	};

	public function Swap(other:QRawFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function UnderlinePosition():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnderlinePosition"]);
	};

	public function UnitsPerEm():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnitsPerEm"]);
	};

	public function Weight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Weight"]);
	};

	public function XHeight():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "XHeight"]);
	};

	public function DestroyQRawFont() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRawFont"]);
	};
}

function NewQRawFontFromPointer(ptr:String):QRawFont {
	final r = new QRawFont();
	r.initFrom(ptr, "gui.QRawFont");
	return r;
}

function NewQRawFont():QRawFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRawFont", ""]);
}

function NewQRawFont2(fileName:String, pixelSize:Float, hintingPreference:Int):QRawFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRawFont2", "", fileName, pixelSize, hintingPreference]);
}

function NewQRawFont3(fontData:QByteArray_ITF, pixelSize:Float, hintingPreference:Int):QRawFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRawFont3", "", fontData, pixelSize, hintingPreference]);
}

function NewQRawFont4(other:QRawFont_ITF):QRawFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRawFont4", "", other]);
}

function QRawFont_FromFont(font:QFont_ITF, writingSystem:Int):QRawFont {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QRawFont_FromFont", "", font, writingSystem]);
}

interface QRegExpValidator_ITF extends QValidator_ITF {
	public function QRegExpValidator_PTR():QRegExpValidator;
}

class QRegExpValidator extends QValidator implements QRegExpValidator_ITF {
	public function new() {
		super();
	}

	public function QRegExpValidator_PTR():QRegExpValidator {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRegExpValidator_PTR"]);
	};

	public function RegExp():QRegExp {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RegExp"]);
	};

	public function ConnectRegExpChanged(f:(regExp:QRegExp) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRegExpChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRegExpChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRegExpChanged"]);
	};

	public function RegExpChanged(regExp:QRegExp_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RegExpChanged", regExp]);
	};

	public function SetRegExp(rx:QRegExp_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRegExp", rx]);
	};

	public override function ConnectValidate(f:(input:String, pos:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectValidate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectValidate"]);
	};

	public override function Validate(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Validate", input, pos]);
	};

	public function ValidateDefault(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ValidateDefault", input, pos]);
	};

	public function ConnectDestroyQRegExpValidator(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQRegExpValidator",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQRegExpValidator() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQRegExpValidator"]);
	};

	public function DestroyQRegExpValidator() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRegExpValidator"]);
	};

	public function DestroyQRegExpValidatorDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRegExpValidatorDefault"]);
	};
}

function NewQRegExpValidatorFromPointer(ptr:String):QRegExpValidator {
	final r = new QRegExpValidator();
	r.initFrom(ptr, "gui.QRegExpValidator");
	return r;
}

function NewQRegExpValidator(parent:QObject_ITF):QRegExpValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegExpValidator", "", parent]);
}

function NewQRegExpValidator2(rx:QRegExp_ITF, parent:QObject_ITF):QRegExpValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegExpValidator2", "", rx, parent]);
}

interface QRegion_ITF {
	public function QRegion_PTR():QRegion;
}

class QRegion extends Internal implements QRegion_ITF {
	public function new() {
		super();
	}

	public function QRegion_PTR():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRegion_PTR"]);
	};

	public function DestroyQRegion() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRegion"]);
	};

	public function BoundingRect():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function Contains(p:QPoint_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains", p]);
	};

	public function Contains2(r:QRect_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains2", r]);
	};

	public function Intersected(r:QRegion_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersected", r]);
	};

	public function Intersected2(rect:QRect_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersected2", rect]);
	};

	public function Intersects(region:QRegion_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersects", region]);
	};

	public function Intersects2(rect:QRect_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Intersects2", rect]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function RectCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RectCount"]);
	};

	public function SetRects(rects:QRect_ITF, number:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRects", rects, number]);
	};

	public function Subtracted(r:QRegion_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Subtracted", r]);
	};

	public function Swap(other:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Translate(dx:Int, dy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate", dx, dy]);
	};

	public function Translate2(point:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Translate2", point]);
	};

	public function Translated(dx:Int, dy:Int):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated", dx, dy]);
	};

	public function Translated2(p:QPoint_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translated2", p]);
	};

	public function United(r:QRegion_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "United", r]);
	};

	public function United2(rect:QRect_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "United2", rect]);
	};

	public function Xored(r:QRegion_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Xored", r]);
	};
}

function NewQRegionFromPointer(ptr:String):QRegion {
	final r = new QRegion();
	r.initFrom(ptr, "gui.QRegion");
	return r;
}

function NewQRegion():QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion", ""]);
}

function NewQRegion2(x:Int, y:Int, w:Int, h:Int, t:Int):QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion2", "", x, y, w, h, t]);
}

function NewQRegion3(r:QRect_ITF, t:Int):QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion3", "", r, t]);
}

function NewQRegion4(a:QPolygon_ITF, fillRule:Int):QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion4", "", a, fillRule]);
}

function NewQRegion5(r:QRegion_ITF):QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion5", "", r]);
}

function NewQRegion6(other:QRegion_ITF):QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion6", "", other]);
}

function NewQRegion7(bm:QBitmap_ITF):QRegion {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegion7", "", bm]);
}

interface QRegularExpressionValidator_ITF extends QValidator_ITF {
	public function QRegularExpressionValidator_PTR():QRegularExpressionValidator;
}

class QRegularExpressionValidator extends QValidator implements QRegularExpressionValidator_ITF {
	public function new() {
		super();
	}

	public function QRegularExpressionValidator_PTR():QRegularExpressionValidator {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRegularExpressionValidator_PTR"]);
	};

	public function RegularExpression():QRegularExpression {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RegularExpression"]);
	};

	public function ConnectRegularExpressionChanged(f:(re:QRegularExpression) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectRegularExpressionChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectRegularExpressionChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRegularExpressionChanged"]);
	};

	public function RegularExpressionChanged(re:QRegularExpression_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RegularExpressionChanged", re]);
	};

	public function ConnectSetRegularExpression(f:(re:QRegularExpression) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectSetRegularExpression",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectSetRegularExpression() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetRegularExpression"]);
	};

	public function SetRegularExpression(re:QRegularExpression_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRegularExpression", re]);
	};

	public function SetRegularExpressionDefault(re:QRegularExpression_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRegularExpressionDefault", re]);
	};

	public override function ConnectValidate(f:(input:String, pos:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectValidate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectValidate"]);
	};

	public override function Validate(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Validate", input, pos]);
	};

	public function ValidateDefault(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ValidateDefault", input, pos]);
	};

	public function ConnectDestroyQRegularExpressionValidator(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQRegularExpressionValidator",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQRegularExpressionValidator() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQRegularExpressionValidator"]);
	};

	public function DestroyQRegularExpressionValidator() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRegularExpressionValidator"]);
	};

	public function DestroyQRegularExpressionValidatorDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRegularExpressionValidatorDefault"]);
	};
}

function NewQRegularExpressionValidatorFromPointer(ptr:String):QRegularExpressionValidator {
	final r = new QRegularExpressionValidator();
	r.initFrom(ptr, "gui.QRegularExpressionValidator");
	return r;
}

function NewQRegularExpressionValidator(parent:QObject_ITF):QRegularExpressionValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegularExpressionValidator", "", parent]);
}

function NewQRegularExpressionValidator2(re:QRegularExpression_ITF, parent:QObject_ITF):QRegularExpressionValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQRegularExpressionValidator2", "", re, parent]);
}

interface QResizeEvent_ITF extends QEvent_ITF {
	public function QResizeEvent_PTR():QResizeEvent;
}

class QResizeEvent extends QEvent implements QResizeEvent_ITF {
	public function new() {
		super();
	}

	public function QResizeEvent_PTR():QResizeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QResizeEvent_PTR"]);
	};

	public function DestroyQResizeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQResizeEvent"]);
	};

	public function OldSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OldSize"]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};
}

function NewQResizeEventFromPointer(ptr:String):QResizeEvent {
	final r = new QResizeEvent();
	r.initFrom(ptr, "gui.QResizeEvent");
	return r;
}

function NewQResizeEvent(size:QSize_ITF, oldSize:QSize_ITF):QResizeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQResizeEvent", "", size, oldSize]);
}

interface QRgba64_ITF {
	public function QRgba64_PTR():QRgba64;
}

class QRgba64 extends Internal implements QRgba64_ITF {
	public function new() {
		super();
	}

	public function QRgba64_PTR():QRgba64 {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QRgba64_PTR"]);
	};

	public function DestroyQRgba64() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQRgba64"]);
	};

	public function Alpha():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alpha"]);
	};

	public function Alpha8():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alpha8"]);
	};

	public function Blue():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Blue"]);
	};

	public function Blue8():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Blue8"]);
	};

	public function Green():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Green"]);
	};

	public function Green8():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Green8"]);
	};

	public function IsOpaque():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsOpaque"]);
	};

	public function IsTransparent():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsTransparent"]);
	};

	public function Red():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Red"]);
	};

	public function Red8():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Red8"]);
	};

	public function SetAlpha(alpha:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlpha", alpha]);
	};

	public function SetBlue(blue:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBlue", blue]);
	};

	public function SetGreen(green:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGreen", green]);
	};

	public function SetRed(red:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRed", red]);
	};

	public function ToArgb32():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToArgb32"]);
	};

	public function ToRgb16():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToRgb16"]);
	};
}

function NewQRgba64FromPointer(ptr:String):QRgba64 {
	final r = new QRgba64();
	r.initFrom(ptr, "gui.QRgba64");
	return r;
}

interface QScreen_ITF extends QObject_ITF {
	public function QScreen_PTR():QScreen;
}

class QScreen extends QObject implements QScreen_ITF {
	public function new() {
		super();
	}

	public function QScreen_PTR():QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QScreen_PTR"]);
	};

	public function AngleBetween(a:Int, b:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AngleBetween", a, b]);
	};

	public function AvailableGeometry():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableGeometry"]);
	};

	public function ConnectAvailableGeometryChanged(f:(geometry:QRect) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectAvailableGeometryChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectAvailableGeometryChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAvailableGeometryChanged"]);
	};

	public function AvailableGeometryChanged(geometry:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AvailableGeometryChanged", geometry]);
	};

	public function AvailableSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableSize"]);
	};

	public function AvailableVirtualGeometry():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableVirtualGeometry"]);
	};

	public function AvailableVirtualSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableVirtualSize"]);
	};

	public function Depth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Depth"]);
	};

	public function DevicePixelRatio():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatio"]);
	};

	public function Geometry():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Geometry"]);
	};

	public function ConnectGeometryChanged(f:(geometry:QRect) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectGeometryChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectGeometryChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectGeometryChanged"]);
	};

	public function GeometryChanged(geometry:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "GeometryChanged", geometry]);
	};

	public function GrabWindow(window:Int, x:Int, y:Int, width:Int, height:Int):QPixmap {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GrabWindow", window, x, y, width, height]);
	};

	public function IsLandscape(o:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsLandscape", o]);
	};

	public function IsPortrait(o:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsPortrait", o]);
	};

	public function LogicalDotsPerInch():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LogicalDotsPerInch"]);
	};

	public function ConnectLogicalDotsPerInchChanged(f:(dpi:Float) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectLogicalDotsPerInchChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectLogicalDotsPerInchChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLogicalDotsPerInchChanged"]);
	};

	public function LogicalDotsPerInchChanged(dpi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "LogicalDotsPerInchChanged", dpi]);
	};

	public function LogicalDotsPerInchX():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LogicalDotsPerInchX"]);
	};

	public function LogicalDotsPerInchY():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LogicalDotsPerInchY"]);
	};

	public function Manufacturer():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Manufacturer"]);
	};

	public function MapBetween(a:Int, b:Int, rect:QRect_ITF):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapBetween", a, b, rect]);
	};

	public function Model():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Model"]);
	};

	public function Name():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name"]);
	};

	public function NativeOrientation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeOrientation"]);
	};

	public function Orientation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Orientation"]);
	};

	public function ConnectOrientationChanged(f:(orientation:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectOrientationChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectOrientationChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectOrientationChanged"]);
	};

	public function OrientationChanged(orientation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "OrientationChanged", orientation]);
	};

	public function OrientationUpdateMask():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OrientationUpdateMask"]);
	};

	public function PhysicalDotsPerInch():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalDotsPerInch"]);
	};

	public function ConnectPhysicalDotsPerInchChanged(f:(dpi:Float) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectPhysicalDotsPerInchChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectPhysicalDotsPerInchChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPhysicalDotsPerInchChanged"]);
	};

	public function PhysicalDotsPerInchChanged(dpi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalDotsPerInchChanged", dpi]);
	};

	public function PhysicalDotsPerInchX():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalDotsPerInchX"]);
	};

	public function PhysicalDotsPerInchY():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalDotsPerInchY"]);
	};

	public function PhysicalSize():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalSize"]);
	};

	public function ConnectPhysicalSizeChanged(f:(size:QSizeF) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectPhysicalSizeChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectPhysicalSizeChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPhysicalSizeChanged"]);
	};

	public function PhysicalSizeChanged(size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PhysicalSizeChanged", size]);
	};

	public function PrimaryOrientation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PrimaryOrientation"]);
	};

	public function ConnectPrimaryOrientationChanged(f:(orientation:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectPrimaryOrientationChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectPrimaryOrientationChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectPrimaryOrientationChanged"]);
	};

	public function PrimaryOrientationChanged(orientation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "PrimaryOrientationChanged", orientation]);
	};

	public function RefreshRate():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RefreshRate"]);
	};

	public function ConnectRefreshRateChanged(f:(refreshRate:Float) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectRefreshRateChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectRefreshRateChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRefreshRateChanged"]);
	};

	public function RefreshRateChanged(refreshRate:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RefreshRateChanged", refreshRate]);
	};

	public function SerialNumber():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SerialNumber"]);
	};

	public function SetOrientationUpdateMask(mask:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOrientationUpdateMask", mask]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function TransformBetween(a:Int, b:Int, target:QRect_ITF):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TransformBetween", a, b, target]);
	};

	public function VirtualGeometry():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VirtualGeometry"]);
	};

	public function ConnectVirtualGeometryChanged(f:(rect:QRect) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectVirtualGeometryChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectVirtualGeometryChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectVirtualGeometryChanged"]);
	};

	public function VirtualGeometryChanged(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "VirtualGeometryChanged", rect]);
	};

	public function VirtualSiblings():Array<QScreen> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VirtualSiblings"]);
	};

	public function VirtualSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VirtualSize"]);
	};

	public function ConnectDestroyQScreen(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQScreen", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQScreen() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQScreen"]);
	};

	public function DestroyQScreen() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScreen"]);
	};

	public function DestroyQScreenDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScreenDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQScreenFromPointer(ptr:String):QScreen {
	final r = new QScreen();
	r.initFrom(ptr, "gui.QScreen");
	return r;
}

interface QScreenOrientationChangeEvent_ITF extends QEvent_ITF {
	public function QScreenOrientationChangeEvent_PTR():QScreenOrientationChangeEvent;
}

class QScreenOrientationChangeEvent extends QEvent implements QScreenOrientationChangeEvent_ITF {
	public function new() {
		super();
	}

	public function QScreenOrientationChangeEvent_PTR():QScreenOrientationChangeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QScreenOrientationChangeEvent_PTR"]);
	};

	public function Orientation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Orientation"]);
	};

	public function Screen():QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Screen"]);
	};

	public function ConnectDestroyQScreenOrientationChangeEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQScreenOrientationChangeEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQScreenOrientationChangeEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQScreenOrientationChangeEvent"]);
	};

	public function DestroyQScreenOrientationChangeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScreenOrientationChangeEvent"]);
	};

	public function DestroyQScreenOrientationChangeEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScreenOrientationChangeEventDefault"]);
	};
}

function NewQScreenOrientationChangeEventFromPointer(ptr:String):QScreenOrientationChangeEvent {
	final r = new QScreenOrientationChangeEvent();
	r.initFrom(ptr, "gui.QScreenOrientationChangeEvent");
	return r;
}

function NewQScreenOrientationChangeEvent(screen:QScreen_ITF, screenOrientation:Int):QScreenOrientationChangeEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQScreenOrientationChangeEvent", "", screen, screenOrientation]);
}

interface QScrollEvent_ITF extends QEvent_ITF {
	public function QScrollEvent_PTR():QScrollEvent;
}

class QScrollEvent extends QEvent implements QScrollEvent_ITF {
	public function new() {
		super();
	}

	public function QScrollEvent_PTR():QScrollEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QScrollEvent_PTR"]);
	};

	public function ContentPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ContentPos"]);
	};

	public function OvershootDistance():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OvershootDistance"]);
	};

	public function ScrollState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ScrollState"]);
	};

	public function ConnectDestroyQScrollEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQScrollEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQScrollEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQScrollEvent"]);
	};

	public function DestroyQScrollEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScrollEvent"]);
	};

	public function DestroyQScrollEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScrollEventDefault"]);
	};
}

function NewQScrollEventFromPointer(ptr:String):QScrollEvent {
	final r = new QScrollEvent();
	r.initFrom(ptr, "gui.QScrollEvent");
	return r;
}

function NewQScrollEvent(contentPos:QPointF_ITF, overshootDistance:QPointF_ITF, scrollState:Int):QScrollEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQScrollEvent", "", contentPos, overshootDistance, scrollState]);
}

interface QScrollPrepareEvent_ITF extends QEvent_ITF {
	public function QScrollPrepareEvent_PTR():QScrollPrepareEvent;
}

class QScrollPrepareEvent extends QEvent implements QScrollPrepareEvent_ITF {
	public function new() {
		super();
	}

	public function QScrollPrepareEvent_PTR():QScrollPrepareEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QScrollPrepareEvent_PTR"]);
	};

	public function ContentPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ContentPos"]);
	};

	public function ContentPosRange():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ContentPosRange"]);
	};

	public function SetContentPos(pos:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetContentPos", pos]);
	};

	public function SetContentPosRange(rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetContentPosRange", rect]);
	};

	public function SetViewportSize(size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetViewportSize", size]);
	};

	public function StartPos():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StartPos"]);
	};

	public function ViewportSize():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ViewportSize"]);
	};

	public function ConnectDestroyQScrollPrepareEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQScrollPrepareEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQScrollPrepareEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQScrollPrepareEvent"]);
	};

	public function DestroyQScrollPrepareEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScrollPrepareEvent"]);
	};

	public function DestroyQScrollPrepareEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQScrollPrepareEventDefault"]);
	};
}

function NewQScrollPrepareEventFromPointer(ptr:String):QScrollPrepareEvent {
	final r = new QScrollPrepareEvent();
	r.initFrom(ptr, "gui.QScrollPrepareEvent");
	return r;
}

function NewQScrollPrepareEvent(startPos:QPointF_ITF):QScrollPrepareEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQScrollPrepareEvent", "", startPos]);
}

interface QSessionManager_ITF extends QObject_ITF {
	public function QSessionManager_PTR():QSessionManager;
}

class QSessionManager extends QObject implements QSessionManager_ITF {
	public function new() {
		super();
	}

	public function QSessionManager_PTR():QSessionManager {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QSessionManager_PTR"]);
	};

	public function AllowsErrorInteraction():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AllowsErrorInteraction"]);
	};

	public function AllowsInteraction():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AllowsInteraction"]);
	};

	public function Cancel() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Cancel"]);
	};

	public function DiscardCommand():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DiscardCommand"]);
	};

	public function IsPhase2():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsPhase2"]);
	};

	public function Release() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Release"]);
	};

	public function RequestPhase2() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RequestPhase2"]);
	};

	public function RestartCommand():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RestartCommand"]);
	};

	public function RestartHint():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RestartHint"]);
	};

	public function SessionId():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SessionId"]);
	};

	public function SessionKey():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SessionKey"]);
	};

	public function SetDiscardCommand(command:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDiscardCommand", command]);
	};

	public function SetManagerProperty(name:String, value:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetManagerProperty", name, value]);
	};

	public function SetManagerProperty2(name:String, value:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetManagerProperty2", name, value]);
	};

	public function SetRestartCommand(command:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRestartCommand", command]);
	};

	public function SetRestartHint(hint:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRestartHint", hint]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQSessionManagerFromPointer(ptr:String):QSessionManager {
	final r = new QSessionManager();
	r.initFrom(ptr, "gui.QSessionManager");
	return r;
}

interface QShortcutEvent_ITF extends QEvent_ITF {
	public function QShortcutEvent_PTR():QShortcutEvent;
}

class QShortcutEvent extends QEvent implements QShortcutEvent_ITF {
	public function new() {
		super();
	}

	public function QShortcutEvent_PTR():QShortcutEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QShortcutEvent_PTR"]);
	};

	public function IsAmbiguous():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAmbiguous"]);
	};

	public function Key():QKeySequence {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Key"]);
	};

	public function ShortcutId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShortcutId"]);
	};

	public function ConnectDestroyQShortcutEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQShortcutEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQShortcutEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQShortcutEvent"]);
	};

	public function DestroyQShortcutEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQShortcutEvent"]);
	};

	public function DestroyQShortcutEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQShortcutEventDefault"]);
	};
}

function NewQShortcutEventFromPointer(ptr:String):QShortcutEvent {
	final r = new QShortcutEvent();
	r.initFrom(ptr, "gui.QShortcutEvent");
	return r;
}

function NewQShortcutEvent(key:QKeySequence_ITF, id:Int, ambiguous:Bool):QShortcutEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQShortcutEvent", "", key, id, ambiguous]);
}

interface QShowEvent_ITF extends QEvent_ITF {
	public function QShowEvent_PTR():QShowEvent;
}

class QShowEvent extends QEvent implements QShowEvent_ITF {
	public function new() {
		super();
	}

	public function QShowEvent_PTR():QShowEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QShowEvent_PTR"]);
	};

	public function DestroyQShowEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQShowEvent"]);
	};
}

function NewQShowEventFromPointer(ptr:String):QShowEvent {
	final r = new QShowEvent();
	r.initFrom(ptr, "gui.QShowEvent");
	return r;
}

function NewQShowEvent():QShowEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQShowEvent", ""]);
}

interface QStandardItem_ITF {
	public function QStandardItem_PTR():QStandardItem;
}

class QStandardItem extends Internal implements QStandardItem_ITF {
	public function new() {
		super();
	}

	public function QStandardItem_PTR():QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QStandardItem_PTR"]);
	};

	public function AccessibleDescription():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AccessibleDescription"]);
	};

	public function AccessibleText():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AccessibleText"]);
	};

	public function AppendColumn(items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendColumn", items]);
	};

	public function AppendRow(items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendRow", items]);
	};

	public function AppendRow2(item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendRow2", item]);
	};

	public function AppendRows(items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendRows", items]);
	};

	public function Background():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Background"]);
	};

	public function CheckState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CheckState"]);
	};

	public function Child(row:Int, column:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Child", row, column]);
	};

	public function ClearData() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearData"]);
	};

	public function ConnectClone(f:() -> QStandardItem) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectClone", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectClone() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectClone"]);
	};

	public function Clone():QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Clone"]);
	};

	public function CloneDefault():QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CloneDefault"]);
	};

	public function Column():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Column"]);
	};

	public function ColumnCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnCount"]);
	};

	public function ConnectData(f:(role:Int) -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectData", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectData() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectData"]);
	};

	public function Data(role:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Data", role]);
	};

	public function DataDefault(role:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DataDefault", role]);
	};

	public function EmitDataChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EmitDataChanged"]);
	};

	public function Flags():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Flags"]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function Foreground():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Foreground"]);
	};

	public function HasChildren():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasChildren"]);
	};

	public function Icon():QIcon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Icon"]);
	};

	public function Index():QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Index"]);
	};

	public function InsertColumn(column:Int, items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertColumn", column, items]);
	};

	public function InsertColumns(column:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertColumns", column, count]);
	};

	public function InsertRow(row:Int, items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRow", row, items]);
	};

	public function InsertRow2(row:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRow2", row, item]);
	};

	public function InsertRows(row:Int, items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRows", row, items]);
	};

	public function InsertRows2(row:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRows2", row, count]);
	};

	public function IsAutoTristate():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAutoTristate"]);
	};

	public function IsCheckable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCheckable"]);
	};

	public function IsDragEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsDragEnabled"]);
	};

	public function IsDropEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsDropEnabled"]);
	};

	public function IsEditable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEditable"]);
	};

	public function IsEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEnabled"]);
	};

	public function IsSelectable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsSelectable"]);
	};

	public function IsUserTristate():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsUserTristate"]);
	};

	public function Model():QStandardItemModel {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Model"]);
	};

	public function Parent():QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parent"]);
	};

	public function ConnectRead(f:(i:QDataStream) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRead", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRead() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRead"]);
	};

	public function Read(i:QDataStream_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Read", i]);
	};

	public function ReadDefault(i:QDataStream_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ReadDefault", i]);
	};

	public function RemoveColumn(column:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveColumn", column]);
	};

	public function RemoveColumns(column:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveColumns", column, count]);
	};

	public function RemoveRow(row:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveRow", row]);
	};

	public function RemoveRows(row:Int, count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveRows", row, count]);
	};

	public function Row():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Row"]);
	};

	public function RowCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowCount"]);
	};

	public function SetAccessibleDescription(accessibleDescription:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAccessibleDescription", accessibleDescription]);
	};

	public function SetAccessibleText(accessibleText:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAccessibleText", accessibleText]);
	};

	public function SetAutoTristate(tristate:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAutoTristate", tristate]);
	};

	public function SetBackground(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBackground", brush]);
	};

	public function SetCheckState(state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCheckState", state]);
	};

	public function SetCheckable(checkable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCheckable", checkable]);
	};

	public function SetChild(row:Int, column:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetChild", row, column, item]);
	};

	public function SetChild2(row:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetChild2", row, item]);
	};

	public function SetColumnCount(columns:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColumnCount", columns]);
	};

	public function ConnectSetData(f:(value:QVariant, role:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetData", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetData() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetData"]);
	};

	public function SetData(value:QVariant_ITF, role:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetData", value, role]);
	};

	public function SetDataDefault(value:QVariant_ITF, role:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDataDefault", value, role]);
	};

	public function SetDragEnabled(dragEnabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDragEnabled", dragEnabled]);
	};

	public function SetDropEnabled(dropEnabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDropEnabled", dropEnabled]);
	};

	public function SetEditable(editable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetEditable", editable]);
	};

	public function SetEnabled(enabled:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetEnabled", enabled]);
	};

	public function SetFlags(flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFlags", flags]);
	};

	public function SetFont(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFont", font]);
	};

	public function SetForeground(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetForeground", brush]);
	};

	public function SetIcon(icon:QIcon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIcon", icon]);
	};

	public function SetRowCount(rows:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRowCount", rows]);
	};

	public function SetSelectable(selectable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSelectable", selectable]);
	};

	public function SetSizeHint(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSizeHint", size]);
	};

	public function SetStatusTip(statusTip:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStatusTip", statusTip]);
	};

	public function SetText(text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", text]);
	};

	public function SetTextAlignment(alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextAlignment", alignment]);
	};

	public function SetToolTip(toolTip:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetToolTip", toolTip]);
	};

	public function SetUserTristate(tristate:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUserTristate", tristate]);
	};

	public function SetWhatsThis(whatsThis:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWhatsThis", whatsThis]);
	};

	public function SizeHint():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizeHint"]);
	};

	public function SortChildren(column:Int, order:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SortChildren", column, order]);
	};

	public function StatusTip():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StatusTip"]);
	};

	public function TakeChild(row:Int, column:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeChild", row, column]);
	};

	public function TakeColumn(column:Int):Array<QStandardItem> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeColumn", column]);
	};

	public function TakeRow(row:Int):Array<QStandardItem> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeRow", row]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};

	public function TextAlignment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextAlignment"]);
	};

	public function ToolTip():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToolTip"]);
	};

	public function ConnectType(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectType", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectType() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectType"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function TypeDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TypeDefault"]);
	};

	public function WhatsThis():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WhatsThis"]);
	};

	public function ConnectWrite(f:(out:QDataStream) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectWrite", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectWrite() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWrite"]);
	};

	public function Write(out:QDataStream_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Write", out]);
	};

	public function WriteDefault(out:QDataStream_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WriteDefault", out]);
	};

	public function ConnectDestroyQStandardItem(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQStandardItem",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQStandardItem() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQStandardItem"]);
	};

	public function DestroyQStandardItem() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQStandardItem"]);
	};

	public function DestroyQStandardItemDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQStandardItemDefault"]);
	};
}

function NewQStandardItemFromPointer(ptr:String):QStandardItem {
	final r = new QStandardItem();
	r.initFrom(ptr, "gui.QStandardItem");
	return r;
}

function NewQStandardItem():QStandardItem {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItem", ""]);
}

function NewQStandardItem2(text:String):QStandardItem {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItem2", "", text]);
}

function NewQStandardItem3(icon:QIcon_ITF, text:String):QStandardItem {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItem3", "", icon, text]);
}

function NewQStandardItem4(rows:Int, columns:Int):QStandardItem {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItem4", "", rows, columns]);
}

function NewQStandardItem5(other:QStandardItem_ITF):QStandardItem {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItem5", "", other]);
}

interface QStandardItemModel_ITF extends QAbstractItemModel_ITF {
	public function QStandardItemModel_PTR():QStandardItemModel;
}

class QStandardItemModel extends QAbstractItemModel implements QStandardItemModel_ITF {
	public function new() {
		super();
	}

	public function QStandardItemModel_PTR():QStandardItemModel {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QStandardItemModel_PTR"]);
	};

	public function AppendColumn(items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendColumn", items]);
	};

	public function AppendRow(items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendRow", items]);
	};

	public function AppendRow2(item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendRow2", item]);
	};

	public function Clear() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear"]);
	};

	public function ClearItemData(index:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ClearItemData", index]);
	};

	public override function ConnectColumnCount(f:(parent:QModelIndex) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectColumnCount", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectColumnCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectColumnCount"]);
	};

	public override function ColumnCount(parent:QModelIndex_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnCount", parent]);
	};

	public function ColumnCountDefault(parent:QModelIndex_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnCountDefault", parent]);
	};

	public override function ConnectData(f:(index:QModelIndex, role:Int) -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectData", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectData() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectData"]);
	};

	public override function Data(index:QModelIndex_ITF, role:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Data", index, role]);
	};

	public function DataDefault(index:QModelIndex_ITF, role:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DataDefault", index, role]);
	};

	public override function DropMimeDataDefault(data:QMimeData_ITF, action:Int, row:Int, column:Int, parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"DropMimeDataDefault",
			data,
			action,
			row,
			column,
			parent
		]);
	};

	public function FindItems(text:String, flags:Int, column:Int):Array<QStandardItem> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FindItems", text, flags, column]);
	};

	public override function FlagsDefault(index:QModelIndex_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FlagsDefault", index]);
	};

	public override function HasChildrenDefault(parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasChildrenDefault", parent]);
	};

	public override function HeaderDataDefault(section:Int, orientation:Int, role:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HeaderDataDefault", section, orientation, role]);
	};

	public function HorizontalHeaderItem(column:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HorizontalHeaderItem", column]);
	};

	public override function ConnectIndex(f:(row:Int, column:Int, parent:QModelIndex) -> QModelIndex) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIndex", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectIndex() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIndex"]);
	};

	public override function Index(row:Int, column:Int, parent:QModelIndex_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Index", row, column, parent]);
	};

	public function IndexDefault(row:Int, column:Int, parent:QModelIndex_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IndexDefault", row, column, parent]);
	};

	public function IndexFromItem(item:QStandardItem_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IndexFromItem", item]);
	};

	public function InsertColumn_QStandardItemModel(column:Int, items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertColumn", column, items]);
	};

	public override function InsertColumnsDefault(column:Int, count:Int, parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertColumnsDefault", column, count, parent]);
	};

	public function InsertRow_QStandardItemModel(row:Int, items:Array<QStandardItem>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRow", row, items]);
	};

	public function InsertRow2(row:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRow2", row, item]);
	};

	public override function InsertRowsDefault(row:Int, count:Int, parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertRowsDefault", row, count, parent]);
	};

	public function InvisibleRootItem():QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InvisibleRootItem"]);
	};

	public function Item(row:Int, column:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Item", row, column]);
	};

	public function ConnectItemChanged(f:(item:QStandardItem) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectItemChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectItemChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectItemChanged"]);
	};

	public function ItemChanged(item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ItemChanged", item]);
	};

	public override function ItemDataDefault(index:QModelIndex_ITF):Map<Int, QVariant> {
		final _tmpValue:Map<String, Dynamic> = Internal.callLocalFunction(["", Pointer(), ___className, "ItemDataDefault", index]);
		return [for (k => v in _tmpValue) Std.parseInt(k) => v];
	};

	public function ItemFromIndex(index:QModelIndex_ITF):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ItemFromIndex", index]);
	};

	public function ItemPrototype():QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ItemPrototype"]);
	};

	public override function MimeDataDefault(indexes:Array<QModelIndex>):QMimeData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MimeDataDefault", indexes]);
	};

	public override function MimeTypesDefault():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MimeTypesDefault"]);
	};

	public override function ConnectParent_QAbstractItemModel(f:(child:QModelIndex) -> QModelIndex) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectParent", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectParent_QAbstractItemModel() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectParent"]);
	};

	public override function Parent_QAbstractItemModel(child:QModelIndex_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parent", child]);
	};

	public function ParentDefault_QAbstractItemModel(child:QModelIndex_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ParentDefault", child]);
	};

	public override function RemoveColumnsDefault(column:Int, count:Int, parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RemoveColumnsDefault", column, count, parent]);
	};

	public override function RemoveRowsDefault(row:Int, count:Int, parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RemoveRowsDefault", row, count, parent]);
	};

	public override function ConnectRowCount(f:(parent:QModelIndex) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRowCount", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectRowCount() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRowCount"]);
	};

	public override function RowCount(parent:QModelIndex_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowCount", parent]);
	};

	public function RowCountDefault(parent:QModelIndex_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowCountDefault", parent]);
	};

	public function SetColumnCount(columns:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColumnCount", columns]);
	};

	public override function SetDataDefault(index:QModelIndex_ITF, value:QVariant_ITF, role:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetDataDefault", index, value, role]);
	};

	public override function SetHeaderDataDefault(section:Int, orientation:Int, value:QVariant_ITF, role:Int):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetHeaderDataDefault",
			section,
			orientation,
			value,
			role
		]);
	};

	public function SetHorizontalHeaderItem(column:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHorizontalHeaderItem", column, item]);
	};

	public function SetHorizontalHeaderLabels(labels:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHorizontalHeaderLabels", labels]);
	};

	public function SetItem(row:Int, column:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetItem", row, column, item]);
	};

	public function SetItem2(row:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetItem2", row, item]);
	};

	public override function SetItemDataDefault(index:QModelIndex_ITF, roles:Map<Int, QVariant>):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetItemDataDefault", index, roles]);
	};

	public function SetItemPrototype(item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetItemPrototype", item]);
	};

	public function SetItemRoleNames(roleNames:Map<Int, QByteArray>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetItemRoleNames", roleNames]);
	};

	public function SetRowCount(rows:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRowCount", rows]);
	};

	public function SetSortRole(role:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSortRole", role]);
	};

	public function SetVerticalHeaderItem(row:Int, item:QStandardItem_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVerticalHeaderItem", row, item]);
	};

	public function SetVerticalHeaderLabels(labels:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVerticalHeaderLabels", labels]);
	};

	public override function SiblingDefault(row:Int, column:Int, idx:QModelIndex_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SiblingDefault", row, column, idx]);
	};

	public override function SortDefault(column:Int, order:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SortDefault", column, order]);
	};

	public function SortRole():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SortRole"]);
	};

	public override function SupportedDropActionsDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedDropActionsDefault"]);
	};

	public function TakeColumn(column:Int):Array<QStandardItem> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeColumn", column]);
	};

	public function TakeHorizontalHeaderItem(column:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeHorizontalHeaderItem", column]);
	};

	public function TakeItem(row:Int, column:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeItem", row, column]);
	};

	public function TakeRow(row:Int):Array<QStandardItem> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeRow", row]);
	};

	public function TakeVerticalHeaderItem(row:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TakeVerticalHeaderItem", row]);
	};

	public function VerticalHeaderItem(row:Int):QStandardItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VerticalHeaderItem", row]);
	};

	public function ConnectDestroyQStandardItemModel(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQStandardItemModel",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQStandardItemModel() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQStandardItemModel"]);
	};

	public function DestroyQStandardItemModel() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQStandardItemModel"]);
	};

	public function DestroyQStandardItemModelDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQStandardItemModelDefault"]);
	};

	public override function BuddyDefault(index:QModelIndex_ITF):QModelIndex {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BuddyDefault", index]);
	};

	public override function CanDropMimeDataDefault(data:QMimeData_ITF, action:Int, row:Int, column:Int, parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"CanDropMimeDataDefault",
			data,
			action,
			row,
			column,
			parent
		]);
	};

	public override function CanFetchMoreDefault(parent:QModelIndex_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CanFetchMoreDefault", parent]);
	};

	public override function FetchMoreDefault(parent:QModelIndex_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FetchMoreDefault", parent]);
	};

	public override function MatchDefault(start:QModelIndex_ITF, role:Int, value:QVariant_ITF, hits:Int, flags:Int):Array<QModelIndex> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MatchDefault", start, role, value, hits, flags]);
	};

	public override function MoveColumnsDefault(sourceParent:QModelIndex_ITF, sourceColumn:Int, count:Int, destinationParent:QModelIndex_ITF,
			destinationChild:Int):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"MoveColumnsDefault",
			sourceParent,
			sourceColumn,
			count,
			destinationParent,
			destinationChild
		]);
	};

	public override function MoveRowsDefault(sourceParent:QModelIndex_ITF, sourceRow:Int, count:Int, destinationParent:QModelIndex_ITF,
			destinationChild:Int):Bool {
		return Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"MoveRowsDefault",
			sourceParent,
			sourceRow,
			count,
			destinationParent,
			destinationChild
		]);
	};

	public override function ResetInternalDataDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResetInternalDataDefault"]);
	};

	public override function RevertDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RevertDefault"]);
	};

	public override function RoleNamesDefault():Map<Int, QByteArray> {
		final _tmpValue:Map<String, Dynamic> = Internal.callLocalFunction(["", Pointer(), ___className, "RoleNamesDefault"]);
		return [for (k => v in _tmpValue) Std.parseInt(k) => v];
	};

	public override function SpanDefault(index:QModelIndex_ITF):QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SpanDefault", index]);
	};

	public override function SubmitDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SubmitDefault"]);
	};

	public override function SupportedDragActionsDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedDragActionsDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQStandardItemModelFromPointer(ptr:String):QStandardItemModel {
	final r = new QStandardItemModel();
	r.initFrom(ptr, "gui.QStandardItemModel");
	return r;
}

function NewQStandardItemModel(parent:QObject_ITF):QStandardItemModel {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItemModel", "", parent]);
}

function NewQStandardItemModel2(rows:Int, columns:Int, parent:QObject_ITF):QStandardItemModel {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStandardItemModel2", "", rows, columns, parent]);
}

interface QStaticText_ITF {
	public function QStaticText_PTR():QStaticText;
}

class QStaticText extends Internal implements QStaticText_ITF {
	public function new() {
		super();
	}

	public function QStaticText_PTR():QStaticText {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QStaticText_PTR"]);
	};

	public function PerformanceHint():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PerformanceHint"]);
	};

	public function Prepare(matrix:QTransform_ITF, font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Prepare", matrix, font]);
	};

	public function SetPerformanceHint(performanceHint:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPerformanceHint", performanceHint]);
	};

	public function SetText(text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", text]);
	};

	public function SetTextFormat(textFormat:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextFormat", textFormat]);
	};

	public function SetTextOption(textOption:QTextOption_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextOption", textOption]);
	};

	public function SetTextWidth(textWidth:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextWidth", textWidth]);
	};

	public function Size():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function Swap(other:QStaticText_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};

	public function TextFormat():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextFormat"]);
	};

	public function TextOption():QTextOption {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextOption"]);
	};

	public function TextWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextWidth"]);
	};

	public function DestroyQStaticText() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQStaticText"]);
	};
}

function NewQStaticTextFromPointer(ptr:String):QStaticText {
	final r = new QStaticText();
	r.initFrom(ptr, "gui.QStaticText");
	return r;
}

function NewQStaticText():QStaticText {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStaticText", ""]);
}

function NewQStaticText2(text:String):QStaticText {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStaticText2", "", text]);
}

function NewQStaticText3(other:QStaticText_ITF):QStaticText {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStaticText3", "", other]);
}

interface QStatusTipEvent_ITF extends QEvent_ITF {
	public function QStatusTipEvent_PTR():QStatusTipEvent;
}

class QStatusTipEvent extends QEvent implements QStatusTipEvent_ITF {
	public function new() {
		super();
	}

	public function QStatusTipEvent_PTR():QStatusTipEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QStatusTipEvent_PTR"]);
	};

	public function DestroyQStatusTipEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQStatusTipEvent"]);
	};

	public function Tip():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Tip"]);
	};
}

function NewQStatusTipEventFromPointer(ptr:String):QStatusTipEvent {
	final r = new QStatusTipEvent();
	r.initFrom(ptr, "gui.QStatusTipEvent");
	return r;
}

function NewQStatusTipEvent(tip:String):QStatusTipEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQStatusTipEvent", "", tip]);
}

interface QStyleHints_ITF extends QObject_ITF {
	public function QStyleHints_PTR():QStyleHints;
}

class QStyleHints extends QObject implements QStyleHints_ITF {
	public function new() {
		super();
	}

	public function QStyleHints_PTR():QStyleHints {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QStyleHints_PTR"]);
	};

	public function CursorFlashTime():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorFlashTime"]);
	};

	public function ConnectCursorFlashTimeChanged(f:(cursorFlashTime:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectCursorFlashTimeChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectCursorFlashTimeChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCursorFlashTimeChanged"]);
	};

	public function CursorFlashTimeChanged(cursorFlashTime:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CursorFlashTimeChanged", cursorFlashTime]);
	};

	public function FontSmoothingGamma():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontSmoothingGamma"]);
	};

	public function KeyboardAutoRepeatRate():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyboardAutoRepeatRate"]);
	};

	public function KeyboardInputInterval():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeyboardInputInterval"]);
	};

	public function ConnectKeyboardInputIntervalChanged(f:(keyboardInputInterval:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectKeyboardInputIntervalChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectKeyboardInputIntervalChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectKeyboardInputIntervalChanged"]);
	};

	public function KeyboardInputIntervalChanged(keyboardInputInterval:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"KeyboardInputIntervalChanged",
			keyboardInputInterval
		]);
	};

	public function MouseDoubleClickInterval():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MouseDoubleClickInterval"]);
	};

	public function ConnectMouseDoubleClickIntervalChanged(f:(mouseDoubleClickInterval:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMouseDoubleClickIntervalChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMouseDoubleClickIntervalChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMouseDoubleClickIntervalChanged"]);
	};

	public function MouseDoubleClickIntervalChanged(mouseDoubleClickInterval:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"MouseDoubleClickIntervalChanged",
			mouseDoubleClickInterval
		]);
	};

	public function MousePressAndHoldInterval():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MousePressAndHoldInterval"]);
	};

	public function ConnectMousePressAndHoldIntervalChanged(f:(mousePressAndHoldInterval:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMousePressAndHoldIntervalChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMousePressAndHoldIntervalChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMousePressAndHoldIntervalChanged"]);
	};

	public function MousePressAndHoldIntervalChanged(mousePressAndHoldInterval:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"MousePressAndHoldIntervalChanged",
			mousePressAndHoldInterval
		]);
	};

	public function MouseQuickSelectionThreshold():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MouseQuickSelectionThreshold"]);
	};

	public function ConnectMouseQuickSelectionThresholdChanged(f:(threshold:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMouseQuickSelectionThresholdChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMouseQuickSelectionThresholdChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMouseQuickSelectionThresholdChanged"]);
	};

	public function MouseQuickSelectionThresholdChanged(threshold:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseQuickSelectionThresholdChanged", threshold]);
	};

	public function PasswordMaskCharacter():QChar {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PasswordMaskCharacter"]);
	};

	public function PasswordMaskDelay():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PasswordMaskDelay"]);
	};

	public function SetFocusOnTouchRelease():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetFocusOnTouchRelease"]);
	};

	public function SetShowShortcutsInContextMenus(showShortcutsInContextMenus:Bool) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SetShowShortcutsInContextMenus",
			showShortcutsInContextMenus
		]);
	};

	public function SetUseHoverEffects(useHoverEffects:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUseHoverEffects", useHoverEffects]);
	};

	public function ShowIsFullScreen():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShowIsFullScreen"]);
	};

	public function ShowIsMaximized():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShowIsMaximized"]);
	};

	public function ShowShortcutsInContextMenus():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ShowShortcutsInContextMenus"]);
	};

	public function ConnectShowShortcutsInContextMenusChanged(f:(vbo:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectShowShortcutsInContextMenusChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectShowShortcutsInContextMenusChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShowShortcutsInContextMenusChanged"]);
	};

	public function ShowShortcutsInContextMenusChanged(vbo:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowShortcutsInContextMenusChanged", vbo]);
	};

	public function SingleClickActivation():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SingleClickActivation"]);
	};

	public function StartDragDistance():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StartDragDistance"]);
	};

	public function ConnectStartDragDistanceChanged(f:(startDragDistance:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectStartDragDistanceChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectStartDragDistanceChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStartDragDistanceChanged"]);
	};

	public function StartDragDistanceChanged(startDragDistance:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "StartDragDistanceChanged", startDragDistance]);
	};

	public function StartDragTime():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StartDragTime"]);
	};

	public function ConnectStartDragTimeChanged(f:(startDragTime:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectStartDragTimeChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectStartDragTimeChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectStartDragTimeChanged"]);
	};

	public function StartDragTimeChanged(startDragTime:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "StartDragTimeChanged", startDragTime]);
	};

	public function StartDragVelocity():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StartDragVelocity"]);
	};

	public function TabFocusBehavior():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TabFocusBehavior"]);
	};

	public function ConnectTabFocusBehaviorChanged(f:(tabFocusBehavior:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectTabFocusBehaviorChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectTabFocusBehaviorChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTabFocusBehaviorChanged"]);
	};

	public function TabFocusBehaviorChanged(tabFocusBehavior:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TabFocusBehaviorChanged", tabFocusBehavior]);
	};

	public function UseHoverEffects():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UseHoverEffects"]);
	};

	public function ConnectUseHoverEffectsChanged(f:(useHoverEffects:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectUseHoverEffectsChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectUseHoverEffectsChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUseHoverEffectsChanged"]);
	};

	public function UseHoverEffectsChanged(useHoverEffects:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UseHoverEffectsChanged", useHoverEffects]);
	};

	public function UseRtlExtensions():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UseRtlExtensions"]);
	};

	public function WheelScrollLines():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WheelScrollLines"]);
	};

	public function ConnectWheelScrollLinesChanged(f:(scrollLines:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectWheelScrollLinesChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectWheelScrollLinesChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWheelScrollLinesChanged"]);
	};

	public function WheelScrollLinesChanged(scrollLines:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WheelScrollLinesChanged", scrollLines]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQStyleHintsFromPointer(ptr:String):QStyleHints {
	final r = new QStyleHints();
	r.initFrom(ptr, "gui.QStyleHints");
	return r;
}

interface QSupportedWritingSystems_ITF {
	public function QSupportedWritingSystems_PTR():QSupportedWritingSystems;
}

class QSupportedWritingSystems extends Internal implements QSupportedWritingSystems_ITF {
	public function new() {
		super();
	}

	public function QSupportedWritingSystems_PTR():QSupportedWritingSystems {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QSupportedWritingSystems_PTR"]);
	};
}

interface QSurface_ITF {
	public function QSurface_PTR():QSurface;
}

class QSurface extends Internal implements QSurface_ITF {
	public function new() {
		super();
	}

	public function QSurface_PTR():QSurface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QSurface_PTR"]);
	};

	public function ConnectFormat(f:() -> QSurfaceFormat) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFormat", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFormat() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFormat"]);
	};

	public function Format():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function ConnectSize(f:() -> QSize) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSize", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSize"]);
	};

	public function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function SupportsOpenGL():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportsOpenGL"]);
	};

	public function SurfaceClass():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceClass"]);
	};

	public function ConnectSurfaceType(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSurfaceType", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSurfaceType() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSurfaceType"]);
	};

	public function SurfaceType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceType"]);
	};

	public function ConnectDestroyQSurface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQSurface", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQSurface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQSurface"]);
	};

	public function DestroyQSurface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQSurface"]);
	};

	public function DestroyQSurfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQSurfaceDefault"]);
	};
}

function NewQSurfaceFromPointer(ptr:String):QSurface {
	final r = new QSurface();
	r.initFrom(ptr, "gui.QSurface");
	return r;
}

interface QSurfaceFormat_ITF {
	public function QSurfaceFormat_PTR():QSurfaceFormat;
}

class QSurfaceFormat extends Internal implements QSurfaceFormat_ITF {
	public function new() {
		super();
	}

	public function QSurfaceFormat_PTR():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QSurfaceFormat_PTR"]);
	};

	public function AlphaBufferSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AlphaBufferSize"]);
	};

	public function BlueBufferSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlueBufferSize"]);
	};

	public function ColorSpace():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColorSpace"]);
	};

	public function DefaultFormat():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultFormat"]);
	};

	public function DepthBufferSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DepthBufferSize"]);
	};

	public function GreenBufferSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GreenBufferSize"]);
	};

	public function HasAlpha():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasAlpha"]);
	};

	public function MajorVersion():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MajorVersion"]);
	};

	public function MinorVersion():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinorVersion"]);
	};

	public function Options():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Options"]);
	};

	public function Profile():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Profile"]);
	};

	public function RedBufferSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RedBufferSize"]);
	};

	public function RenderableType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RenderableType"]);
	};

	public function Samples():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Samples"]);
	};

	public function SetAlphaBufferSize(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlphaBufferSize", size]);
	};

	public function SetBlueBufferSize(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBlueBufferSize", size]);
	};

	public function SetColorSpace(colorSpace:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColorSpace", colorSpace]);
	};

	public function SetDefaultFormat(format:QSurfaceFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultFormat", format]);
	};

	public function SetDepthBufferSize(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDepthBufferSize", size]);
	};

	public function SetGreenBufferSize(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGreenBufferSize", size]);
	};

	public function SetMajorVersion(major:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMajorVersion", major]);
	};

	public function SetMinorVersion(minor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinorVersion", minor]);
	};

	public function SetOption(option:Int, on:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOption", option, on]);
	};

	public function SetOptions(options:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOptions", options]);
	};

	public function SetProfile(profile:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetProfile", profile]);
	};

	public function SetRedBufferSize(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRedBufferSize", size]);
	};

	public function SetRenderableType(ty:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRenderableType", ty]);
	};

	public function SetSamples(numSamples:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSamples", numSamples]);
	};

	public function SetStencilBufferSize(size:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStencilBufferSize", size]);
	};

	public function SetStereo(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStereo", enable]);
	};

	public function SetSwapBehavior(behavior:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSwapBehavior", behavior]);
	};

	public function SetSwapInterval(interval:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSwapInterval", interval]);
	};

	public function SetVersion(major:Int, minor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVersion", major, minor]);
	};

	public function StencilBufferSize():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StencilBufferSize"]);
	};

	public function Stereo():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Stereo"]);
	};

	public function SwapBehavior():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SwapBehavior"]);
	};

	public function SwapInterval():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SwapInterval"]);
	};

	public function TestOption(option:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TestOption", option]);
	};

	public function DestroyQSurfaceFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQSurfaceFormat"]);
	};
}

function NewQSurfaceFormatFromPointer(ptr:String):QSurfaceFormat {
	final r = new QSurfaceFormat();
	r.initFrom(ptr, "gui.QSurfaceFormat");
	return r;
}

function NewQSurfaceFormat():QSurfaceFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQSurfaceFormat", ""]);
}

function NewQSurfaceFormat2(options:Int):QSurfaceFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQSurfaceFormat2", "", options]);
}

function NewQSurfaceFormat3(other:QSurfaceFormat_ITF):QSurfaceFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQSurfaceFormat3", "", other]);
}

function QSurfaceFormat_DefaultFormat():QSurfaceFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QSurfaceFormat_DefaultFormat", ""]);
}

function QSurfaceFormat_SetDefaultFormat(format:QSurfaceFormat_ITF) {
	Gui.initModule();
	Internal.callLocalFunction(["", "", "gui.QSurfaceFormat_SetDefaultFormat", "", format]);
}

interface QSyntaxHighlighter_ITF extends QObject_ITF {
	public function QSyntaxHighlighter_PTR():QSyntaxHighlighter;
}

class QSyntaxHighlighter extends QObject implements QSyntaxHighlighter_ITF {
	public function new() {
		super();
	}

	public function QSyntaxHighlighter_PTR():QSyntaxHighlighter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QSyntaxHighlighter_PTR"]);
	};

	public function CurrentBlock():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentBlock"]);
	};

	public function CurrentBlockState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentBlockState"]);
	};

	public function CurrentBlockUserData():QTextBlockUserData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentBlockUserData"]);
	};

	public function Document():QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Document"]);
	};

	public function Format(position:Int):QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format", position]);
	};

	public function ConnectHighlightBlock(f:(text:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectHighlightBlock", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectHighlightBlock() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectHighlightBlock"]);
	};

	public function HighlightBlock(text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "HighlightBlock", text]);
	};

	public function PreviousBlockState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PreviousBlockState"]);
	};

	public function ConnectRehighlight(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRehighlight", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRehighlight() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRehighlight"]);
	};

	public function Rehighlight() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Rehighlight"]);
	};

	public function RehighlightDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RehighlightDefault"]);
	};

	public function ConnectRehighlightBlock(f:(block:QTextBlock) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRehighlightBlock", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRehighlightBlock() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRehighlightBlock"]);
	};

	public function RehighlightBlock(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RehighlightBlock", block]);
	};

	public function RehighlightBlockDefault(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RehighlightBlockDefault", block]);
	};

	public function SetCurrentBlockState(newState:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCurrentBlockState", newState]);
	};

	public function SetCurrentBlockUserData(data:QTextBlockUserData_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCurrentBlockUserData", data]);
	};

	public function SetDocument(doc:QTextDocument_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDocument", doc]);
	};

	public function SetFormat(start:Int, count:Int, format:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", start, count, format]);
	};

	public function SetFormat2(start:Int, count:Int, color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat2", start, count, color]);
	};

	public function SetFormat3(start:Int, count:Int, font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat3", start, count, font]);
	};

	public function ConnectDestroyQSyntaxHighlighter(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQSyntaxHighlighter",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQSyntaxHighlighter() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQSyntaxHighlighter"]);
	};

	public function DestroyQSyntaxHighlighter() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQSyntaxHighlighter"]);
	};

	public function DestroyQSyntaxHighlighterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQSyntaxHighlighterDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQSyntaxHighlighterFromPointer(ptr:String):QSyntaxHighlighter {
	final r = new QSyntaxHighlighter();
	r.initFrom(ptr, "gui.QSyntaxHighlighter");
	return r;
}

function NewQSyntaxHighlighter(parent:QObject_ITF):QSyntaxHighlighter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQSyntaxHighlighter", "", parent]);
}

function NewQSyntaxHighlighter2(parent:QTextDocument_ITF):QSyntaxHighlighter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQSyntaxHighlighter2", "", parent]);
}

interface QTabletEvent_ITF extends QInputEvent_ITF {
	public function QTabletEvent_PTR():QTabletEvent;
}

class QTabletEvent extends QInputEvent implements QTabletEvent_ITF {
	public function new() {
		super();
	}

	public function QTabletEvent_PTR():QTabletEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTabletEvent_PTR"]);
	};

	public function DestroyQTabletEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTabletEvent"]);
	};

	public function Button():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Button"]);
	};

	public function Buttons():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Buttons"]);
	};

	public function Device():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function GlobalPosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPosF"]);
	};

	public function GlobalX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalX"]);
	};

	public function GlobalY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalY"]);
	};

	public function HiResGlobalX():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HiResGlobalX"]);
	};

	public function HiResGlobalY():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HiResGlobalY"]);
	};

	public function PointerType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PointerType"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function PosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PosF"]);
	};

	public function Pressure():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pressure"]);
	};

	public function Rotation():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rotation"]);
	};

	public function TangentialPressure():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TangentialPressure"]);
	};

	public function UniqueId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UniqueId"]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function XTilt():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "XTilt"]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};

	public function YTilt():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "YTilt"]);
	};

	public function Z():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Z"]);
	};
}

function NewQTabletEventFromPointer(ptr:String):QTabletEvent {
	final r = new QTabletEvent();
	r.initFrom(ptr, "gui.QTabletEvent");
	return r;
}

function NewQTabletEvent2(ty:Int, pos:QPointF_ITF, globalPos:QPointF_ITF, device:Int, pointerType:Int, pressure:Float, xTilt:Int, yTilt:Int,
		tangentialPressure:Float, rotation:Float, z:Int, keyState:Int, uniqueID:Int, button:Int, buttons:Int):QTabletEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQTabletEvent2", "", ty, pos, globalPos, device, pointerType, pressure, xTilt, yTilt, tangentialPressure, rotation, z, keyState,
		uniqueID, button, buttons
	]);
}

interface QTextBlock_ITF {
	public function QTextBlock_PTR():QTextBlock;
}

class QTextBlock extends Internal implements QTextBlock_ITF {
	public function new() {
		super();
	}

	public function QTextBlock_PTR():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextBlock_PTR"]);
	};

	public function DestroyQTextBlock() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextBlock"]);
	};

	public function BlockFormat():QTextBlockFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockFormat"]);
	};

	public function BlockFormatIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockFormatIndex"]);
	};

	public function BlockNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockNumber"]);
	};

	public function CharFormat():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharFormat"]);
	};

	public function CharFormatIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharFormatIndex"]);
	};

	public function ClearLayout() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearLayout"]);
	};

	public function Contains(position:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains", position]);
	};

	public function Document():QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Document"]);
	};

	public function FirstLineNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstLineNumber"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function IsVisible():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsVisible"]);
	};

	public function Layout():QTextLayout {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Layout"]);
	};

	public function Length():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function LineCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineCount"]);
	};

	public function Next():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Next"]);
	};

	public function Position():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function Previous():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Previous"]);
	};

	public function Revision():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Revision"]);
	};

	public function SetLineCount(count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLineCount", count]);
	};

	public function SetRevision(rev:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRevision", rev]);
	};

	public function SetUserData(data:QTextBlockUserData_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUserData", data]);
	};

	public function SetUserState(state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUserState", state]);
	};

	public function SetVisible(visible:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVisible", visible]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};

	public function TextDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextDirection"]);
	};

	public function UserData():QTextBlockUserData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UserData"]);
	};

	public function UserState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UserState"]);
	};
}

function NewQTextBlockFromPointer(ptr:String):QTextBlock {
	final r = new QTextBlock();
	r.initFrom(ptr, "gui.QTextBlock");
	return r;
}

function NewQTextBlock3(other:QTextBlock_ITF):QTextBlock {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextBlock3", "", other]);
}

interface QTextBlockFormat_ITF extends QTextFormat_ITF {
	public function QTextBlockFormat_PTR():QTextBlockFormat;
}

class QTextBlockFormat extends QTextFormat implements QTextBlockFormat_ITF {
	public function new() {
		super();
	}

	public function QTextBlockFormat_PTR():QTextBlockFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextBlockFormat_PTR"]);
	};

	public function DestroyQTextBlockFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextBlockFormat"]);
	};

	public function Alignment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alignment"]);
	};

	public function BottomMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BottomMargin"]);
	};

	public function HeadingLevel():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HeadingLevel"]);
	};

	public function Indent():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Indent"]);
	};

	public function LeftMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeftMargin"]);
	};

	public function LineHeight(scriptLineHeight:Float, scaling:Float):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineHeight", scriptLineHeight, scaling]);
	};

	public function LineHeight2():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineHeight2"]);
	};

	public function LineHeightType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineHeightType"]);
	};

	public function NonBreakableLines():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NonBreakableLines"]);
	};

	public function PageBreakPolicy():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageBreakPolicy"]);
	};

	public function RightMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RightMargin"]);
	};

	public function SetAlignment(alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlignment", alignment]);
	};

	public function SetBottomMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBottomMargin", margi]);
	};

	public function SetHeadingLevel(level:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeadingLevel", level]);
	};

	public function SetIndent(indentation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIndent", indentation]);
	};

	public function SetLeftMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLeftMargin", margi]);
	};

	public function SetLineHeight(height:Float, heightType:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLineHeight", height, heightType]);
	};

	public function SetNonBreakableLines(b:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNonBreakableLines", b]);
	};

	public function SetPageBreakPolicy(policy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageBreakPolicy", policy]);
	};

	public function SetRightMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRightMargin", margi]);
	};

	public function SetTextIndent(indent:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextIndent", indent]);
	};

	public function SetTopMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTopMargin", margi]);
	};

	public function TextIndent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextIndent"]);
	};

	public function TopMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TopMargin"]);
	};
}

function NewQTextBlockFormatFromPointer(ptr:String):QTextBlockFormat {
	final r = new QTextBlockFormat();
	r.initFrom(ptr, "gui.QTextBlockFormat");
	return r;
}

function NewQTextBlockFormat():QTextBlockFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextBlockFormat", ""]);
}

interface QTextBlockGroup_ITF extends QTextObject_ITF {
	public function QTextBlockGroup_PTR():QTextBlockGroup;
}

class QTextBlockGroup extends QTextObject implements QTextBlockGroup_ITF {
	public function new() {
		super();
	}

	public function QTextBlockGroup_PTR():QTextBlockGroup {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextBlockGroup_PTR"]);
	};

	public function ConnectBlockFormatChanged(f:(block:QTextBlock) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectBlockFormatChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectBlockFormatChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBlockFormatChanged"]);
	};

	public function BlockFormatChanged(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockFormatChanged", block]);
	};

	public function BlockFormatChangedDefault(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockFormatChangedDefault", block]);
	};

	public function ConnectBlockInserted(f:(block:QTextBlock) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBlockInserted", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBlockInserted() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBlockInserted"]);
	};

	public function BlockInserted(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockInserted", block]);
	};

	public function BlockInsertedDefault(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockInsertedDefault", block]);
	};

	public function BlockList():Array<QTextBlock> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockList"]);
	};

	public function ConnectBlockRemoved(f:(block:QTextBlock) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBlockRemoved", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBlockRemoved() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBlockRemoved"]);
	};

	public function BlockRemoved(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockRemoved", block]);
	};

	public function BlockRemovedDefault(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockRemovedDefault", block]);
	};

	public function ConnectDestroyQTextBlockGroup(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQTextBlockGroup",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQTextBlockGroup() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTextBlockGroup"]);
	};

	public function DestroyQTextBlockGroup() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextBlockGroup"]);
	};

	public function DestroyQTextBlockGroupDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextBlockGroupDefault"]);
	};
}

function NewQTextBlockGroupFromPointer(ptr:String):QTextBlockGroup {
	final r = new QTextBlockGroup();
	r.initFrom(ptr, "gui.QTextBlockGroup");
	return r;
}

function NewQTextBlockGroup(document:QTextDocument_ITF):QTextBlockGroup {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextBlockGroup", "", document]);
}

interface QTextBlockUserData_ITF {
	public function QTextBlockUserData_PTR():QTextBlockUserData;
}

class QTextBlockUserData extends Internal implements QTextBlockUserData_ITF {
	public function new() {
		super();
	}

	public function QTextBlockUserData_PTR():QTextBlockUserData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextBlockUserData_PTR"]);
	};

	public function ConnectDestroyQTextBlockUserData(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQTextBlockUserData",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQTextBlockUserData() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTextBlockUserData"]);
	};

	public function DestroyQTextBlockUserData() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextBlockUserData"]);
	};

	public function DestroyQTextBlockUserDataDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextBlockUserDataDefault"]);
	};
}

function NewQTextBlockUserDataFromPointer(ptr:String):QTextBlockUserData {
	final r = new QTextBlockUserData();
	r.initFrom(ptr, "gui.QTextBlockUserData");
	return r;
}

interface QTextCharFormat_ITF extends QTextFormat_ITF {
	public function QTextCharFormat_PTR():QTextCharFormat;
}

class QTextCharFormat extends QTextFormat implements QTextCharFormat_ITF {
	public function new() {
		super();
	}

	public function QTextCharFormat_PTR():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextCharFormat_PTR"]);
	};

	public function DestroyQTextCharFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextCharFormat"]);
	};

	public function AnchorHref():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AnchorHref"]);
	};

	public function AnchorNames():Array<String> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AnchorNames"]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function FontCapitalization():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontCapitalization"]);
	};

	public function FontFamilies():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontFamilies"]);
	};

	public function FontFamily():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontFamily"]);
	};

	public function FontFixedPitch():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontFixedPitch"]);
	};

	public function FontHintingPreference():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontHintingPreference"]);
	};

	public function FontItalic():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontItalic"]);
	};

	public function FontKerning():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontKerning"]);
	};

	public function FontLetterSpacing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontLetterSpacing"]);
	};

	public function FontLetterSpacingType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontLetterSpacingType"]);
	};

	public function FontOverline():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontOverline"]);
	};

	public function FontPointSize():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontPointSize"]);
	};

	public function FontStretch():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontStretch"]);
	};

	public function FontStrikeOut():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontStrikeOut"]);
	};

	public function FontStyleHint():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontStyleHint"]);
	};

	public function FontStyleName():QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontStyleName"]);
	};

	public function FontStyleStrategy():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontStyleStrategy"]);
	};

	public function FontUnderline():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontUnderline"]);
	};

	public function FontWeight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontWeight"]);
	};

	public function FontWordSpacing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FontWordSpacing"]);
	};

	public function IsAnchor():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAnchor"]);
	};

	public function SetAnchor(anchor:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAnchor", anchor]);
	};

	public function SetAnchorHref(value:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAnchorHref", value]);
	};

	public function SetAnchorNames(names:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAnchorNames", names]);
	};

	public function SetFont(font:QFont_ITF, behavior:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFont", font, behavior]);
	};

	public function SetFont2(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFont2", font]);
	};

	public function SetFontCapitalization(capitalization:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontCapitalization", capitalization]);
	};

	public function SetFontFamilies(families:Array<String>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontFamilies", families]);
	};

	public function SetFontFamily(family:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontFamily", family]);
	};

	public function SetFontFixedPitch(fixedPitch:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontFixedPitch", fixedPitch]);
	};

	public function SetFontHintingPreference(hintingPreference:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontHintingPreference", hintingPreference]);
	};

	public function SetFontItalic(italic:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontItalic", italic]);
	};

	public function SetFontKerning(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontKerning", enable]);
	};

	public function SetFontLetterSpacing(spacing:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontLetterSpacing", spacing]);
	};

	public function SetFontLetterSpacingType(letterSpacingType:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontLetterSpacingType", letterSpacingType]);
	};

	public function SetFontOverline(overline:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontOverline", overline]);
	};

	public function SetFontPointSize(size:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontPointSize", size]);
	};

	public function SetFontStretch(factor:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontStretch", factor]);
	};

	public function SetFontStrikeOut(strikeOut:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontStrikeOut", strikeOut]);
	};

	public function SetFontStyleHint(hint:Int, strategy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontStyleHint", hint, strategy]);
	};

	public function SetFontStyleName(styleName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontStyleName", styleName]);
	};

	public function SetFontStyleStrategy(strategy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontStyleStrategy", strategy]);
	};

	public function SetFontUnderline(underline:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontUnderline", underline]);
	};

	public function SetFontWeight(weight:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontWeight", weight]);
	};

	public function SetFontWordSpacing(spacing:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFontWordSpacing", spacing]);
	};

	public function SetTextOutline(pen:QPen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextOutline", pen]);
	};

	public function SetToolTip(text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetToolTip", text]);
	};

	public function SetUnderlineColor(color:QColor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUnderlineColor", color]);
	};

	public function SetUnderlineStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUnderlineStyle", style]);
	};

	public function SetVerticalAlignment(alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVerticalAlignment", alignment]);
	};

	public function TextOutline():QPen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextOutline"]);
	};

	public function ToolTip():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToolTip"]);
	};

	public function UnderlineColor():QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnderlineColor"]);
	};

	public function UnderlineStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UnderlineStyle"]);
	};

	public function VerticalAlignment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VerticalAlignment"]);
	};
}

function NewQTextCharFormatFromPointer(ptr:String):QTextCharFormat {
	final r = new QTextCharFormat();
	r.initFrom(ptr, "gui.QTextCharFormat");
	return r;
}

function NewQTextCharFormat():QTextCharFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextCharFormat", ""]);
}

interface QTextCursor_ITF {
	public function QTextCursor_PTR():QTextCursor;
}

class QTextCursor extends Internal implements QTextCursor_ITF {
	public function new() {
		super();
	}

	public function QTextCursor_PTR():QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextCursor_PTR"]);
	};

	public function Anchor():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Anchor"]);
	};

	public function AtBlockEnd():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AtBlockEnd"]);
	};

	public function AtBlockStart():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AtBlockStart"]);
	};

	public function AtEnd():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AtEnd"]);
	};

	public function AtStart():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AtStart"]);
	};

	public function BeginEditBlock() {
		Internal.callLocalFunction(["", Pointer(), ___className, "BeginEditBlock"]);
	};

	public function Block():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Block"]);
	};

	public function BlockCharFormat():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockCharFormat"]);
	};

	public function BlockFormat():QTextBlockFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockFormat"]);
	};

	public function BlockNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockNumber"]);
	};

	public function CharFormat():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharFormat"]);
	};

	public function ClearSelection() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearSelection"]);
	};

	public function ColumnNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnNumber"]);
	};

	public function CreateList(format:QTextListFormat_ITF):QTextList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateList", format]);
	};

	public function CreateList2(style:Int):QTextList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateList2", style]);
	};

	public function CurrentFrame():QTextFrame {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentFrame"]);
	};

	public function CurrentList():QTextList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentList"]);
	};

	public function CurrentTable():QTextTable {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CurrentTable"]);
	};

	public function DeleteChar() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteChar"]);
	};

	public function DeletePreviousChar() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeletePreviousChar"]);
	};

	public function Document():QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Document"]);
	};

	public function EndEditBlock() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EndEditBlock"]);
	};

	public function HasComplexSelection():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasComplexSelection"]);
	};

	public function HasSelection():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasSelection"]);
	};

	public function InsertBlock() {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertBlock"]);
	};

	public function InsertBlock2(format:QTextBlockFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertBlock2", format]);
	};

	public function InsertBlock3(format:QTextBlockFormat_ITF, charFormat:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertBlock3", format, charFormat]);
	};

	public function InsertFragment(fragment:QTextDocumentFragment_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertFragment", fragment]);
	};

	public function InsertFrame(format:QTextFrameFormat_ITF):QTextFrame {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertFrame", format]);
	};

	public function InsertHtml(html:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertHtml", html]);
	};

	public function InsertImage(format:QTextImageFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertImage", format]);
	};

	public function InsertImage2(format:QTextImageFormat_ITF, alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertImage2", format, alignment]);
	};

	public function InsertImage3(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertImage3", name]);
	};

	public function InsertImage4(image:QImage_ITF, name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertImage4", image, name]);
	};

	public function InsertList(format:QTextListFormat_ITF):QTextList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertList", format]);
	};

	public function InsertList2(style:Int):QTextList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertList2", style]);
	};

	public function InsertTable(rows:Int, columns:Int, format:QTextTableFormat_ITF):QTextTable {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertTable", rows, columns, format]);
	};

	public function InsertTable2(rows:Int, columns:Int):QTextTable {
		return Internal.callLocalFunction(["", Pointer(), ___className, "InsertTable2", rows, columns]);
	};

	public function InsertText(text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertText", text]);
	};

	public function InsertText2(text:String, format:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertText2", text, format]);
	};

	public function IsCopyOf(other:QTextCursor_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCopyOf", other]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function JoinPreviousEditBlock() {
		Internal.callLocalFunction(["", Pointer(), ___className, "JoinPreviousEditBlock"]);
	};

	public function KeepPositionOnInsert():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "KeepPositionOnInsert"]);
	};

	public function MergeBlockCharFormat(modifier:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MergeBlockCharFormat", modifier]);
	};

	public function MergeBlockFormat(modifier:QTextBlockFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MergeBlockFormat", modifier]);
	};

	public function MergeCharFormat(modifier:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MergeCharFormat", modifier]);
	};

	public function MovePosition(operation:Int, mode:Int, n:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MovePosition", operation, mode, n]);
	};

	public function Position():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function PositionInBlock():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PositionInBlock"]);
	};

	public function RemoveSelectedText() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveSelectedText"]);
	};

	public function Select(selection:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Select", selection]);
	};

	public function SelectedTableCells(firstRow:Int, numRows:Int, firstColumn:Int, numColumns:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"SelectedTableCells",
			firstRow,
			numRows,
			firstColumn,
			numColumns
		]);
	};

	public function SelectedText():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectedText"]);
	};

	public function Selection():QTextDocumentFragment {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Selection"]);
	};

	public function SelectionEnd():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectionEnd"]);
	};

	public function SelectionStart():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SelectionStart"]);
	};

	public function SetBlockCharFormat(format:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBlockCharFormat", format]);
	};

	public function SetBlockFormat(format:QTextBlockFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBlockFormat", format]);
	};

	public function SetCharFormat(format:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCharFormat", format]);
	};

	public function SetKeepPositionOnInsert(b:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetKeepPositionOnInsert", b]);
	};

	public function SetPosition(pos:Int, m:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPosition", pos, m]);
	};

	public function SetVerticalMovementX(x:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVerticalMovementX", x]);
	};

	public function SetVisualNavigation(b:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVisualNavigation", b]);
	};

	public function Swap(other:QTextCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function VerticalMovementX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VerticalMovementX"]);
	};

	public function VisualNavigation():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "VisualNavigation"]);
	};

	public function DestroyQTextCursor() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextCursor"]);
	};
}

function NewQTextCursorFromPointer(ptr:String):QTextCursor {
	final r = new QTextCursor();
	r.initFrom(ptr, "gui.QTextCursor");
	return r;
}

function NewQTextCursor():QTextCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextCursor", ""]);
}

function NewQTextCursor2(document:QTextDocument_ITF):QTextCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextCursor2", "", document]);
}

function NewQTextCursor3(frame:QTextFrame_ITF):QTextCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextCursor3", "", frame]);
}

function NewQTextCursor4(block:QTextBlock_ITF):QTextCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextCursor4", "", block]);
}

function NewQTextCursor5(cursor:QTextCursor_ITF):QTextCursor {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextCursor5", "", cursor]);
}

interface QTextDocument_ITF extends QObject_ITF {
	public function QTextDocument_PTR():QTextDocument;
}

class QTextDocument extends QObject implements QTextDocument_ITF {
	public function new() {
		super();
	}

	public function QTextDocument_PTR():QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextDocument_PTR"]);
	};

	public function AddResource(ty:Int, name:QUrl_ITF, resource:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AddResource", ty, name, resource]);
	};

	public function AdjustSize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "AdjustSize"]);
	};

	public function AllFormats():Array<QTextFormat> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AllFormats"]);
	};

	public function AvailableRedoSteps():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableRedoSteps"]);
	};

	public function AvailableUndoSteps():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AvailableUndoSteps"]);
	};

	public function BaseUrl():QUrl {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BaseUrl"]);
	};

	public function ConnectBaseUrlChanged(f:(url:QUrl) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBaseUrlChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBaseUrlChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBaseUrlChanged"]);
	};

	public function BaseUrlChanged(url:QUrl_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BaseUrlChanged", url]);
	};

	public function Begin():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Begin"]);
	};

	public function BlockCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BlockCount"]);
	};

	public function ConnectBlockCountChanged(f:(newBlockCount:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectBlockCountChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectBlockCountChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectBlockCountChanged"]);
	};

	public function BlockCountChanged(newBlockCount:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "BlockCountChanged", newBlockCount]);
	};

	public function CharacterAt(pos:Int):QChar {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharacterAt", pos]);
	};

	public function CharacterCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharacterCount"]);
	};

	public function ConnectClear(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectClear", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectClear() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectClear"]);
	};

	public function Clear() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Clear"]);
	};

	public function ClearDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearDefault"]);
	};

	public function ClearUndoRedoStacks(stacksToClear:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearUndoRedoStacks", stacksToClear]);
	};

	public function Clone(parent:QObject_ITF):QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Clone", parent]);
	};

	public function ConnectContentsChange(f:(position:Int, charsRemoved:Int, charsAdded:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectContentsChange", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectContentsChange() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectContentsChange"]);
	};

	public function ContentsChange(position:Int, charsRemoved:Int, charsAdded:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"ContentsChange",
			position,
			charsRemoved,
			charsAdded
		]);
	};

	public function ConnectContentsChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectContentsChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectContentsChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectContentsChanged"]);
	};

	public function ContentsChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ContentsChanged"]);
	};

	public function ConnectCreateObject(f:(format:QTextFormat) -> QTextObject) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectCreateObject", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectCreateObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCreateObject"]);
	};

	public function CreateObject(format:QTextFormat_ITF):QTextObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateObject", format]);
	};

	public function CreateObjectDefault(format:QTextFormat_ITF):QTextObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateObjectDefault", format]);
	};

	public function ConnectCursorPositionChanged(f:(cursor:QTextCursor) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectCursorPositionChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectCursorPositionChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectCursorPositionChanged"]);
	};

	public function CursorPositionChanged(cursor:QTextCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CursorPositionChanged", cursor]);
	};

	public function DefaultCursorMoveStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultCursorMoveStyle"]);
	};

	public function DefaultFont():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultFont"]);
	};

	public function DefaultStyleSheet():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultStyleSheet"]);
	};

	public function DefaultTextOption():QTextOption {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DefaultTextOption"]);
	};

	public function DocumentLayout():QAbstractTextDocumentLayout {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DocumentLayout"]);
	};

	public function ConnectDocumentLayoutChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDocumentLayoutChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDocumentLayoutChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDocumentLayoutChanged"]);
	};

	public function DocumentLayoutChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DocumentLayoutChanged"]);
	};

	public function DocumentMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DocumentMargin"]);
	};

	public function DrawContents(p:QPainter_ITF, rect:QRectF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawContents", p, rect]);
	};

	public function End():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "End"]);
	};

	public function Find(subString:String, cursor:QTextCursor_ITF, options:Int):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find", subString, cursor, options]);
	};

	public function Find2(subString:String, position:Int, options:Int):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find2", subString, position, options]);
	};

	public function Find3(expr:QRegExp_ITF, from:Int, options:Int):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find3", expr, from, options]);
	};

	public function Find4(expr:QRegExp_ITF, cursor:QTextCursor_ITF, options:Int):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find4", expr, cursor, options]);
	};

	public function Find5(expr:QRegularExpression_ITF, from:Int, options:Int):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find5", expr, from, options]);
	};

	public function Find6(expr:QRegularExpression_ITF, cursor:QTextCursor_ITF, options:Int):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Find6", expr, cursor, options]);
	};

	public function FindBlock(pos:Int):QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FindBlock", pos]);
	};

	public function FindBlockByLineNumber(lineNumber:Int):QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FindBlockByLineNumber", lineNumber]);
	};

	public function FindBlockByNumber(blockNumber:Int):QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FindBlockByNumber", blockNumber]);
	};

	public function FirstBlock():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstBlock"]);
	};

	public function IdealWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IdealWidth"]);
	};

	public function IndentWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IndentWidth"]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function IsModified():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsModified"]);
	};

	public function IsRedoAvailable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsRedoAvailable"]);
	};

	public function IsUndoAvailable():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsUndoAvailable"]);
	};

	public function IsUndoRedoEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsUndoRedoEnabled"]);
	};

	public function LastBlock():QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastBlock"]);
	};

	public function LineCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineCount"]);
	};

	public function ConnectLoadResource(f:(ty:Int, name:QUrl) -> QVariant) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLoadResource", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLoadResource() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLoadResource"]);
	};

	public function LoadResource(ty:Int, name:QUrl_ITF):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadResource", ty, name]);
	};

	public function LoadResourceDefault(ty:Int, name:QUrl_ITF):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LoadResourceDefault", ty, name]);
	};

	public function MarkContentsDirty(position:Int, length:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MarkContentsDirty", position, length]);
	};

	public function MaximumBlockCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumBlockCount"]);
	};

	public function MetaInformation(info:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaInformation", info]);
	};

	public function ConnectModificationChanged(f:(changed:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectModificationChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectModificationChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectModificationChanged"]);
	};

	public function ModificationChanged(changed:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ModificationChanged", changed]);
	};

	public function Object(objectIndex:Int):QTextObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Object", objectIndex]);
	};

	public function ObjectForFormat(ff:QTextFormat_ITF):QTextObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectForFormat", ff]);
	};

	public function PageCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageCount"]);
	};

	public function PageSize():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageSize"]);
	};

	public function Print(printer:QPagedPaintDevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Print", printer]);
	};

	public function Redo(cursor:QTextCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Redo", cursor]);
	};

	public function ConnectRedo2(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRedo2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRedo2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRedo2"]);
	};

	public function Redo2() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Redo2"]);
	};

	public function Redo2Default() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Redo2Default"]);
	};

	public function ConnectRedoAvailable(f:(available:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRedoAvailable", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRedoAvailable() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRedoAvailable"]);
	};

	public function RedoAvailable(available:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RedoAvailable", available]);
	};

	public function Resource(ty:Int, name:QUrl_ITF):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Resource", ty, name]);
	};

	public function Revision():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Revision"]);
	};

	public function RootFrame():QTextFrame {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RootFrame"]);
	};

	public function SetBaseUrl(url:QUrl_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBaseUrl", url]);
	};

	public function SetDefaultCursorMoveStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultCursorMoveStyle", style]);
	};

	public function SetDefaultFont(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultFont", font]);
	};

	public function SetDefaultStyleSheet(sheet:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultStyleSheet", sheet]);
	};

	public function SetDefaultTextOption(option:QTextOption_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDefaultTextOption", option]);
	};

	public function SetDocumentLayout(layout:QAbstractTextDocumentLayout_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDocumentLayout", layout]);
	};

	public function SetDocumentMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDocumentMargin", margi]);
	};

	public function SetHtml(html:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHtml", html]);
	};

	public function SetIndentWidth(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIndentWidth", width]);
	};

	public function SetMaximumBlockCount(maximum:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumBlockCount", maximum]);
	};

	public function SetMetaInformation(info:Int, stri:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMetaInformation", info, stri]);
	};

	public function ConnectSetModified(f:(m:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetModified", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetModified() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetModified"]);
	};

	public function SetModified(m:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetModified", m]);
	};

	public function SetModifiedDefault(m:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetModifiedDefault", m]);
	};

	public function SetPageSize(size:QSizeF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageSize", size]);
	};

	public function SetPlainText(text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPlainText", text]);
	};

	public function SetTextWidth(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextWidth", width]);
	};

	public function SetUndoRedoEnabled(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUndoRedoEnabled", enable]);
	};

	public function SetUseDesignMetrics(b:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUseDesignMetrics", b]);
	};

	public function Size():QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function TextWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextWidth"]);
	};

	public function ToHtml(encoding:QByteArray_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToHtml", encoding]);
	};

	public function ToPlainText():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPlainText"]);
	};

	public function ToRawText():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToRawText"]);
	};

	public function Undo(cursor:QTextCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Undo", cursor]);
	};

	public function ConnectUndo2(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUndo2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUndo2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUndo2"]);
	};

	public function Undo2() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Undo2"]);
	};

	public function Undo2Default() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Undo2Default"]);
	};

	public function ConnectUndoAvailable(f:(available:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUndoAvailable", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUndoAvailable() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUndoAvailable"]);
	};

	public function UndoAvailable(available:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "UndoAvailable", available]);
	};

	public function ConnectUndoCommandAdded(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectUndoCommandAdded", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectUndoCommandAdded() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectUndoCommandAdded"]);
	};

	public function UndoCommandAdded() {
		Internal.callLocalFunction(["", Pointer(), ___className, "UndoCommandAdded"]);
	};

	public function UseDesignMetrics():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UseDesignMetrics"]);
	};

	public function ConnectDestroyQTextDocument(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQTextDocument",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQTextDocument() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTextDocument"]);
	};

	public function DestroyQTextDocument() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextDocument"]);
	};

	public function DestroyQTextDocumentDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextDocumentDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQTextDocumentFromPointer(ptr:String):QTextDocument {
	final r = new QTextDocument();
	r.initFrom(ptr, "gui.QTextDocument");
	return r;
}

function NewQTextDocument(parent:QObject_ITF):QTextDocument {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocument", "", parent]);
}

function NewQTextDocument2(text:String, parent:QObject_ITF):QTextDocument {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocument2", "", text, parent]);
}

interface QTextDocumentFragment_ITF {
	public function QTextDocumentFragment_PTR():QTextDocumentFragment;
}

class QTextDocumentFragment extends Internal implements QTextDocumentFragment_ITF {
	public function new() {
		super();
	}

	public function QTextDocumentFragment_PTR():QTextDocumentFragment {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextDocumentFragment_PTR"]);
	};

	public function FromHtml(text:String):QTextDocumentFragment {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromHtml", text]);
	};

	public function FromHtml2(text:String, resourceProvider:QTextDocument_ITF):QTextDocumentFragment {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromHtml2", text, resourceProvider]);
	};

	public function FromPlainText(plainText:String):QTextDocumentFragment {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromPlainText", plainText]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function ToHtml(encoding:QByteArray_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToHtml", encoding]);
	};

	public function ToPlainText():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPlainText"]);
	};

	public function DestroyQTextDocumentFragment() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextDocumentFragment"]);
	};
}

function NewQTextDocumentFragmentFromPointer(ptr:String):QTextDocumentFragment {
	final r = new QTextDocumentFragment();
	r.initFrom(ptr, "gui.QTextDocumentFragment");
	return r;
}

function NewQTextDocumentFragment():QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentFragment", ""]);
}

function NewQTextDocumentFragment2(document:QTextDocument_ITF):QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentFragment2", "", document]);
}

function NewQTextDocumentFragment3(cursor:QTextCursor_ITF):QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentFragment3", "", cursor]);
}

function NewQTextDocumentFragment4(other:QTextDocumentFragment_ITF):QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentFragment4", "", other]);
}

function QTextDocumentFragment_FromHtml(text:String):QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTextDocumentFragment_FromHtml", "", text]);
}

function QTextDocumentFragment_FromHtml2(text:String, resourceProvider:QTextDocument_ITF):QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTextDocumentFragment_FromHtml2", "", text, resourceProvider]);
}

function QTextDocumentFragment_FromPlainText(plainText:String):QTextDocumentFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTextDocumentFragment_FromPlainText", "", plainText]);
}

interface QTextDocumentWriter_ITF {
	public function QTextDocumentWriter_PTR():QTextDocumentWriter;
}

class QTextDocumentWriter extends Internal implements QTextDocumentWriter_ITF {
	public function new() {
		super();
	}

	public function QTextDocumentWriter_PTR():QTextDocumentWriter {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextDocumentWriter_PTR"]);
	};

	public function Codec():QTextCodec {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Codec"]);
	};

	public function Device():QIODevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function FileName():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FileName"]);
	};

	public function Format():QByteArray {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function SetCodec(codec:QTextCodec_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCodec", codec]);
	};

	public function SetDevice(device:QIODevice_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDevice", device]);
	};

	public function SetFileName(fileName:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFileName", fileName]);
	};

	public function SetFormat(format:QByteArray_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SupportedDocumentFormats():Array<QByteArray> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SupportedDocumentFormats"]);
	};

	public function Write(document:QTextDocument_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Write", document]);
	};

	public function Write2(fragment:QTextDocumentFragment_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Write2", fragment]);
	};

	public function DestroyQTextDocumentWriter() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextDocumentWriter"]);
	};
}

function NewQTextDocumentWriterFromPointer(ptr:String):QTextDocumentWriter {
	final r = new QTextDocumentWriter();
	r.initFrom(ptr, "gui.QTextDocumentWriter");
	return r;
}

function NewQTextDocumentWriter():QTextDocumentWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentWriter", ""]);
}

function NewQTextDocumentWriter2(device:QIODevice_ITF, format:QByteArray_ITF):QTextDocumentWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentWriter2", "", device, format]);
}

function NewQTextDocumentWriter3(fileName:String, format:QByteArray_ITF):QTextDocumentWriter {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextDocumentWriter3", "", fileName, format]);
}

function QTextDocumentWriter_SupportedDocumentFormats():Array<QByteArray> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTextDocumentWriter_SupportedDocumentFormats", ""]);
}

interface QTextFormat_ITF {
	public function QTextFormat_PTR():QTextFormat;
}

class QTextFormat extends Internal implements QTextFormat_ITF {
	public function new() {
		super();
	}

	public function QTextFormat_PTR():QTextFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextFormat_PTR"]);
	};

	public function Background():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Background"]);
	};

	public function BoolProperty(propertyId:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoolProperty", propertyId]);
	};

	public function BrushProperty(propertyId:Int):QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BrushProperty", propertyId]);
	};

	public function ClearBackground() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearBackground"]);
	};

	public function ClearForeground() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearForeground"]);
	};

	public function ClearProperty(propertyId:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearProperty", propertyId]);
	};

	public function ColorProperty(propertyId:Int):QColor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColorProperty", propertyId]);
	};

	public function DoubleProperty(propertyId:Int):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DoubleProperty", propertyId]);
	};

	public function Foreground():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Foreground"]);
	};

	public function HasProperty(propertyId:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HasProperty", propertyId]);
	};

	public function IntProperty(propertyId:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IntProperty", propertyId]);
	};

	public function IsBlockFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsBlockFormat"]);
	};

	public function IsCharFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsCharFormat"]);
	};

	public function IsEmpty():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsEmpty"]);
	};

	public function IsFrameFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsFrameFormat"]);
	};

	public function IsImageFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsImageFormat"]);
	};

	public function IsListFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsListFormat"]);
	};

	public function IsTableCellFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsTableCellFormat"]);
	};

	public function IsTableFormat():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsTableFormat"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function LayoutDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LayoutDirection"]);
	};

	public function LengthProperty(propertyId:Int):QTextLength {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LengthProperty", propertyId]);
	};

	public function Merge(other:QTextFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Merge", other]);
	};

	public function ObjectIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectIndex"]);
	};

	public function ObjectType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectType"]);
	};

	public function PenProperty(propertyId:Int):QPen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PenProperty", propertyId]);
	};

	public function Properties():Map<Int, QVariant> {
		final _tmpValue:Map<String, Dynamic> = Internal.callLocalFunction(["", Pointer(), ___className, "Properties"]);
		return [for (k => v in _tmpValue) Std.parseInt(k) => v];
	};

	public function Property(propertyId:Int):QVariant {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Property", propertyId]);
	};

	public function PropertyCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PropertyCount"]);
	};

	public function SetBackground(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBackground", brush]);
	};

	public function SetForeground(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetForeground", brush]);
	};

	public function SetLayoutDirection(direction:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLayoutDirection", direction]);
	};

	public function SetObjectIndex(index:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetObjectIndex", index]);
	};

	public function SetObjectType(ty:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetObjectType", ty]);
	};

	public function SetProperty(propertyId:Int, value:QVariant_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetProperty", propertyId, value]);
	};

	public function SetProperty2(propertyId:Int, value:Array<QTextLength>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetProperty2", propertyId, value]);
	};

	public function StringProperty(propertyId:Int):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "StringProperty", propertyId]);
	};

	public function Swap(other:QTextFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Swap", other]);
	};

	public function ToBlockFormat():QTextBlockFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToBlockFormat"]);
	};

	public function ToCharFormat():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToCharFormat"]);
	};

	public function ToFrameFormat():QTextFrameFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToFrameFormat"]);
	};

	public function ToImageFormat():QTextImageFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToImageFormat"]);
	};

	public function ToListFormat():QTextListFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToListFormat"]);
	};

	public function ToTableCellFormat():QTextTableCellFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToTableCellFormat"]);
	};

	public function ToTableFormat():QTextTableFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToTableFormat"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function DestroyQTextFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextFormat"]);
	};
}

function NewQTextFormatFromPointer(ptr:String):QTextFormat {
	final r = new QTextFormat();
	r.initFrom(ptr, "gui.QTextFormat");
	return r;
}

function NewQTextFormat():QTextFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFormat", ""]);
}

function NewQTextFormat2(ty:Int):QTextFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFormat2", "", ty]);
}

function NewQTextFormat3(other:QTextFormat_ITF):QTextFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFormat3", "", other]);
}

interface QTextFragment_ITF {
	public function QTextFragment_PTR():QTextFragment;
}

class QTextFragment extends Internal implements QTextFragment_ITF {
	public function new() {
		super();
	}

	public function QTextFragment_PTR():QTextFragment {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextFragment_PTR"]);
	};

	public function DestroyQTextFragment() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextFragment"]);
	};

	public function CharFormat():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharFormat"]);
	};

	public function CharFormatIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CharFormatIndex"]);
	};

	public function Contains(position:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Contains", position]);
	};

	public function GlyphRuns(pos:Int, l:Int):Array<QGlyphRun> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlyphRuns", pos, l]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Length():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function Position():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};
}

function NewQTextFragmentFromPointer(ptr:String):QTextFragment {
	final r = new QTextFragment();
	r.initFrom(ptr, "gui.QTextFragment");
	return r;
}

function NewQTextFragment2():QTextFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFragment2", ""]);
}

function NewQTextFragment3(other:QTextFragment_ITF):QTextFragment {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFragment3", "", other]);
}

interface QTextFrame_ITF extends QTextObject_ITF {
	public function QTextFrame_PTR():QTextFrame;
}

class QTextFrame extends QTextObject implements QTextFrame_ITF {
	public function new() {
		super();
	}

	public function QTextFrame_PTR():QTextFrame {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextFrame_PTR"]);
	};

	public function ChildFrames():Array<QTextFrame> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ChildFrames"]);
	};

	public function FirstCursorPosition():QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstCursorPosition"]);
	};

	public function FirstPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstPosition"]);
	};

	public function FrameFormat():QTextFrameFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FrameFormat"]);
	};

	public function LastCursorPosition():QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastCursorPosition"]);
	};

	public function LastPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastPosition"]);
	};

	public function ParentFrame():QTextFrame {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ParentFrame"]);
	};

	public function SetFrameFormat(format:QTextFrameFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFrameFormat", format]);
	};

	public function ConnectDestroyQTextFrame(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQTextFrame", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQTextFrame() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTextFrame"]);
	};

	public function DestroyQTextFrame() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextFrame"]);
	};

	public function DestroyQTextFrameDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextFrameDefault"]);
	};
}

function NewQTextFrameFromPointer(ptr:String):QTextFrame {
	final r = new QTextFrame();
	r.initFrom(ptr, "gui.QTextFrame");
	return r;
}

function NewQTextFrame(document:QTextDocument_ITF):QTextFrame {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFrame", "", document]);
}

interface QTextFrameFormat_ITF extends QTextFormat_ITF {
	public function QTextFrameFormat_PTR():QTextFrameFormat;
}

class QTextFrameFormat extends QTextFormat implements QTextFrameFormat_ITF {
	public function new() {
		super();
	}

	public function QTextFrameFormat_PTR():QTextFrameFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextFrameFormat_PTR"]);
	};

	public function DestroyQTextFrameFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextFrameFormat"]);
	};

	public function Border():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Border"]);
	};

	public function BorderBrush():QBrush {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BorderBrush"]);
	};

	public function BorderStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BorderStyle"]);
	};

	public function BottomMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BottomMargin"]);
	};

	public function Height():QTextLength {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function LeftMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeftMargin"]);
	};

	public function Margin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Margin"]);
	};

	public function Padding():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Padding"]);
	};

	public function PageBreakPolicy():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PageBreakPolicy"]);
	};

	public function Position():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function RightMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RightMargin"]);
	};

	public function SetBorder(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorder", width]);
	};

	public function SetBorderBrush(brush:QBrush_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorderBrush", brush]);
	};

	public function SetBorderStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBorderStyle", style]);
	};

	public function SetBottomMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBottomMargin", margi]);
	};

	public function SetHeight(height:QTextLength_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeight", height]);
	};

	public function SetHeight2(height:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeight2", height]);
	};

	public function SetLeftMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLeftMargin", margi]);
	};

	public function SetMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMargin", margi]);
	};

	public function SetPadding(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPadding", width]);
	};

	public function SetPageBreakPolicy(policy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPageBreakPolicy", policy]);
	};

	public function SetPosition(policy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPosition", policy]);
	};

	public function SetRightMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRightMargin", margi]);
	};

	public function SetTopMargin(margi:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTopMargin", margi]);
	};

	public function SetWidth(width:QTextLength_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth", width]);
	};

	public function SetWidth2(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth2", width]);
	};

	public function TopMargin():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TopMargin"]);
	};

	public function Width():QTextLength {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};
}

function NewQTextFrameFormatFromPointer(ptr:String):QTextFrameFormat {
	final r = new QTextFrameFormat();
	r.initFrom(ptr, "gui.QTextFrameFormat");
	return r;
}

function NewQTextFrameFormat():QTextFrameFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextFrameFormat", ""]);
}

interface QTextFrameLayoutData_ITF {
	public function QTextFrameLayoutData_PTR():QTextFrameLayoutData;
}

class QTextFrameLayoutData extends Internal implements QTextFrameLayoutData_ITF {
	public function new() {
		super();
	}

	public function QTextFrameLayoutData_PTR():QTextFrameLayoutData {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextFrameLayoutData_PTR"]);
	};

	public function DestroyQTextFrameLayoutData() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextFrameLayoutData"]);
	};
}

function NewQTextFrameLayoutDataFromPointer(ptr:String):QTextFrameLayoutData {
	final r = new QTextFrameLayoutData();
	r.initFrom(ptr, "gui.QTextFrameLayoutData");
	return r;
}

interface QTextImageFormat_ITF extends QTextCharFormat_ITF {
	public function QTextImageFormat_PTR():QTextImageFormat;
}

class QTextImageFormat extends QTextCharFormat implements QTextImageFormat_ITF {
	public function new() {
		super();
	}

	public function QTextImageFormat_PTR():QTextImageFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextImageFormat_PTR"]);
	};

	public function DestroyQTextImageFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextImageFormat"]);
	};

	public function Height():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function Name():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name"]);
	};

	public function Quality():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Quality"]);
	};

	public function SetHeight(height:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeight", height]);
	};

	public function SetName(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetName", name]);
	};

	public function SetQuality(quality:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetQuality", quality]);
	};

	public function SetWidth(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth", width]);
	};

	public function Width():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};
}

function NewQTextImageFormatFromPointer(ptr:String):QTextImageFormat {
	final r = new QTextImageFormat();
	r.initFrom(ptr, "gui.QTextImageFormat");
	return r;
}

function NewQTextImageFormat():QTextImageFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextImageFormat", ""]);
}

interface QTextInlineObject_ITF {
	public function QTextInlineObject_PTR():QTextInlineObject;
}

class QTextInlineObject extends Internal implements QTextInlineObject_ITF {
	public function new() {
		super();
	}

	public function QTextInlineObject_PTR():QTextInlineObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextInlineObject_PTR"]);
	};

	public function DestroyQTextInlineObject() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextInlineObject"]);
	};

	public function Ascent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Ascent"]);
	};

	public function Descent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Descent"]);
	};

	public function Format():QTextFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function FormatIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FormatIndex"]);
	};

	public function Height():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Rect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function SetAscent(a:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAscent", a]);
	};

	public function SetDescent(d:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetDescent", d]);
	};

	public function SetWidth(w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth", w]);
	};

	public function TextDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextDirection"]);
	};

	public function TextPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextPosition"]);
	};

	public function Width():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};
}

function NewQTextInlineObjectFromPointer(ptr:String):QTextInlineObject {
	final r = new QTextInlineObject();
	r.initFrom(ptr, "gui.QTextInlineObject");
	return r;
}

interface QTextItem_ITF {
	public function QTextItem_PTR():QTextItem;
}

class QTextItem extends Internal implements QTextItem_ITF {
	public function new() {
		super();
	}

	public function QTextItem_PTR():QTextItem {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextItem_PTR"]);
	};

	public function DestroyQTextItem() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextItem"]);
	};

	public function Ascent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Ascent"]);
	};

	public function Descent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Descent"]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function RenderFlags():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RenderFlags"]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};

	public function Width():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};
}

function NewQTextItemFromPointer(ptr:String):QTextItem {
	final r = new QTextItem();
	r.initFrom(ptr, "gui.QTextItem");
	return r;
}

interface QTextLayout_ITF {
	public function QTextLayout_PTR():QTextLayout;
}

class QTextLayout extends Internal implements QTextLayout_ITF {
	public function new() {
		super();
	}

	public function QTextLayout_PTR():QTextLayout {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextLayout_PTR"]);
	};

	public function BeginLayout() {
		Internal.callLocalFunction(["", Pointer(), ___className, "BeginLayout"]);
	};

	public function BoundingRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BoundingRect"]);
	};

	public function CacheEnabled():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CacheEnabled"]);
	};

	public function ClearFormats() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearFormats"]);
	};

	public function ClearLayout() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearLayout"]);
	};

	public function CreateLine():QTextLine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CreateLine"]);
	};

	public function CursorMoveStyle():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorMoveStyle"]);
	};

	public function DrawCursor(painter:QPainter_ITF, position:QPointF_ITF, cursorPosition:Int, width:Int) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"DrawCursor",
			painter,
			position,
			cursorPosition,
			width
		]);
	};

	public function DrawCursor2(painter:QPainter_ITF, position:QPointF_ITF, cursorPosition:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DrawCursor2", painter, position, cursorPosition]);
	};

	public function EndLayout() {
		Internal.callLocalFunction(["", Pointer(), ___className, "EndLayout"]);
	};

	public function Font():QFont {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Font"]);
	};

	public function GlyphRuns(from:Int, length:Int):Array<QGlyphRun> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlyphRuns", from, length]);
	};

	public function IsValidCursorPosition(pos:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValidCursorPosition", pos]);
	};

	public function LeftCursorPosition(oldPos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeftCursorPosition", oldPos]);
	};

	public function LineAt(i:Int):QTextLine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineAt", i]);
	};

	public function LineCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineCount"]);
	};

	public function LineForTextPosition(pos:Int):QTextLine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineForTextPosition", pos]);
	};

	public function MaximumWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumWidth"]);
	};

	public function MinimumWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumWidth"]);
	};

	public function NextCursorPosition(oldPos:Int, mode:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NextCursorPosition", oldPos, mode]);
	};

	public function Position():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function PreeditAreaPosition():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PreeditAreaPosition"]);
	};

	public function PreeditAreaText():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PreeditAreaText"]);
	};

	public function PreviousCursorPosition(oldPos:Int, mode:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PreviousCursorPosition", oldPos, mode]);
	};

	public function RightCursorPosition(oldPos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RightCursorPosition", oldPos]);
	};

	public function SetCacheEnabled(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCacheEnabled", enable]);
	};

	public function SetCursorMoveStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCursorMoveStyle", style]);
	};

	public function SetFont(font:QFont_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFont", font]);
	};

	public function SetPosition(p:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPosition", p]);
	};

	public function SetPreeditArea(position:Int, text:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPreeditArea", position, text]);
	};

	public function SetText(stri:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetText", stri]);
	};

	public function SetTextOption(option:QTextOption_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextOption", option]);
	};

	public function Text():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Text"]);
	};

	public function TextOption():QTextOption {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextOption"]);
	};

	public function DestroyQTextLayout() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextLayout"]);
	};
}

function NewQTextLayoutFromPointer(ptr:String):QTextLayout {
	final r = new QTextLayout();
	r.initFrom(ptr, "gui.QTextLayout");
	return r;
}

function NewQTextLayout():QTextLayout {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextLayout", ""]);
}

function NewQTextLayout2(text:String):QTextLayout {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextLayout2", "", text]);
}

function NewQTextLayout4(text:String, font:QFont_ITF, paintdevice:QPaintDevice_ITF):QTextLayout {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextLayout4", "", text, font, paintdevice]);
}

interface QTextLength_ITF {
	public function QTextLength_PTR():QTextLength;
}

class QTextLength extends Internal implements QTextLength_ITF {
	public function new() {
		super();
	}

	public function QTextLength_PTR():QTextLength {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextLength_PTR"]);
	};

	public function DestroyQTextLength() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextLength"]);
	};

	public function RawValue():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RawValue"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function Value(maximumLength:Float):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Value", maximumLength]);
	};
}

function NewQTextLengthFromPointer(ptr:String):QTextLength {
	final r = new QTextLength();
	r.initFrom(ptr, "gui.QTextLength");
	return r;
}

function NewQTextLength():QTextLength {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextLength", ""]);
}

function NewQTextLength2(ty:Int, value:Float):QTextLength {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextLength2", "", ty, value]);
}

interface QTextLine_ITF {
	public function QTextLine_PTR():QTextLine;
}

class QTextLine extends Internal implements QTextLine_ITF {
	public function new() {
		super();
	}

	public function QTextLine_PTR():QTextLine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextLine_PTR"]);
	};

	public function DestroyQTextLine() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextLine"]);
	};

	public function Ascent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Ascent"]);
	};

	public function CursorToX(cursorPos:Int, edge:Int):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorToX", cursorPos, edge]);
	};

	public function CursorToX2(cursorPos:Int, edge:Int):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CursorToX2", cursorPos, edge]);
	};

	public function Descent():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Descent"]);
	};

	public function GlyphRuns(from:Int, length:Int):Array<QGlyphRun> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlyphRuns", from, length]);
	};

	public function Height():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function HorizontalAdvance():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HorizontalAdvance"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function Leading():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Leading"]);
	};

	public function LeadingIncluded():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeadingIncluded"]);
	};

	public function LineNumber():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LineNumber"]);
	};

	public function NaturalTextRect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NaturalTextRect"]);
	};

	public function NaturalTextWidth():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NaturalTextWidth"]);
	};

	public function Position():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function Rect():QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rect"]);
	};

	public function SetLeadingIncluded(included:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLeadingIncluded", included]);
	};

	public function SetLineWidth(width:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLineWidth", width]);
	};

	public function SetNumColumns(numColumns:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNumColumns", numColumns]);
	};

	public function SetNumColumns2(numColumns:Int, alignmentWidth:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNumColumns2", numColumns, alignmentWidth]);
	};

	public function SetPosition(pos:QPointF_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPosition", pos]);
	};

	public function TextLength():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextLength"]);
	};

	public function TextStart():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextStart"]);
	};

	public function Width():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function X():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function XToCursor(x:Float, cpos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "XToCursor", x, cpos]);
	};

	public function Y():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQTextLineFromPointer(ptr:String):QTextLine {
	final r = new QTextLine();
	r.initFrom(ptr, "gui.QTextLine");
	return r;
}

function NewQTextLine():QTextLine {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextLine", ""]);
}

interface QTextList_ITF extends QTextBlockGroup_ITF {
	public function QTextList_PTR():QTextList;
}

class QTextList extends QTextBlockGroup implements QTextList_ITF {
	public function new() {
		super();
	}

	public function QTextList_PTR():QTextList {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextList_PTR"]);
	};

	public function Add(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Add", block]);
	};

	public function Count():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Count"]);
	};

	public function Format_QTextBlockGroup():QTextListFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function Item(i:Int):QTextBlock {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Item", i]);
	};

	public function ItemNumber(block:QTextBlock_ITF):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ItemNumber", block]);
	};

	public function ItemText(block:QTextBlock_ITF):String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ItemText", block]);
	};

	public function Remove(block:QTextBlock_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Remove", block]);
	};

	public function RemoveItem(i:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveItem", i]);
	};

	public function SetFormat_QTextBlockGroup(format:QTextListFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};
}

function NewQTextListFromPointer(ptr:String):QTextList {
	final r = new QTextList();
	r.initFrom(ptr, "gui.QTextList");
	return r;
}

interface QTextListFormat_ITF extends QTextFormat_ITF {
	public function QTextListFormat_PTR():QTextListFormat;
}

class QTextListFormat extends QTextFormat implements QTextListFormat_ITF {
	public function new() {
		super();
	}

	public function QTextListFormat_PTR():QTextListFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextListFormat_PTR"]);
	};

	public function DestroyQTextListFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextListFormat"]);
	};

	public function Indent():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Indent"]);
	};

	public function NumberPrefix():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NumberPrefix"]);
	};

	public function NumberSuffix():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NumberSuffix"]);
	};

	public function SetIndent(indentation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIndent", indentation]);
	};

	public function SetNumberPrefix(numberPrefix:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNumberPrefix", numberPrefix]);
	};

	public function SetNumberSuffix(numberSuffix:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetNumberSuffix", numberSuffix]);
	};

	public function SetStyle(style:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetStyle", style]);
	};

	public function Style():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Style"]);
	};
}

function NewQTextListFormatFromPointer(ptr:String):QTextListFormat {
	final r = new QTextListFormat();
	r.initFrom(ptr, "gui.QTextListFormat");
	return r;
}

function NewQTextListFormat():QTextListFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextListFormat", ""]);
}

interface QTextObject_ITF extends QObject_ITF {
	public function QTextObject_PTR():QTextObject;
}

class QTextObject extends QObject implements QTextObject_ITF {
	public function new() {
		super();
	}

	public function QTextObject_PTR():QTextObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextObject_PTR"]);
	};

	public function Document():QTextDocument {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Document"]);
	};

	public function Format():QTextFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function FormatIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FormatIndex"]);
	};

	public function ObjectIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ObjectIndex"]);
	};

	public function SetFormat(format:QTextFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function ConnectDestroyQTextObject(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQTextObject",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQTextObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTextObject"]);
	};

	public function DestroyQTextObject() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextObject"]);
	};

	public function DestroyQTextObjectDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextObjectDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQTextObjectFromPointer(ptr:String):QTextObject {
	final r = new QTextObject();
	r.initFrom(ptr, "gui.QTextObject");
	return r;
}

function NewQTextObject(document:QTextDocument_ITF):QTextObject {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextObject", "", document]);
}

interface QTextObjectInterface_ITF {
	public function QTextObjectInterface_PTR():QTextObjectInterface;
}

class QTextObjectInterface extends Internal implements QTextObjectInterface_ITF {
	public function new() {
		super();
	}

	public function QTextObjectInterface_PTR():QTextObjectInterface {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextObjectInterface_PTR"]);
	};

	public function ConnectDrawObject(f:(painter:QPainter, rect:QRectF, doc:QTextDocument, posInDocument:Int, format:QTextFormat) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDrawObject", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDrawObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDrawObject"]);
	};

	public function DrawObject(painter:QPainter_ITF, rect:QRectF_ITF, doc:QTextDocument_ITF, posInDocument:Int, format:QTextFormat_ITF) {
		Internal.callLocalFunction([
			"",
			Pointer(),
			___className,
			"DrawObject",
			painter,
			rect,
			doc,
			posInDocument,
			format
		]);
	};

	public function ConnectIntrinsicSize(f:(doc:QTextDocument, posInDocument:Int, format:QTextFormat) -> QSizeF) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectIntrinsicSize", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectIntrinsicSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectIntrinsicSize"]);
	};

	public function IntrinsicSize(doc:QTextDocument_ITF, posInDocument:Int, format:QTextFormat_ITF):QSizeF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IntrinsicSize", doc, posInDocument, format]);
	};

	public function ConnectDestroyQTextObjectInterface(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQTextObjectInterface",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQTextObjectInterface() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTextObjectInterface"]);
	};

	public function DestroyQTextObjectInterface() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextObjectInterface"]);
	};

	public function DestroyQTextObjectInterfaceDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextObjectInterfaceDefault"]);
	};
}

function NewQTextObjectInterfaceFromPointer(ptr:String):QTextObjectInterface {
	final r = new QTextObjectInterface();
	r.initFrom(ptr, "gui.QTextObjectInterface");
	return r;
}

interface QTextOption_ITF {
	public function QTextOption_PTR():QTextOption;
}

class QTextOption extends Internal implements QTextOption_ITF {
	public function new() {
		super();
	}

	public function QTextOption_PTR():QTextOption {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextOption_PTR"]);
	};

	public function Alignment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alignment"]);
	};

	public function Flags():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Flags"]);
	};

	public function SetAlignment(alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlignment", alignment]);
	};

	public function SetFlags(flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFlags", flags]);
	};

	public function SetTabArray(tabStops:Array<Float>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTabArray", tabStops]);
	};

	public function SetTabStopDistance(tabStopDistance:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTabStopDistance", tabStopDistance]);
	};

	public function SetTextDirection(direction:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTextDirection", direction]);
	};

	public function SetUseDesignMetrics(enable:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetUseDesignMetrics", enable]);
	};

	public function SetWrapMode(mode:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWrapMode", mode]);
	};

	public function TabArray():Array<Float> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TabArray"]);
	};

	public function TabStopDistance():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TabStopDistance"]);
	};

	public function TextDirection():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TextDirection"]);
	};

	public function UseDesignMetrics():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "UseDesignMetrics"]);
	};

	public function WrapMode():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WrapMode"]);
	};

	public function DestroyQTextOption() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextOption"]);
	};
}

function NewQTextOptionFromPointer(ptr:String):QTextOption {
	final r = new QTextOption();
	r.initFrom(ptr, "gui.QTextOption");
	return r;
}

function NewQTextOption():QTextOption {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextOption", ""]);
}

function NewQTextOption2(alignment:Int):QTextOption {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextOption2", "", alignment]);
}

function NewQTextOption3(other:QTextOption_ITF):QTextOption {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextOption3", "", other]);
}

interface QTextTable_ITF extends QTextFrame_ITF {
	public function QTextTable_PTR():QTextTable;
}

class QTextTable extends QTextFrame implements QTextTable_ITF {
	public function new() {
		super();
	}

	public function QTextTable_PTR():QTextTable {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextTable_PTR"]);
	};

	public function AppendColumns(count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendColumns", count]);
	};

	public function AppendRows(count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AppendRows", count]);
	};

	public function CellAt(row:Int, column:Int):QTextTableCell {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CellAt", row, column]);
	};

	public function CellAt2(position:Int):QTextTableCell {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CellAt2", position]);
	};

	public function CellAt3(cursor:QTextCursor_ITF):QTextTableCell {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CellAt3", cursor]);
	};

	public function Columns():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Columns"]);
	};

	public function Format_QTextFrame():QTextTableFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function InsertColumns(index:Int, columns:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertColumns", index, columns]);
	};

	public function InsertRows(index:Int, rows:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "InsertRows", index, rows]);
	};

	public function MergeCells(row:Int, column:Int, numRows:Int, numCols:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MergeCells", row, column, numRows, numCols]);
	};

	public function MergeCells2(cursor:QTextCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MergeCells2", cursor]);
	};

	public function RemoveColumns(index:Int, columns:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveColumns", index, columns]);
	};

	public function RemoveRows(index:Int, rows:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "RemoveRows", index, rows]);
	};

	public function Resize(rows:Int, columns:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Resize", rows, columns]);
	};

	public function RowEnd(cursor:QTextCursor_ITF):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowEnd", cursor]);
	};

	public function RowStart(cursor:QTextCursor_ITF):QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowStart", cursor]);
	};

	public function Rows():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rows"]);
	};

	public function SetFormat_QTextFrame(format:QTextTableFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SplitCell(row:Int, column:Int, numRows:Int, numCols:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SplitCell", row, column, numRows, numCols]);
	};
}

function NewQTextTableFromPointer(ptr:String):QTextTable {
	final r = new QTextTable();
	r.initFrom(ptr, "gui.QTextTable");
	return r;
}

interface QTextTableCell_ITF {
	public function QTextTableCell_PTR():QTextTableCell;
}

class QTextTableCell extends Internal implements QTextTableCell_ITF {
	public function new() {
		super();
	}

	public function QTextTableCell_PTR():QTextTableCell {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextTableCell_PTR"]);
	};

	public function Column():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Column"]);
	};

	public function ColumnSpan():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ColumnSpan"]);
	};

	public function FirstCursorPosition():QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FirstCursorPosition"]);
	};

	public function Format():QTextCharFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function IsValid():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsValid"]);
	};

	public function LastCursorPosition():QTextCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LastCursorPosition"]);
	};

	public function Row():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Row"]);
	};

	public function RowSpan():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RowSpan"]);
	};

	public function SetFormat(format:QTextCharFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function TableCellFormatIndex():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TableCellFormatIndex"]);
	};

	public function DestroyQTextTableCell() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextTableCell"]);
	};
}

function NewQTextTableCellFromPointer(ptr:String):QTextTableCell {
	final r = new QTextTableCell();
	r.initFrom(ptr, "gui.QTextTableCell");
	return r;
}

function NewQTextTableCell():QTextTableCell {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextTableCell", ""]);
}

function NewQTextTableCell2(other:QTextTableCell_ITF):QTextTableCell {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextTableCell2", "", other]);
}

interface QTextTableCellFormat_ITF extends QTextCharFormat_ITF {
	public function QTextTableCellFormat_PTR():QTextTableCellFormat;
}

class QTextTableCellFormat extends QTextCharFormat implements QTextTableCellFormat_ITF {
	public function new() {
		super();
	}

	public function QTextTableCellFormat_PTR():QTextTableCellFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextTableCellFormat_PTR"]);
	};

	public function DestroyQTextTableCellFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextTableCellFormat"]);
	};

	public function BottomPadding():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BottomPadding"]);
	};

	public function LeftPadding():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LeftPadding"]);
	};

	public function RightPadding():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RightPadding"]);
	};

	public function SetBottomPadding(padding:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBottomPadding", padding]);
	};

	public function SetLeftPadding(padding:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLeftPadding", padding]);
	};

	public function SetPadding(padding:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPadding", padding]);
	};

	public function SetRightPadding(padding:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetRightPadding", padding]);
	};

	public function SetTopPadding(padding:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTopPadding", padding]);
	};

	public function TopPadding():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TopPadding"]);
	};
}

function NewQTextTableCellFormatFromPointer(ptr:String):QTextTableCellFormat {
	final r = new QTextTableCellFormat();
	r.initFrom(ptr, "gui.QTextTableCellFormat");
	return r;
}

function NewQTextTableCellFormat():QTextTableCellFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextTableCellFormat", ""]);
}

interface QTextTableFormat_ITF extends QTextFrameFormat_ITF {
	public function QTextTableFormat_PTR():QTextTableFormat;
}

class QTextTableFormat extends QTextFrameFormat implements QTextTableFormat_ITF {
	public function new() {
		super();
	}

	public function QTextTableFormat_PTR():QTextTableFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTextTableFormat_PTR"]);
	};

	public function DestroyQTextTableFormat() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTextTableFormat"]);
	};

	public function Alignment():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Alignment"]);
	};

	public function CellPadding():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CellPadding"]);
	};

	public function CellSpacing():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CellSpacing"]);
	};

	public function ClearColumnWidthConstraints() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ClearColumnWidthConstraints"]);
	};

	public function Columns():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Columns"]);
	};

	public function HeaderRowCount():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "HeaderRowCount"]);
	};

	public function SetAlignment(alignment:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetAlignment", alignment]);
	};

	public function SetCellPadding(padding:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCellPadding", padding]);
	};

	public function SetCellSpacing(spacing:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCellSpacing", spacing]);
	};

	public function SetColumnWidthConstraints(constraints:Array<QTextLength>) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetColumnWidthConstraints", constraints]);
	};

	public function SetHeaderRowCount(count:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeaderRowCount", count]);
	};
}

function NewQTextTableFormatFromPointer(ptr:String):QTextTableFormat {
	final r = new QTextTableFormat();
	r.initFrom(ptr, "gui.QTextTableFormat");
	return r;
}

function NewQTextTableFormat():QTextTableFormat {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTextTableFormat", ""]);
}

interface QTouchDevice_ITF {
	public function QTouchDevice_PTR():QTouchDevice;
}

class QTouchDevice extends Internal implements QTouchDevice_ITF {
	public function new() {
		super();
	}

	public function QTouchDevice_PTR():QTouchDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTouchDevice_PTR"]);
	};

	public function Capabilities():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Capabilities"]);
	};

	public function Devices():Array<QTouchDevice> {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Devices"]);
	};

	public function MaximumTouchPoints():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumTouchPoints"]);
	};

	public function Name():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Name"]);
	};

	public function SetCapabilities(caps:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCapabilities", caps]);
	};

	public function SetMaximumTouchPoints(max:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumTouchPoints", max]);
	};

	public function SetName(name:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetName", name]);
	};

	public function SetType(devType:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetType", devType]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function DestroyQTouchDevice() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTouchDevice"]);
	};
}

function NewQTouchDeviceFromPointer(ptr:String):QTouchDevice {
	final r = new QTouchDevice();
	r.initFrom(ptr, "gui.QTouchDevice");
	return r;
}

function NewQTouchDevice():QTouchDevice {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTouchDevice", ""]);
}

function QTouchDevice_Devices():Array<QTouchDevice> {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTouchDevice_Devices", ""]);
}

interface QTouchEvent_ITF extends QInputEvent_ITF {
	public function QTouchEvent_PTR():QTouchEvent;
}

class QTouchEvent extends QInputEvent implements QTouchEvent_ITF {
	public function new() {
		super();
	}

	public function QTouchEvent_PTR():QTouchEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTouchEvent_PTR"]);
	};

	public function Device():QTouchDevice {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Device"]);
	};

	public function Target():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Target"]);
	};

	public function TouchPointStates():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "TouchPointStates"]);
	};

	public function Window():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Window"]);
	};

	public function ConnectDestroyQTouchEvent(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectDestroyQTouchEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectDestroyQTouchEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQTouchEvent"]);
	};

	public function DestroyQTouchEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTouchEvent"]);
	};

	public function DestroyQTouchEventDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTouchEventDefault"]);
	};
}

function NewQTouchEventFromPointer(ptr:String):QTouchEvent {
	final r = new QTouchEvent();
	r.initFrom(ptr, "gui.QTouchEvent");
	return r;
}

interface QTransform_ITF {
	public function QTransform_PTR():QTransform;
}

class QTransform extends Internal implements QTransform_ITF {
	public function new() {
		super();
	}

	public function QTransform_PTR():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QTransform_PTR"]);
	};

	public function DestroyQTransform() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQTransform"]);
	};

	public function Adjoint():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Adjoint"]);
	};

	public function Determinant():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Determinant"]);
	};

	public function Dx():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Dx"]);
	};

	public function Dy():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Dy"]);
	};

	public function FromScale(sx:Float, sy:Float):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromScale", sx, sy]);
	};

	public function FromTranslate(dx:Float, dy:Float):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromTranslate", dx, dy]);
	};

	public function Inverted(invertible:Bool):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Inverted", invertible]);
	};

	public function IsAffine():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAffine"]);
	};

	public function IsIdentity():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsIdentity"]);
	};

	public function IsInvertible():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsInvertible"]);
	};

	public function IsRotating():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsRotating"]);
	};

	public function IsScaling():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsScaling"]);
	};

	public function IsTranslating():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsTranslating"]);
	};

	public function M11():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M11"]);
	};

	public function M12():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M12"]);
	};

	public function M13():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M13"]);
	};

	public function M21():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M21"]);
	};

	public function M22():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M22"]);
	};

	public function M23():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M23"]);
	};

	public function M31():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M31"]);
	};

	public function M32():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M32"]);
	};

	public function M33():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "M33"]);
	};

	public function Map(x:Float, y:Float, tx:Float, ty:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Map", x, y, tx, ty]);
	};

	public function Map2(point:QPoint_ITF):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map2", point]);
	};

	public function Map3(p:QPointF_ITF):QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map3", p]);
	};

	public function Map4(l:QLine_ITF):QLine {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map4", l]);
	};

	public function Map5(line:QLineF_ITF):QLineF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map5", line]);
	};

	public function Map6(polygon:QPolygonF_ITF):QPolygonF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map6", polygon]);
	};

	public function Map7(polygon:QPolygon_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map7", polygon]);
	};

	public function Map8(region:QRegion_ITF):QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map8", region]);
	};

	public function Map9(path:QPainterPath_ITF):QPainterPath {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Map9", path]);
	};

	public function Map10(x:Int, y:Int, tx:Int, ty:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Map10", x, y, tx, ty]);
	};

	public function MapRect(rectangle:QRectF_ITF):QRectF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRect", rectangle]);
	};

	public function MapRect2(rectangle:QRect_ITF):QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapRect2", rectangle]);
	};

	public function MapToPolygon(rectangle:QRect_ITF):QPolygon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapToPolygon", rectangle]);
	};

	public function QuadToQuad(one:QPolygonF_ITF, two:QPolygonF_ITF, trans:QTransform_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QuadToQuad", one, two, trans]);
	};

	public function QuadToSquare(quad:QPolygonF_ITF, trans:QTransform_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QuadToSquare", quad, trans]);
	};

	public function Reset() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Reset"]);
	};

	public function Rotate(angle:Float, axis:Int):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Rotate", angle, axis]);
	};

	public function RotateRadians(angle:Float, axis:Int):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RotateRadians", angle, axis]);
	};

	public function Scale(sx:Float, sy:Float):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Scale", sx, sy]);
	};

	public function SetMatrix(m11:Float, m12:Float, m13:Float, m21:Float, m22:Float, m23:Float, m31:Float, m32:Float, m33:Float) {
		Internal.callLocalFunction([
			"", Pointer(), ___className, "SetMatrix", m11, m12, m13, m21, m22, m23, m31, m32, m33
		]);
	};

	public function Shear(sh:Float, sv:Float):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Shear", sh, sv]);
	};

	public function SquareToQuad(quad:QPolygonF_ITF, trans:QTransform_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SquareToQuad", quad, trans]);
	};

	public function ToAffine():QMatrix {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToAffine"]);
	};

	public function Translate(dx:Float, dy:Float):QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Translate", dx, dy]);
	};

	public function Transposed():QTransform {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Transposed"]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};
}

function NewQTransformFromPointer(ptr:String):QTransform {
	final r = new QTransform();
	r.initFrom(ptr, "gui.QTransform");
	return r;
}

function NewQTransform2():QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTransform2", ""]);
}

function NewQTransform3(m11:Float, m12:Float, m13:Float, m21:Float, m22:Float, m23:Float, m31:Float, m32:Float, m33:Float):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTransform3", "", m11, m12, m13, m21, m22, m23, m31, m32, m33]);
}

function NewQTransform4(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTransform4", "", m11, m12, m21, m22, dx, dy]);
}

function NewQTransform5(matrix:QMatrix_ITF):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQTransform5", "", matrix]);
}

function QTransform_FromScale(sx:Float, sy:Float):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTransform_FromScale", "", sx, sy]);
}

function QTransform_FromTranslate(dx:Float, dy:Float):QTransform {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTransform_FromTranslate", "", dx, dy]);
}

function QTransform_QuadToQuad(one:QPolygonF_ITF, two:QPolygonF_ITF, trans:QTransform_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTransform_QuadToQuad", "", one, two, trans]);
}

function QTransform_QuadToSquare(quad:QPolygonF_ITF, trans:QTransform_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTransform_QuadToSquare", "", quad, trans]);
}

function QTransform_SquareToQuad(quad:QPolygonF_ITF, trans:QTransform_ITF):Bool {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QTransform_SquareToQuad", "", quad, trans]);
}

interface QValidator_ITF extends QObject_ITF {
	public function QValidator_PTR():QValidator;
}

class QValidator extends QObject implements QValidator_ITF {
	public function new() {
		super();
	}

	public function QValidator_PTR():QValidator {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QValidator_PTR"]);
	};

	public function ConnectChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectChanged"]);
	};

	public function Changed() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Changed"]);
	};

	public function ConnectFixup(f:(input:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFixup", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFixup() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFixup"]);
	};

	public function Fixup(input:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Fixup", input]);
	};

	public function FixupDefault(input:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FixupDefault", input]);
	};

	public function Locale():QLocale {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Locale"]);
	};

	public function SetLocale(locale:QLocale_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetLocale", locale]);
	};

	public function ConnectValidate(f:(input:String, pos:Int) -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectValidate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectValidate"]);
	};

	public function Validate(input:String, pos:Int):Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Validate", input, pos]);
	};

	public function ConnectDestroyQValidator(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQValidator", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQValidator() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQValidator"]);
	};

	public function DestroyQValidator() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQValidator"]);
	};

	public function DestroyQValidatorDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQValidatorDefault"]);
	};

	public override function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public override function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public override function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public override function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public override function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public override function EventDefault(e:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", e]);
	};

	public override function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public override function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public override function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQValidatorFromPointer(ptr:String):QValidator {
	final r = new QValidator();
	r.initFrom(ptr, "gui.QValidator");
	return r;
}

function NewQValidator(parent:QObject_ITF):QValidator {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQValidator", "", parent]);
}

interface QVector2D_ITF {
	public function QVector2D_PTR():QVector2D;
}

class QVector2D extends Internal implements QVector2D_ITF {
	public function new() {
		super();
	}

	public function QVector2D_PTR():QVector2D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVector2D_PTR"]);
	};

	public function DestroyQVector2D() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVector2D"]);
	};

	public function DistanceToLine(point:QVector2D_ITF, direction:QVector2D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DistanceToLine", point, direction]);
	};

	public function DistanceToPoint(point:QVector2D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DistanceToPoint", point]);
	};

	public function DotProduct(v1:QVector2D_ITF, v2:QVector2D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotProduct", v1, v2]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Length():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function LengthSquared():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LengthSquared"]);
	};

	public function Normalize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Normalize"]);
	};

	public function Normalized():QVector2D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Normalized"]);
	};

	public function SetX(x:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetX", x]);
	};

	public function SetY(y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetY", y]);
	};

	public function ToPoint():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPoint"]);
	};

	public function ToPointF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPointF"]);
	};

	public function ToVector3D():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector3D"]);
	};

	public function ToVector4D():QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector4D"]);
	};

	public function X():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQVector2DFromPointer(ptr:String):QVector2D {
	final r = new QVector2D();
	r.initFrom(ptr, "gui.QVector2D");
	return r;
}

function NewQVector2D():QVector2D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector2D", ""]);
}

function NewQVector2D3(xpos:Float, ypos:Float):QVector2D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector2D3", "", xpos, ypos]);
}

function NewQVector2D4(point:QPoint_ITF):QVector2D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector2D4", "", point]);
}

function NewQVector2D5(point:QPointF_ITF):QVector2D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector2D5", "", point]);
}

function NewQVector2D6(vector:QVector3D_ITF):QVector2D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector2D6", "", vector]);
}

function NewQVector2D7(vector:QVector4D_ITF):QVector2D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector2D7", "", vector]);
}

function QVector2D_DotProduct(v1:QVector2D_ITF, v2:QVector2D_ITF):Float {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QVector2D_DotProduct", "", v1, v2]);
}

interface QVector3D_ITF {
	public function QVector3D_PTR():QVector3D;
}

class QVector3D extends Internal implements QVector3D_ITF {
	public function new() {
		super();
	}

	public function QVector3D_PTR():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVector3D_PTR"]);
	};

	public function DestroyQVector3D() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVector3D"]);
	};

	public function CrossProduct(v1:QVector3D_ITF, v2:QVector3D_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CrossProduct", v1, v2]);
	};

	public function DistanceToLine(point:QVector3D_ITF, direction:QVector3D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DistanceToLine", point, direction]);
	};

	public function DistanceToPlane(plane:QVector3D_ITF, normal:QVector3D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DistanceToPlane", plane, normal]);
	};

	public function DistanceToPlane2(plane1:QVector3D_ITF, plane2:QVector3D_ITF, plane3:QVector3D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DistanceToPlane2", plane1, plane2, plane3]);
	};

	public function DistanceToPoint(point:QVector3D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DistanceToPoint", point]);
	};

	public function DotProduct(v1:QVector3D_ITF, v2:QVector3D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotProduct", v1, v2]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Length():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function LengthSquared():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LengthSquared"]);
	};

	public function Normal(v1:QVector3D_ITF, v2:QVector3D_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Normal", v1, v2]);
	};

	public function Normal2(v1:QVector3D_ITF, v2:QVector3D_ITF, v3:QVector3D_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Normal2", v1, v2, v3]);
	};

	public function Normalize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Normalize"]);
	};

	public function Normalized():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Normalized"]);
	};

	public function Project(modelView:QMatrix4x4_ITF, projection:QMatrix4x4_ITF, viewport:QRect_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Project", modelView, projection, viewport]);
	};

	public function SetX(x:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetX", x]);
	};

	public function SetY(y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetY", y]);
	};

	public function SetZ(z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetZ", z]);
	};

	public function ToPoint():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPoint"]);
	};

	public function ToPointF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPointF"]);
	};

	public function ToVector2D():QVector2D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector2D"]);
	};

	public function ToVector4D():QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector4D"]);
	};

	public function Unproject(modelView:QMatrix4x4_ITF, projection:QMatrix4x4_ITF, viewport:QRect_ITF):QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Unproject", modelView, projection, viewport]);
	};

	public function X():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};

	public function Z():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Z"]);
	};
}

function NewQVector3DFromPointer(ptr:String):QVector3D {
	final r = new QVector3D();
	r.initFrom(ptr, "gui.QVector3D");
	return r;
}

function NewQVector3D():QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D", ""]);
}

function NewQVector3D3(xpos:Float, ypos:Float, zpos:Float):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D3", "", xpos, ypos, zpos]);
}

function NewQVector3D4(point:QPoint_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D4", "", point]);
}

function NewQVector3D5(point:QPointF_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D5", "", point]);
}

function NewQVector3D6(vector:QVector2D_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D6", "", vector]);
}

function NewQVector3D7(vector:QVector2D_ITF, zpos:Float):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D7", "", vector, zpos]);
}

function NewQVector3D8(vector:QVector4D_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector3D8", "", vector]);
}

function QVector3D_CrossProduct(v1:QVector3D_ITF, v2:QVector3D_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QVector3D_CrossProduct", "", v1, v2]);
}

function QVector3D_DotProduct(v1:QVector3D_ITF, v2:QVector3D_ITF):Float {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QVector3D_DotProduct", "", v1, v2]);
}

function QVector3D_Normal(v1:QVector3D_ITF, v2:QVector3D_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QVector3D_Normal", "", v1, v2]);
}

function QVector3D_Normal2(v1:QVector3D_ITF, v2:QVector3D_ITF, v3:QVector3D_ITF):QVector3D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QVector3D_Normal2", "", v1, v2, v3]);
}

interface QVector4D_ITF {
	public function QVector4D_PTR():QVector4D;
}

class QVector4D extends Internal implements QVector4D_ITF {
	public function new() {
		super();
	}

	public function QVector4D_PTR():QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVector4D_PTR"]);
	};

	public function DestroyQVector4D() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVector4D"]);
	};

	public function DotProduct(v1:QVector4D_ITF, v2:QVector4D_ITF):Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DotProduct", v1, v2]);
	};

	public function IsNull():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsNull"]);
	};

	public function Length():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Length"]);
	};

	public function LengthSquared():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "LengthSquared"]);
	};

	public function Normalize() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Normalize"]);
	};

	public function Normalized():QVector4D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Normalized"]);
	};

	public function SetW(w:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetW", w]);
	};

	public function SetX(x:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetX", x]);
	};

	public function SetY(y:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetY", y]);
	};

	public function SetZ(z:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetZ", z]);
	};

	public function ToPoint():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPoint"]);
	};

	public function ToPointF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToPointF"]);
	};

	public function ToVector2D():QVector2D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector2D"]);
	};

	public function ToVector2DAffine():QVector2D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector2DAffine"]);
	};

	public function ToVector3D():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector3D"]);
	};

	public function ToVector3DAffine():QVector3D {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ToVector3DAffine"]);
	};

	public function W():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "W"]);
	};

	public function X():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};

	public function Z():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Z"]);
	};
}

function NewQVector4DFromPointer(ptr:String):QVector4D {
	final r = new QVector4D();
	r.initFrom(ptr, "gui.QVector4D");
	return r;
}

function NewQVector4D():QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D", ""]);
}

function NewQVector4D3(xpos:Float, ypos:Float, zpos:Float, wpos:Float):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D3", "", xpos, ypos, zpos, wpos]);
}

function NewQVector4D4(point:QPoint_ITF):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D4", "", point]);
}

function NewQVector4D5(point:QPointF_ITF):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D5", "", point]);
}

function NewQVector4D6(vector:QVector2D_ITF):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D6", "", vector]);
}

function NewQVector4D7(vector:QVector2D_ITF, zpos:Float, wpos:Float):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D7", "", vector, zpos, wpos]);
}

function NewQVector4D8(vector:QVector3D_ITF):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D8", "", vector]);
}

function NewQVector4D9(vector:QVector3D_ITF, wpos:Float):QVector4D {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQVector4D9", "", vector, wpos]);
}

function QVector4D_DotProduct(v1:QVector4D_ITF, v2:QVector4D_ITF):Float {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QVector4D_DotProduct", "", v1, v2]);
}

interface QVulkanDeviceFunctions_ITF {
	public function QVulkanDeviceFunctions_PTR():QVulkanDeviceFunctions;
}

class QVulkanDeviceFunctions extends Internal implements QVulkanDeviceFunctions_ITF {
	public function new() {
		super();
	}

	public function QVulkanDeviceFunctions_PTR():QVulkanDeviceFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanDeviceFunctions_PTR"]);
	};

	public function DestroyQVulkanDeviceFunctions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVulkanDeviceFunctions"]);
	};
}

interface QVulkanExtension_ITF {
	public function QVulkanExtension_PTR():QVulkanExtension;
}

class QVulkanExtension extends Internal implements QVulkanExtension_ITF {
	public function new() {
		super();
	}

	public function QVulkanExtension_PTR():QVulkanExtension {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanExtension_PTR"]);
	};

	public function DestroyQVulkanExtension() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVulkanExtension"]);
	};
}

interface QVulkanFunctions_ITF {
	public function QVulkanFunctions_PTR():QVulkanFunctions;
}

class QVulkanFunctions extends Internal implements QVulkanFunctions_ITF {
	public function new() {
		super();
	}

	public function QVulkanFunctions_PTR():QVulkanFunctions {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanFunctions_PTR"]);
	};

	public function DestroyQVulkanFunctions() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVulkanFunctions"]);
	};
}

interface QVulkanInfoVector_ITF extends QVector_ITF {
	public function QVulkanInfoVector_PTR():QVulkanInfoVector;
}

class QVulkanInfoVector extends QVector implements QVulkanInfoVector_ITF {
	public function new() {
		super();
	}

	public function QVulkanInfoVector_PTR():QVulkanInfoVector {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanInfoVector_PTR"]);
	};

	public function DestroyQVulkanInfoVector() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVulkanInfoVector"]);
	};
}

interface QVulkanInstance_ITF {
	public function QVulkanInstance_PTR():QVulkanInstance;
}

class QVulkanInstance extends Internal implements QVulkanInstance_ITF {
	public function new() {
		super();
	}

	public function QVulkanInstance_PTR():QVulkanInstance {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanInstance_PTR"]);
	};
}

interface QVulkanLayer_ITF {
	public function QVulkanLayer_PTR():QVulkanLayer;
}

class QVulkanLayer extends Internal implements QVulkanLayer_ITF {
	public function new() {
		super();
	}

	public function QVulkanLayer_PTR():QVulkanLayer {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanLayer_PTR"]);
	};

	public function DestroyQVulkanLayer() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQVulkanLayer"]);
	};
}

interface QVulkanWindow_ITF extends QWindow_ITF {
	public function QVulkanWindow_PTR():QVulkanWindow;
}

class QVulkanWindow extends QWindow implements QVulkanWindow_ITF {
	public function new() {
		super();
	}

	public function QVulkanWindow_PTR():QVulkanWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanWindow_PTR"]);
	};
}

interface QVulkanWindowRenderer_ITF {
	public function QVulkanWindowRenderer_PTR():QVulkanWindowRenderer;
}

class QVulkanWindowRenderer extends Internal implements QVulkanWindowRenderer_ITF {
	public function new() {
		super();
	}

	public function QVulkanWindowRenderer_PTR():QVulkanWindowRenderer {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QVulkanWindowRenderer_PTR"]);
	};
}

interface QWhatsThisClickedEvent_ITF extends QEvent_ITF {
	public function QWhatsThisClickedEvent_PTR():QWhatsThisClickedEvent;
}

class QWhatsThisClickedEvent extends QEvent implements QWhatsThisClickedEvent_ITF {
	public function new() {
		super();
	}

	public function QWhatsThisClickedEvent_PTR():QWhatsThisClickedEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QWhatsThisClickedEvent_PTR"]);
	};

	public function DestroyQWhatsThisClickedEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQWhatsThisClickedEvent"]);
	};

	public function Href():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Href"]);
	};
}

function NewQWhatsThisClickedEventFromPointer(ptr:String):QWhatsThisClickedEvent {
	final r = new QWhatsThisClickedEvent();
	r.initFrom(ptr, "gui.QWhatsThisClickedEvent");
	return r;
}

function NewQWhatsThisClickedEvent(href:String):QWhatsThisClickedEvent {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQWhatsThisClickedEvent", "", href]);
}

interface QWheelEvent_ITF extends QInputEvent_ITF {
	public function QWheelEvent_PTR():QWheelEvent;
}

class QWheelEvent extends QInputEvent implements QWheelEvent_ITF {
	public function new() {
		super();
	}

	public function QWheelEvent_PTR():QWheelEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QWheelEvent_PTR"]);
	};

	public function DestroyQWheelEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQWheelEvent"]);
	};

	public function AngleDelta():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "AngleDelta"]);
	};

	public function Buttons():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Buttons"]);
	};

	public function GlobalPos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPos"]);
	};

	public function GlobalPosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalPosF"]);
	};

	public function GlobalX():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalX"]);
	};

	public function GlobalY():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "GlobalY"]);
	};

	public function Inverted():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Inverted"]);
	};

	public function Phase():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Phase"]);
	};

	public function PixelDelta():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PixelDelta"]);
	};

	public function Pos():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Pos"]);
	};

	public function PosF():QPointF {
		return Internal.callLocalFunction(["", Pointer(), ___className, "PosF"]);
	};

	public function Source():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Source"]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};
}

function NewQWheelEventFromPointer(ptr:String):QWheelEvent {
	final r = new QWheelEvent();
	r.initFrom(ptr, "gui.QWheelEvent");
	return r;
}

function NewQWheelEvent3(pos:QPointF_ITF, globalPos:QPointF_ITF, pixelDelta:QPoint_ITF, angleDelta:QPoint_ITF, qt4Delta:Int, qt4Orientation:Int, buttons:Int,
		modifiers:Int):QWheelEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQWheelEvent3", "", pos, globalPos, pixelDelta, angleDelta, qt4Delta, qt4Orientation, buttons, modifiers
	]);
}

function NewQWheelEvent4(pos:QPointF_ITF, globalPos:QPointF_ITF, pixelDelta:QPoint_ITF, angleDelta:QPoint_ITF, qt4Delta:Int, qt4Orientation:Int, buttons:Int,
		modifiers:Int, phase:Int):QWheelEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQWheelEvent4", "", pos, globalPos, pixelDelta, angleDelta, qt4Delta, qt4Orientation, buttons, modifiers, phase
	]);
}

function NewQWheelEvent5(pos:QPointF_ITF, globalPos:QPointF_ITF, pixelDelta:QPoint_ITF, angleDelta:QPoint_ITF, qt4Delta:Int, qt4Orientation:Int, buttons:Int,
		modifiers:Int, phase:Int, source:Int):QWheelEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQWheelEvent5", "", pos, globalPos, pixelDelta, angleDelta, qt4Delta, qt4Orientation, buttons, modifiers, phase, source
	]);
}

function NewQWheelEvent6(pos:QPointF_ITF, globalPos:QPointF_ITF, pixelDelta:QPoint_ITF, angleDelta:QPoint_ITF, qt4Delta:Int, qt4Orientation:Int, buttons:Int,
		modifiers:Int, phase:Int, source:Int, inverted:Bool):QWheelEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQWheelEvent6", "", pos, globalPos, pixelDelta, angleDelta, qt4Delta, qt4Orientation, buttons, modifiers, phase, source, inverted
	]);
}

function NewQWheelEvent7(pos:QPointF_ITF, globalPos:QPointF_ITF, pixelDelta:QPoint_ITF, angleDelta:QPoint_ITF, buttons:Int, modifiers:Int, phase:Int,
		inverted:Bool, source:Int):QWheelEvent {
	Gui.initModule();
	return Internal.callLocalFunction([
		"", "", "gui.NewQWheelEvent7", "", pos, globalPos, pixelDelta, angleDelta, buttons, modifiers, phase, inverted, source
	]);
}

interface QWindow_ITF extends QSurface_ITF {
	public function QWindow_PTR():QWindow;
	public function QObject_PTR():QObject;
}

class QWindow extends QSurface implements QWindow_ITF {
	public function QObject_PTR():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QObject_PTR"]);
	}

	public function new() {
		super();
	}

	public function QWindow_PTR():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QWindow_PTR"]);
	};

	public function ConnectActiveChanged(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectActiveChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectActiveChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectActiveChanged"]);
	};

	public function ActiveChanged() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ActiveChanged"]);
	};

	public function ConnectAlert(f:(msec:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectAlert", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectAlert() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectAlert"]);
	};

	public function Alert(msec:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Alert", msec]);
	};

	public function AlertDefault(msec:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "AlertDefault", msec]);
	};

	public function BaseSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "BaseSize"]);
	};

	public function ConnectClose(f:() -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectClose", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectClose() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectClose"]);
	};

	public function Close():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Close"]);
	};

	public function CloseDefault():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "CloseDefault"]);
	};

	public function ContentOrientation():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "ContentOrientation"]);
	};

	public function ConnectContentOrientationChanged(f:(orientation:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectContentOrientationChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectContentOrientationChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectContentOrientationChanged"]);
	};

	public function ContentOrientationChanged(orientation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ContentOrientationChanged", orientation]);
	};

	public function Create() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Create"]);
	};

	public function Cursor():QCursor {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Cursor"]);
	};

	public function Destroy() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Destroy"]);
	};

	public function DevicePixelRatio():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "DevicePixelRatio"]);
	};

	public function ConnectEvent(f:(ev:QEvent) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectEvent"]);
	};

	public function Event(ev:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Event", ev]);
	};

	public function EventDefault(ev:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventDefault", ev]);
	};

	public function ConnectExposeEvent(f:(ev:QExposeEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectExposeEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectExposeEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectExposeEvent"]);
	};

	public function ExposeEvent(ev:QExposeEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ExposeEvent", ev]);
	};

	public function ExposeEventDefault(ev:QExposeEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ExposeEventDefault", ev]);
	};

	public function FilePath():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FilePath"]);
	};

	public function Flags():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Flags"]);
	};

	public function ConnectFocusInEvent(f:(ev:QFocusEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFocusInEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFocusInEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusInEvent"]);
	};

	public function FocusInEvent(ev:QFocusEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusInEvent", ev]);
	};

	public function FocusInEventDefault(ev:QFocusEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusInEventDefault", ev]);
	};

	public function ConnectFocusObject(f:() -> QObject) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFocusObject", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFocusObject() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusObject"]);
	};

	public function FocusObject():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocusObject"]);
	};

	public function FocusObjectDefault():QObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FocusObjectDefault"]);
	};

	public function ConnectFocusObjectChanged(f:(object:QObject) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectFocusObjectChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectFocusObjectChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusObjectChanged"]);
	};

	public function FocusObjectChanged(object:QObject_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusObjectChanged", object]);
	};

	public function ConnectFocusOutEvent(f:(ev:QFocusEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFocusOutEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectFocusOutEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFocusOutEvent"]);
	};

	public function FocusOutEvent(ev:QFocusEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusOutEvent", ev]);
	};

	public function FocusOutEventDefault(ev:QFocusEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "FocusOutEventDefault", ev]);
	};

	public override function ConnectFormat(f:() -> QSurfaceFormat) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectFormat", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectFormat() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectFormat"]);
	};

	public override function Format():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Format"]);
	};

	public function FormatDefault():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FormatDefault"]);
	};

	public function FrameGeometry():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FrameGeometry"]);
	};

	public function FrameMargins():QMargins {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FrameMargins"]);
	};

	public function FramePosition():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FramePosition"]);
	};

	public function FromWinId(id:Int):QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "FromWinId", id]);
	};

	public function Geometry():QRect {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Geometry"]);
	};

	public function Height():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Height"]);
	};

	public function ConnectHeightChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectHeightChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectHeightChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectHeightChanged"]);
	};

	public function HeightChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "HeightChanged", arg]);
	};

	public function ConnectHide(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectHide", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectHide() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectHide"]);
	};

	public function Hide() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Hide"]);
	};

	public function HideDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "HideDefault"]);
	};

	public function ConnectHideEvent(f:(ev:QHideEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectHideEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectHideEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectHideEvent"]);
	};

	public function HideEvent(ev:QHideEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "HideEvent", ev]);
	};

	public function HideEventDefault(ev:QHideEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "HideEventDefault", ev]);
	};

	public function Icon():QIcon {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Icon"]);
	};

	public function IsActive():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsActive"]);
	};

	public function IsAncestorOf(child:QWindow_ITF, mode:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsAncestorOf", child, mode]);
	};

	public function IsExposed():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsExposed"]);
	};

	public function IsModal():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsModal"]);
	};

	public function IsTopLevel():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsTopLevel"]);
	};

	public function IsVisible():Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "IsVisible"]);
	};

	public function ConnectKeyPressEvent(f:(ev:QKeyEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectKeyPressEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectKeyPressEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectKeyPressEvent"]);
	};

	public function KeyPressEvent(ev:QKeyEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "KeyPressEvent", ev]);
	};

	public function KeyPressEventDefault(ev:QKeyEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "KeyPressEventDefault", ev]);
	};

	public function ConnectKeyReleaseEvent(f:(ev:QKeyEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectKeyReleaseEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectKeyReleaseEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectKeyReleaseEvent"]);
	};

	public function KeyReleaseEvent(ev:QKeyEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "KeyReleaseEvent", ev]);
	};

	public function KeyReleaseEventDefault(ev:QKeyEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "KeyReleaseEventDefault", ev]);
	};

	public function ConnectLower(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectLower", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectLower() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectLower"]);
	};

	public function Lower() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Lower"]);
	};

	public function LowerDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "LowerDefault"]);
	};

	public function MapFromGlobal(pos:QPoint_ITF):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapFromGlobal", pos]);
	};

	public function MapToGlobal(pos:QPoint_ITF):QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MapToGlobal", pos]);
	};

	public function Mask():QRegion {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Mask"]);
	};

	public function MaximumHeight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumHeight"]);
	};

	public function ConnectMaximumHeightChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMaximumHeightChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMaximumHeightChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMaximumHeightChanged"]);
	};

	public function MaximumHeightChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MaximumHeightChanged", arg]);
	};

	public function MaximumSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumSize"]);
	};

	public function MaximumWidth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MaximumWidth"]);
	};

	public function ConnectMaximumWidthChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMaximumWidthChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMaximumWidthChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMaximumWidthChanged"]);
	};

	public function MaximumWidthChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MaximumWidthChanged", arg]);
	};

	public function MinimumHeight():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumHeight"]);
	};

	public function ConnectMinimumHeightChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMinimumHeightChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMinimumHeightChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMinimumHeightChanged"]);
	};

	public function MinimumHeightChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MinimumHeightChanged", arg]);
	};

	public function MinimumSize():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumSize"]);
	};

	public function MinimumWidth():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MinimumWidth"]);
	};

	public function ConnectMinimumWidthChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMinimumWidthChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMinimumWidthChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMinimumWidthChanged"]);
	};

	public function MinimumWidthChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MinimumWidthChanged", arg]);
	};

	public function Modality():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Modality"]);
	};

	public function ConnectModalityChanged(f:(modality:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectModalityChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectModalityChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectModalityChanged"]);
	};

	public function ModalityChanged(modality:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ModalityChanged", modality]);
	};

	public function ConnectMouseDoubleClickEvent(f:(ev:QMouseEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectMouseDoubleClickEvent",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectMouseDoubleClickEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMouseDoubleClickEvent"]);
	};

	public function MouseDoubleClickEvent(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseDoubleClickEvent", ev]);
	};

	public function MouseDoubleClickEventDefault(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseDoubleClickEventDefault", ev]);
	};

	public function ConnectMouseMoveEvent(f:(ev:QMouseEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMouseMoveEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMouseMoveEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMouseMoveEvent"]);
	};

	public function MouseMoveEvent(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseMoveEvent", ev]);
	};

	public function MouseMoveEventDefault(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseMoveEventDefault", ev]);
	};

	public function ConnectMousePressEvent(f:(ev:QMouseEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMousePressEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMousePressEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMousePressEvent"]);
	};

	public function MousePressEvent(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MousePressEvent", ev]);
	};

	public function MousePressEventDefault(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MousePressEventDefault", ev]);
	};

	public function ConnectMouseReleaseEvent(f:(ev:QMouseEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMouseReleaseEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMouseReleaseEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMouseReleaseEvent"]);
	};

	public function MouseReleaseEvent(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseReleaseEvent", ev]);
	};

	public function MouseReleaseEventDefault(ev:QMouseEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MouseReleaseEventDefault", ev]);
	};

	public function ConnectMoveEvent(f:(ev:QMoveEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectMoveEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectMoveEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectMoveEvent"]);
	};

	public function MoveEvent(ev:QMoveEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MoveEvent", ev]);
	};

	public function MoveEventDefault(ev:QMoveEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "MoveEventDefault", ev]);
	};

	public function ConnectNativeEvent(f:(eventType:QByteArray, message:Int, result:Int) -> Bool) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectNativeEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectNativeEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectNativeEvent"]);
	};

	public function NativeEvent(eventType:QByteArray_ITF, message:Int, result:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeEvent", eventType, message, result]);
	};

	public function NativeEventDefault(eventType:QByteArray_ITF, message:Int, result:Int):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "NativeEventDefault", eventType, message, result]);
	};

	public function Opacity():Float {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Opacity"]);
	};

	public function ConnectOpacityChanged(f:(opacity:Float) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectOpacityChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectOpacityChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectOpacityChanged"]);
	};

	public function OpacityChanged(opacity:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "OpacityChanged", opacity]);
	};

	public function Parent_QWindow(mode:Int):QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parent", mode]);
	};

	public function Parent2():QWindow {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Parent2"]);
	};

	public function Position():QPoint {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Position"]);
	};

	public function ConnectRaise(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRaise", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRaise() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRaise"]);
	};

	public function Raise() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Raise"]);
	};

	public function RaiseDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RaiseDefault"]);
	};

	public function ReportContentOrientationChange(orientation:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ReportContentOrientationChange", orientation]);
	};

	public function ConnectRequestActivate(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRequestActivate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRequestActivate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRequestActivate"]);
	};

	public function RequestActivate() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RequestActivate"]);
	};

	public function RequestActivateDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RequestActivateDefault"]);
	};

	public function ConnectRequestUpdate(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectRequestUpdate", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectRequestUpdate() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectRequestUpdate"]);
	};

	public function RequestUpdate() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RequestUpdate"]);
	};

	public function RequestUpdateDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "RequestUpdateDefault"]);
	};

	public function RequestedFormat():QSurfaceFormat {
		return Internal.callLocalFunction(["", Pointer(), ___className, "RequestedFormat"]);
	};

	public function Resize(newSize:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Resize", newSize]);
	};

	public function Resize2(w:Int, h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "Resize2", w, h]);
	};

	public function ConnectResizeEvent(f:(ev:QResizeEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectResizeEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectResizeEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectResizeEvent"]);
	};

	public function ResizeEvent(ev:QResizeEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResizeEvent", ev]);
	};

	public function ResizeEventDefault(ev:QResizeEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ResizeEventDefault", ev]);
	};

	public function Screen():QScreen {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Screen"]);
	};

	public function ConnectScreenChanged(f:(screen:QScreen) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectScreenChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectScreenChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectScreenChanged"]);
	};

	public function ScreenChanged(screen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ScreenChanged", screen]);
	};

	public function SetBaseSize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetBaseSize", size]);
	};

	public function SetCursor(cursor:QCursor_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetCursor", cursor]);
	};

	public function SetFilePath(filePath:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFilePath", filePath]);
	};

	public function SetFlag(flag:Int, on:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFlag", flag, on]);
	};

	public function SetFlags(flags:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFlags", flags]);
	};

	public function SetFormat(format:QSurfaceFormat_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFormat", format]);
	};

	public function SetFramePosition(point:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetFramePosition", point]);
	};

	public function ConnectSetGeometry(f:(posx:Int, posy:Int, w:Int, h:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetGeometry", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetGeometry() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetGeometry"]);
	};

	public function SetGeometry(posx:Int, posy:Int, w:Int, h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGeometry", posx, posy, w, h]);
	};

	public function SetGeometryDefault(posx:Int, posy:Int, w:Int, h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGeometryDefault", posx, posy, w, h]);
	};

	public function ConnectSetGeometry2(f:(rect:QRect) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetGeometry2", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetGeometry2() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetGeometry2"]);
	};

	public function SetGeometry2(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGeometry2", rect]);
	};

	public function SetGeometry2Default(rect:QRect_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetGeometry2Default", rect]);
	};

	public function ConnectSetHeight(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetHeight", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetHeight() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetHeight"]);
	};

	public function SetHeight(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeight", arg]);
	};

	public function SetHeightDefault(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetHeightDefault", arg]);
	};

	public function SetIcon(icon:QIcon_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetIcon", icon]);
	};

	public function SetKeyboardGrabEnabled(grab:Bool):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetKeyboardGrabEnabled", grab]);
	};

	public function SetMask(region:QRegion_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMask", region]);
	};

	public function ConnectSetMaximumHeight(f:(h:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetMaximumHeight", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetMaximumHeight() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetMaximumHeight"]);
	};

	public function SetMaximumHeight(h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumHeight", h]);
	};

	public function SetMaximumHeightDefault(h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumHeightDefault", h]);
	};

	public function SetMaximumSize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumSize", size]);
	};

	public function ConnectSetMaximumWidth(f:(w:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetMaximumWidth", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetMaximumWidth() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetMaximumWidth"]);
	};

	public function SetMaximumWidth(w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumWidth", w]);
	};

	public function SetMaximumWidthDefault(w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMaximumWidthDefault", w]);
	};

	public function ConnectSetMinimumHeight(f:(h:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetMinimumHeight", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetMinimumHeight() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetMinimumHeight"]);
	};

	public function SetMinimumHeight(h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumHeight", h]);
	};

	public function SetMinimumHeightDefault(h:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumHeightDefault", h]);
	};

	public function SetMinimumSize(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumSize", size]);
	};

	public function ConnectSetMinimumWidth(f:(w:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetMinimumWidth", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetMinimumWidth() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetMinimumWidth"]);
	};

	public function SetMinimumWidth(w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumWidth", w]);
	};

	public function SetMinimumWidthDefault(w:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetMinimumWidthDefault", w]);
	};

	public function SetModality(modality:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetModality", modality]);
	};

	public function SetMouseGrabEnabled(grab:Bool):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SetMouseGrabEnabled", grab]);
	};

	public function SetOpacity(level:Float) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetOpacity", level]);
	};

	public function SetParent_QWindow(parent:QWindow_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetParent", parent]);
	};

	public function SetPosition(pt:QPoint_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPosition", pt]);
	};

	public function SetPosition2(posx:Int, posy:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetPosition2", posx, posy]);
	};

	public function SetScreen(newScreen:QScreen_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetScreen", newScreen]);
	};

	public function SetSizeIncrement(size:QSize_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSizeIncrement", size]);
	};

	public function SetSurfaceType(surfaceType:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetSurfaceType", surfaceType]);
	};

	public function ConnectSetTitle(f:(vqs:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetTitle", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetTitle() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetTitle"]);
	};

	public function SetTitle(vqs:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTitle", vqs]);
	};

	public function SetTitleDefault(vqs:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetTitleDefault", vqs]);
	};

	public function SetVisibility(v:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVisibility", v]);
	};

	public function ConnectSetVisible(f:(visible:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetVisible", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetVisible() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetVisible"]);
	};

	public function SetVisible(visible:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVisible", visible]);
	};

	public function SetVisibleDefault(visible:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetVisibleDefault", visible]);
	};

	public function ConnectSetWidth(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetWidth", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetWidth() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetWidth"]);
	};

	public function SetWidth(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidth", arg]);
	};

	public function SetWidthDefault(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWidthDefault", arg]);
	};

	public function SetWindowState(state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWindowState", state]);
	};

	public function SetWindowStates(state:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetWindowStates", state]);
	};

	public function ConnectSetX(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetX", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetX() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetX"]);
	};

	public function SetX(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetX", arg]);
	};

	public function SetXDefault(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetXDefault", arg]);
	};

	public function ConnectSetY(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSetY", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectSetY() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSetY"]);
	};

	public function SetY(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetY", arg]);
	};

	public function SetYDefault(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "SetYDefault", arg]);
	};

	public function ConnectShow(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShow", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShow"]);
	};

	public function Show() {
		Internal.callLocalFunction(["", Pointer(), ___className, "Show"]);
	};

	public function ShowDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowDefault"]);
	};

	public function ConnectShowEvent(f:(ev:QShowEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShowEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShowEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShowEvent"]);
	};

	public function ShowEvent(ev:QShowEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowEvent", ev]);
	};

	public function ShowEventDefault(ev:QShowEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowEventDefault", ev]);
	};

	public function ConnectShowFullScreen(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShowFullScreen", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShowFullScreen() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShowFullScreen"]);
	};

	public function ShowFullScreen() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowFullScreen"]);
	};

	public function ShowFullScreenDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowFullScreenDefault"]);
	};

	public function ConnectShowMaximized(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShowMaximized", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShowMaximized() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShowMaximized"]);
	};

	public function ShowMaximized() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowMaximized"]);
	};

	public function ShowMaximizedDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowMaximizedDefault"]);
	};

	public function ConnectShowMinimized(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShowMinimized", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShowMinimized() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShowMinimized"]);
	};

	public function ShowMinimized() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowMinimized"]);
	};

	public function ShowMinimizedDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowMinimizedDefault"]);
	};

	public function ConnectShowNormal(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectShowNormal", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectShowNormal() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectShowNormal"]);
	};

	public function ShowNormal() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowNormal"]);
	};

	public function ShowNormalDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "ShowNormalDefault"]);
	};

	public override function ConnectSize(f:() -> QSize) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSize", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectSize() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSize"]);
	};

	public override function Size():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Size"]);
	};

	public function SizeDefault():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizeDefault"]);
	};

	public function SizeIncrement():QSize {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SizeIncrement"]);
	};

	public override function ConnectSurfaceType(f:() -> Int) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectSurfaceType", "___REMOTE_CALLBACK___"], f);
	};

	public override function DisconnectSurfaceType() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectSurfaceType"]);
	};

	public override function SurfaceType():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceType"]);
	};

	public function SurfaceTypeDefault():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "SurfaceTypeDefault"]);
	};

	public function ConnectTabletEvent(f:(ev:QTabletEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTabletEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTabletEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTabletEvent"]);
	};

	public function TabletEvent(ev:QTabletEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TabletEvent", ev]);
	};

	public function TabletEventDefault(ev:QTabletEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TabletEventDefault", ev]);
	};

	public function Title():String {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Title"]);
	};

	public function ConnectTouchEvent(f:(ev:QTouchEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectTouchEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectTouchEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectTouchEvent"]);
	};

	public function TouchEvent(ev:QTouchEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TouchEvent", ev]);
	};

	public function TouchEventDefault(ev:QTouchEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TouchEventDefault", ev]);
	};

	public function Type():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Type"]);
	};

	public function UnsetCursor() {
		Internal.callLocalFunction(["", Pointer(), ___className, "UnsetCursor"]);
	};

	public function Visibility():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Visibility"]);
	};

	public function ConnectVisibilityChanged(f:(visibility:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectVisibilityChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectVisibilityChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectVisibilityChanged"]);
	};

	public function VisibilityChanged(visibility:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "VisibilityChanged", visibility]);
	};

	public function ConnectVisibleChanged(f:(arg:Bool) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectVisibleChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectVisibleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectVisibleChanged"]);
	};

	public function VisibleChanged(arg:Bool) {
		Internal.callLocalFunction(["", Pointer(), ___className, "VisibleChanged", arg]);
	};

	public function ConnectWheelEvent(f:(ev:QWheelEvent) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectWheelEvent", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectWheelEvent() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWheelEvent"]);
	};

	public function WheelEvent(ev:QWheelEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WheelEvent", ev]);
	};

	public function WheelEventDefault(ev:QWheelEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WheelEventDefault", ev]);
	};

	public function Width():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Width"]);
	};

	public function ConnectWidthChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectWidthChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectWidthChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWidthChanged"]);
	};

	public function WidthChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WidthChanged", arg]);
	};

	public function WinId():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WinId"]);
	};

	public function WindowState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowState"]);
	};

	public function ConnectWindowStateChanged(f:(windowState:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectWindowStateChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectWindowStateChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWindowStateChanged"]);
	};

	public function WindowStateChanged(windowState:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WindowStateChanged", windowState]);
	};

	public function WindowStates():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "WindowStates"]);
	};

	public function ConnectWindowTitleChanged(f:(title:String) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction([
			"",
			Pointer(),
			___className,
			"ConnectWindowTitleChanged",
			"___REMOTE_CALLBACK___"
		], f);
	};

	public function DisconnectWindowTitleChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectWindowTitleChanged"]);
	};

	public function WindowTitleChanged(title:String) {
		Internal.callLocalFunction(["", Pointer(), ___className, "WindowTitleChanged", title]);
	};

	public function X():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "X"]);
	};

	public function ConnectXChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectXChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectXChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectXChanged"]);
	};

	public function XChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "XChanged", arg]);
	};

	public function Y():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "Y"]);
	};

	public function ConnectYChanged(f:(arg:Int) -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectYChanged", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectYChanged() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectYChanged"]);
	};

	public function YChanged(arg:Int) {
		Internal.callLocalFunction(["", Pointer(), ___className, "YChanged", arg]);
	};

	public function ConnectDestroyQWindow(f:() -> Void) {
		Internal.callLocalAndRegisterRemoteFunction(["", Pointer(), ___className, "ConnectDestroyQWindow", "___REMOTE_CALLBACK___"], f);
	};

	public function DisconnectDestroyQWindow() {
		Internal.callLocalAndDeregisterRemoteFunction(["", Pointer(), ___className, "DisconnectDestroyQWindow"]);
	};

	public function DestroyQWindow() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQWindow"]);
	};

	public function DestroyQWindowDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQWindowDefault"]);
	};

	public function ChildEvent(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEvent", event]);
	};

	public function ChildEventDefault(event:QChildEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ChildEventDefault", event]);
	};

	public function ConnectNotify(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotify", sign]);
	};

	public function ConnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "ConnectNotifyDefault", sign]);
	};

	public function CustomEvent(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEvent", event]);
	};

	public function CustomEventDefault(event:QEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "CustomEventDefault", event]);
	};

	public function DeleteLater() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLater"]);
	};

	public function DeleteLaterDefault() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DeleteLaterDefault"]);
	};

	public function DisconnectNotify(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotify", sign]);
	};

	public function DisconnectNotifyDefault(sign:QMetaMethod_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "DisconnectNotifyDefault", sign]);
	};

	public function EventFilter(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilter", watched, event]);
	};

	public function EventFilterDefault(watched:QObject_ITF, event:QEvent_ITF):Bool {
		return Internal.callLocalFunction(["", Pointer(), ___className, "EventFilterDefault", watched, event]);
	};

	public function MetaObject():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObject"]);
	};

	public function MetaObjectDefault():QMetaObject {
		return Internal.callLocalFunction(["", Pointer(), ___className, "MetaObjectDefault"]);
	};

	public function TimerEvent(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEvent", event]);
	};

	public function TimerEventDefault(event:QTimerEvent_ITF) {
		Internal.callLocalFunction(["", Pointer(), ___className, "TimerEventDefault", event]);
	};
}

function NewQWindowFromPointer(ptr:String):QWindow {
	final r = new QWindow();
	r.initFrom(ptr, "gui.QWindow");
	return r;
}

function NewQWindow(targetScreen:QScreen_ITF):QWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQWindow", "", targetScreen]);
}

function NewQWindow2(parent:QWindow_ITF):QWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.NewQWindow2", "", parent]);
}

function QWindow_FromWinId(id:Int):QWindow {
	Gui.initModule();
	return Internal.callLocalFunction(["", "", "gui.QWindow_FromWinId", "", id]);
}

interface QWindowStateChangeEvent_ITF extends QEvent_ITF {
	public function QWindowStateChangeEvent_PTR():QWindowStateChangeEvent;
}

class QWindowStateChangeEvent extends QEvent implements QWindowStateChangeEvent_ITF {
	public function new() {
		super();
	}

	public function QWindowStateChangeEvent_PTR():QWindowStateChangeEvent {
		return Internal.callLocalFunction(["", Pointer(), ___className, "QWindowStateChangeEvent_PTR"]);
	};

	public function DestroyQWindowStateChangeEvent() {
		Internal.callLocalFunction(["", Pointer(), ___className, "DestroyQWindowStateChangeEvent"]);
	};

	public function OldState():Int {
		return Internal.callLocalFunction(["", Pointer(), ___className, "OldState"]);
	};
}

function NewQWindowStateChangeEventFromPointer(ptr:String):QWindowStateChangeEvent {
	final r = new QWindowStateChangeEvent();
	r.initFrom(ptr, "gui.QWindowStateChangeEvent");
	return r;
}
